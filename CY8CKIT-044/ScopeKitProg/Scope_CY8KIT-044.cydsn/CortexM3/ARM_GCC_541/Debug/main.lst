ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	DMA_Channel_1_Chan,1,1
  20              		.comm	DMA_Channel_1_TD,1,4
  21              		.comm	DMA_Channel_2_Chan,1,1
  22              		.comm	DMA_Channel_2_TD,1,4
  23              		.comm	Channel_1_Data,2048,4
  24              		.comm	Channel_2_Data,2048,4
  25              		.comm	szTempBuffer,64,4
  26              		.comm	cCharsReceived,1,1
  27              		.comm	szCommandsBuffer,4096,4
  28              		.comm	iRead,2,2
  29              		.comm	iWrite,2,2
  30              		.comm	cCommandsReady,2,2
  31              		.comm	szCommand,64,4
  32              		.comm	bCommandReady,1,1
  33              		.comm	preamp_a,1,1
  34              		.comm	preamp_b,1,1
  35              		.comm	trigger_source,1,1
  36              		.comm	preamp_trig,1,1
  37              		.comm	USB_Out_Buffer,64,4
  38              		.comm	WaveformA_Buffer,2048,4
  39              		.comm	WaveformA_Temp_Buffer,2048,4
  40              		.global	wavea_gain
  41              		.bss
  42              		.type	wavea_gain, %object
  43              		.size	wavea_gain, 1
  44              	wavea_gain:
  45 0000 00       		.space	1
  46              		.global	wavea_offset
  47              		.type	wavea_offset, %object
  48              		.size	wavea_offset, 1
  49              	wavea_offset:
  50 0001 00       		.space	1
  51              		.comm	WaveformB_Buffer,2048,4
  52              		.comm	WaveformB_Temp_Buffer,2048,4
  53              		.global	waveb_gain
  54              		.type	waveb_gain, %object
  55              		.size	waveb_gain, 1
  56              	waveb_gain:
  57 0002 00       		.space	1
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 2


  58              		.global	waveb_offset
  59              		.type	waveb_offset, %object
  60              		.size	waveb_offset, 1
  61              	waveb_offset:
  62 0003 00       		.space	1
  63              		.comm	Noise_Adjusted,1,1
  64              		.comm	Digital_AutoUpdate,1,1
  65              		.global	__aeabi_ui2f
  66              		.global	__aeabi_fmul
  67              		.global	__aeabi_f2d
  68              		.global	__aeabi_ddiv
  69              		.global	__aeabi_dadd
  70              		.global	__aeabi_d2f
  71              		.global	__aeabi_fcmpgt
  72              		.global	__aeabi_f2uiz
  73              		.section	.rodata
  74              		.align	2
  75              	.LC0:
  76 0000 2000     		.ascii	" \000"
  77 0002 0000     		.align	2
  78              	.LC1:
  79 0004 2A437953 		.ascii	"*CyScope V1.44\012\015\000"
  79      636F7065 
  79      2056312E 
  79      34340A0D 
  79      00
  80 0015 000000   		.align	2
  81              	.LC2:
  82 0018 25687500 		.ascii	"%hu\000"
  83              		.global	__aeabi_dmul
  84              		.global	__aeabi_fdiv
  85              		.global	__aeabi_i2d
  86              		.global	__aeabi_d2uiz
  87              		.align	2
  88              	.LC3:
  89 001c 4572726F 		.ascii	"Error: Unrecognized Scope Command\012\015\000"
  89      723A2055 
  89      6E726563 
  89      6F676E69 
  89      7A656420 
  90              		.align	2
  91              	.LC4:
  92 0040 4572726F 		.ascii	"Error: Unknown Command\012\015\000"
  92      723A2055 
  92      6E6B6E6F 
  92      776E2043 
  92      6F6D6D61 
  93              		.section	.text.main,"ax",%progbits
  94              		.align	2
  95              		.global	main
  96              		.thumb
  97              		.thumb_func
  98              		.type	main, %function
  99              	main:
 100              	.LFB64:
 101              		.file 1 "main.c"
   1:main.c        **** /* ========================================
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 3


   2:main.c        ****  *
   3:main.c        ****  * Copyright Cypress Semiconductor, 2016
   4:main.c        ****  * All Rights Reserved
   5:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:main.c        ****  *
   7:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:main.c        ****  * WHICH IS THE PROPERTY OF Cypress Semiconductor.
   9:main.c        ****  *
  10:main.c        ****  * ========================================
  11:main.c        **** */
  12:main.c        **** #include <device.h>
  13:main.c        **** #include <string.h>
  14:main.c        **** #include <stdio.h>
  15:main.c        **** 
  16:main.c        **** void DMA_Config(void);
  17:main.c        **** void Hardware_Config(void);
  18:main.c        **** uint16 GetLastSampleIndex(uint8 chHandle);
  19:main.c        **** void CommandCheck(void);
  20:main.c        **** void PutString(char * string);  // actually checks to see if the CDC device is ready before sending
  21:main.c        **** void PutChar(char Data);
  22:main.c        **** 
  23:main.c        **** // 2047 is the max buffer size in samples
  24:main.c        **** #define BUFFER_SIZE 1024
  25:main.c        **** 
  26:main.c        **** // trigger setup control register definitions
  27:main.c        **** #define FALLING_EDGE_TRIGGERED 0x01
  28:main.c        **** #define RISING_EDGE_TRIGGERED 0x02
  29:main.c        **** #define EITHER_EDGE_TRIGGERED 0x04
  30:main.c        **** #define EXTERNAL_TRIGGERED 0x08
  31:main.c        **** 
  32:main.c        **** #define TRIGGER_MASK 0x0F
  33:main.c        **** 
  34:main.c        **** #define MANUAL_TRIGGER 0x10
  35:main.c        **** #define TRIGGER_ARM 0x40
  36:main.c        **** #define RESET_PWM 0x80
  37:main.c        **** 
  38:main.c        **** // analog mux channel selection defines
  39:main.c        **** #define SCOPE_CHANNEL_1 0
  40:main.c        **** #define SCOPE_CHANNEL_2 1
  41:main.c        **** #define SCOPE_CHANNEL_3 0
  42:main.c        **** #define SCOPE_CHANNEL_4 1
  43:main.c        **** #define EXT_TRIGGER 2
  44:main.c        **** 
  45:main.c        **** // status register defines
  46:main.c        **** #define COMP_LEVEL 0x01
  47:main.c        **** #define TRIGGERED 0x02
  48:main.c        **** #define CAPTURE_COMPLETE 0x04
  49:main.c        **** 
  50:main.c        **** // Wave_Control control register definitions
  51:main.c        **** #define WAVEA_SELECT_MASK 0x01
  52:main.c        **** #define WAVE_SELECT_WAVE 0x00
  53:main.c        **** #define WAVEA_SELECT_NOISE 0x01
  54:main.c        **** #define WAVEB_SELECT_MASK 0x04
  55:main.c        **** #define WAVEB_SELECT_NOISE 0x04
  56:main.c        **** 
  57:main.c        **** /* DMA Configuration for DMA_Channel_1 */
  58:main.c        **** #define DMA_Channel_1_BYTES_PER_BURST 2
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 4


  59:main.c        **** #define DMA_Channel_1_REQUEST_PER_BURST 1
  60:main.c        **** #define DMA_Channel_1_SRC_BASE (CYDEV_PERIPH_BASE)
  61:main.c        **** #define DMA_Channel_1_DST_BASE (CYDEV_SRAM_BASE)
  62:main.c        **** 
  63:main.c        **** /* DMA Configuration for DMA_Channel_2 */
  64:main.c        **** #define DMA_Channel_2_BYTES_PER_BURST 2
  65:main.c        **** #define DMA_Channel_2_REQUEST_PER_BURST 1
  66:main.c        **** #define DMA_Channel_2_SRC_BASE (CYDEV_PERIPH_BASE)
  67:main.c        **** #define DMA_Channel_2_DST_BASE (CYDEV_SRAM_BASE)
  68:main.c        **** 
  69:main.c        **** /* Variable declarations for DMA_Channel_1 */
  70:main.c        **** /* Move these variable declarations to the top of the function */
  71:main.c        **** uint8 DMA_Channel_1_Chan;
  72:main.c        **** uint8 DMA_Channel_1_TD[1];
  73:main.c        **** 
  74:main.c        **** /* Variable declarations for DMA_Channel_2 */
  75:main.c        **** /* Move these variable declarations to the top of the function */
  76:main.c        **** uint8 DMA_Channel_2_Chan;
  77:main.c        **** uint8 DMA_Channel_2_TD[1];
  78:main.c        **** 
  79:main.c        **** // RAM data arrays for storing the sampled data
  80:main.c        **** uint16 Channel_1_Data[BUFFER_SIZE];
  81:main.c        **** uint16 Channel_2_Data[BUFFER_SIZE];
  82:main.c        **** 
  83:main.c        **** // USB UART variables
  84:main.c        **** #define COMMAND_BUFFER_SIZE 64
  85:main.c        **** char szTempBuffer[COMMAND_BUFFER_SIZE];
  86:main.c        **** uint8 cCharsReceived;
  87:main.c        **** 
  88:main.c        **** #define CIRCULAR_BUFFER_SIZE 4096
  89:main.c        **** char szCommandsBuffer[CIRCULAR_BUFFER_SIZE]; // need to make this many times bigger to deal with th
  90:main.c        **** uint16 iRead, iWrite;
  91:main.c        **** uint16 cCommandsReady;
  92:main.c        **** 
  93:main.c        **** char szCommand[COMMAND_BUFFER_SIZE];
  94:main.c        **** uint8 bCommandReady;
  95:main.c        **** 
  96:main.c        **** // scope status variable
  97:main.c        **** uint8 preamp_a, preamp_b, trigger_source, preamp_trig;
  98:main.c        **** 
  99:main.c        **** // for dumping data out (its 64 bytes, but if you want anything less, it has to be a multiple of 4)
 100:main.c        **** // also a good idea to make it a multiple of the ADC buffer size, defined above
 101:main.c        **** #define USBUART_BUFFER_SIZE 64
 102:main.c        **** uint8 USB_Out_Buffer[USBUART_BUFFER_SIZE];
 103:main.c        **** 
 104:main.c        **** // Waveform generator variables
 105:main.c        **** #define WAVEFORM_BUFFER_SIZE 2048
 106:main.c        **** uint8 WaveformA_Buffer[WAVEFORM_BUFFER_SIZE];
 107:main.c        **** uint8 WaveformA_Temp_Buffer[WAVEFORM_BUFFER_SIZE];
 108:main.c        **** uint8 wavea_gain = 0;
 109:main.c        **** uint8 wavea_offset = 0;
 110:main.c        **** uint8 WaveformB_Buffer[WAVEFORM_BUFFER_SIZE];
 111:main.c        **** uint8 WaveformB_Temp_Buffer[WAVEFORM_BUFFER_SIZE];
 112:main.c        **** uint8 waveb_gain = 0;
 113:main.c        **** uint8 waveb_offset = 0;
 114:main.c        **** 
 115:main.c        **** //GJL
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 5


 116:main.c        **** // Buffer for noise output after applying amplitude and offset
 117:main.c        **** uint8 Noise_Adjusted;
 118:main.c        **** 
 119:main.c        **** //GJL
 120:main.c        **** //// digital input last state variable
 121:main.c        **** //uint8 Digital_Input_Status_Last;
 122:main.c        **** uint8 Digital_AutoUpdate;
 123:main.c        **** 
 124:main.c        **** // For the SAR ADC to run at 18MHz, it *must* have a 50% duty cycle. 
 125:main.c        **** // There are 3 frequencies from the PLL that satisfy
 126:main.c        **** // generating an 18 Mhz clock from integer divides off the PLL: 36 Mhz
 127:main.c        **** // 54 Mhz and 72 Mhz.  Of these three choices, 54 Mhz requires a divide of
 128:main.c        **** // 3 which does not produce a 50% duty cycle.
 129:main.c        **** 
 130:main.c        **** int main()
 131:main.c        **** {
 102              		.loc 1 131 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 40
 105              		@ frame_needed = 1, uses_anonymous_args = 0
 106 0000 B0B5     		push	{r4, r5, r7, lr}
 107              		.cfi_def_cfa_offset 16
 108              		.cfi_offset 4, -16
 109              		.cfi_offset 5, -12
 110              		.cfi_offset 7, -8
 111              		.cfi_offset 14, -4
 112 0002 8AB0     		sub	sp, sp, #40
 113              		.cfi_def_cfa_offset 56
 114 0004 00AF     		add	r7, sp, #0
 115              		.cfi_def_cfa_register 7
 132:main.c        **** 	uint8 status;
 133:main.c        **** 	uint16 ending_offset;
 134:main.c        **** 	char * psz;
 135:main.c        **** 	uint16 avar, bvar, i, ulen;
 136:main.c        **** 	uint32 phase_int;
 137:main.c        ****     uint32 pwm_div;
 138:main.c        ****     uint32 uaddr;
 139:main.c        **** 	float freq;
 140:main.c        ****     float wave_temp;
 141:main.c        ****  
 142:main.c        ****     Hardware_Config();
 116              		.loc 1 142 0
 117 0006 FFF7FEFF 		bl	Hardware_Config
 143:main.c        ****     DMA_Config();
 118              		.loc 1 143 0
 119 000a FFF7FEFF 		bl	DMA_Config
 120              	.L116:
 144:main.c        **** 
 145:main.c        ****     for(;;)
 146:main.c        ****     {
 147:main.c        **** 		CommandCheck();
 121              		.loc 1 147 0
 122 000e FFF7FEFF 		bl	CommandCheck
 148:main.c        **** 		
 149:main.c        **** 		//GJL Adjust amplitude and offset for noise output
 150:main.c        **** 		wave_temp = (uint8) *PRS_SEED_PTR;
 123              		.loc 1 150 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 6


 124 0012 9F4B     		ldr	r3, .L124+8
 125 0014 1B88     		ldrh	r3, [r3]	@ movhi
 126 0016 9BB2     		uxth	r3, r3
 127 0018 DBB2     		uxtb	r3, r3
 128 001a 1846     		mov	r0, r3
 129 001c FFF7FEFF 		bl	__aeabi_ui2f
 130 0020 0346     		mov	r3, r0
 131 0022 FB61     		str	r3, [r7, #28]	@ float
 151:main.c        **** 		wave_temp = (((float) wave_temp) * ((float)wavea_gain)/255.0) + ((float)wavea_offset);
 132              		.loc 1 151 0
 133 0024 9B4B     		ldr	r3, .L124+12
 134 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 135 0028 1846     		mov	r0, r3
 136 002a FFF7FEFF 		bl	__aeabi_ui2f
 137 002e 0346     		mov	r3, r0
 138 0030 F969     		ldr	r1, [r7, #28]	@ float
 139 0032 1846     		mov	r0, r3
 140 0034 FFF7FEFF 		bl	__aeabi_fmul
 141 0038 0346     		mov	r3, r0
 142 003a 1846     		mov	r0, r3
 143 003c FFF7FEFF 		bl	__aeabi_f2d
 144 0040 91A3     		adr	r3, .L124
 145 0042 D3E90023 		ldrd	r2, [r3]
 146 0046 FFF7FEFF 		bl	__aeabi_ddiv
 147 004a 0346     		mov	r3, r0
 148 004c 0C46     		mov	r4, r1
 149 004e 2546     		mov	r5, r4
 150 0050 1C46     		mov	r4, r3
 151 0052 914B     		ldr	r3, .L124+16
 152 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 153 0056 1846     		mov	r0, r3
 154 0058 FFF7FEFF 		bl	__aeabi_ui2f
 155 005c 0346     		mov	r3, r0
 156 005e 1846     		mov	r0, r3
 157 0060 FFF7FEFF 		bl	__aeabi_f2d
 158 0064 0246     		mov	r2, r0
 159 0066 0B46     		mov	r3, r1
 160 0068 2046     		mov	r0, r4
 161 006a 2946     		mov	r1, r5
 162 006c FFF7FEFF 		bl	__aeabi_dadd
 163 0070 0346     		mov	r3, r0
 164 0072 0C46     		mov	r4, r1
 165 0074 1846     		mov	r0, r3
 166 0076 2146     		mov	r1, r4
 167 0078 FFF7FEFF 		bl	__aeabi_d2f
 168 007c 0346     		mov	r3, r0
 169 007e FB61     		str	r3, [r7, #28]	@ float
 152:main.c        **** 		if(wave_temp > 255.0)
 170              		.loc 1 152 0
 171 0080 8649     		ldr	r1, .L124+20
 172 0082 F869     		ldr	r0, [r7, #28]	@ float
 173 0084 FFF7FEFF 		bl	__aeabi_fcmpgt
 174 0088 0346     		mov	r3, r0
 175 008a 002B     		cmp	r3, #0
 176 008c 01D0     		beq	.L2
 153:main.c        **** 		{
 154:main.c        **** 			wave_temp = 255.0;
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 7


 177              		.loc 1 154 0
 178 008e 834B     		ldr	r3, .L124+20
 179 0090 FB61     		str	r3, [r7, #28]	@ float
 180              	.L2:
 155:main.c        **** 		}
 156:main.c        **** 		Noise_Adjusted = (uint8) wave_temp;
 181              		.loc 1 156 0
 182 0092 F869     		ldr	r0, [r7, #28]	@ float
 183 0094 FFF7FEFF 		bl	__aeabi_f2uiz
 184 0098 0346     		mov	r3, r0
 185 009a DAB2     		uxtb	r2, r3
 186 009c 804B     		ldr	r3, .L124+24
 187 009e 1A70     		strb	r2, [r3]
 157:main.c        ****                
 158:main.c        **** 		if(bCommandReady != 0)
 188              		.loc 1 158 0
 189 00a0 804B     		ldr	r3, .L124+28
 190 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 191 00a4 002B     		cmp	r3, #0
 192 00a6 01F08980 		beq	.L4
 159:main.c        **** 		{
 160:main.c        **** 			psz = strtok(szCommand, " ");
 193              		.loc 1 160 0
 194 00aa 7F49     		ldr	r1, .L124+32
 195 00ac 7F48     		ldr	r0, .L124+36
 196 00ae FFF7FEFF 		bl	strtok
 197 00b2 B861     		str	r0, [r7, #24]
 161:main.c        **** 			if(*psz == 'i')
 198              		.loc 1 161 0
 199 00b4 BB69     		ldr	r3, [r7, #24]
 200 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 201 00b8 692B     		cmp	r3, #105
 202 00ba 04D1     		bne	.L5
 162:main.c        **** 			{
 163:main.c        **** 				// it all started here.  NOTE!  \n\r THE ORDER MATTERS!
 164:main.c        **** 				PutString("*CyScope V1.44\n\r");
 203              		.loc 1 164 0
 204 00bc 7C48     		ldr	r0, .L124+40
 205 00be FFF7FEFF 		bl	PutString
 206 00c2 01F078B8 		b	.L6
 207              	.L5:
 165:main.c        **** 			}
 166:main.c        **** //DM
 167:main.c        **** 			else if(*psz == 'D')
 208              		.loc 1 167 0
 209 00c6 BB69     		ldr	r3, [r7, #24]
 210 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 211 00ca 442B     		cmp	r3, #68
 212 00cc 40F09280 		bne	.L7
 168:main.c        **** 			{
 169:main.c        **** 				// Digital I/O commands
 170:main.c        **** 				
 171:main.c        **** 				psz = strtok(0, " ");
 213              		.loc 1 171 0
 214 00d0 7549     		ldr	r1, .L124+32
 215 00d2 0020     		movs	r0, #0
 216 00d4 FFF7FEFF 		bl	strtok
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 8


 217 00d8 B861     		str	r0, [r7, #24]
 172:main.c        **** 				if(*psz == 'O')
 218              		.loc 1 172 0
 219 00da BB69     		ldr	r3, [r7, #24]
 220 00dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 221 00de 4F2B     		cmp	r3, #79
 222 00e0 11D1     		bne	.L8
 173:main.c        **** 				{
 174:main.c        **** 					// Digital output
 175:main.c        **** 					// D O N, where N is the output byte value as an ascii 8 bit number
 176:main.c        **** 					psz = strtok(0, " ");
 223              		.loc 1 176 0
 224 00e2 7149     		ldr	r1, .L124+32
 225 00e4 0020     		movs	r0, #0
 226 00e6 FFF7FEFF 		bl	strtok
 227 00ea B861     		str	r0, [r7, #24]
 177:main.c        **** 					sscanf(psz,"%hu", &avar);
 228              		.loc 1 177 0
 229 00ec 3B1D     		adds	r3, r7, #4
 230 00ee 1A46     		mov	r2, r3
 231 00f0 7049     		ldr	r1, .L124+44
 232 00f2 B869     		ldr	r0, [r7, #24]
 233 00f4 FFF7FEFF 		bl	sscanf
 178:main.c        **** 					Digital_Out_Control_Write((uint8) avar);
 234              		.loc 1 178 0
 235 00f8 BB88     		ldrh	r3, [r7, #4]
 236 00fa DBB2     		uxtb	r3, r3
 237 00fc 1846     		mov	r0, r3
 238 00fe FFF7FEFF 		bl	Digital_Out_Control_Write
 239 0102 01F058B8 		b	.L6
 240              	.L8:
 179:main.c        **** 				}
 180:main.c        **** 				//else if(*psz == 'I')
 181:main.c        **** 				//{
 182:main.c        **** 					// reads digital inputs
 183:main.c        **** 					// returns Ix where x is an 8 bit (binary) value representing the status
 184:main.c        **** 					// of the digital input pins
 185:main.c        **** 					
 186:main.c        **** 					//PutChar('I');
 187:main.c        **** 					//PutChar((uint8) Digital_Input_Status_Read());
 188:main.c        **** 				//}
 189:main.c        **** 				else if(*psz == 'A')
 241              		.loc 1 189 0
 242 0106 BB69     		ldr	r3, [r7, #24]
 243 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 244 010a 412B     		cmp	r3, #65
 245 010c 04D1     		bne	.L9
 190:main.c        **** 				{
 191:main.c        **** 					Digital_AutoUpdate = 1;
 246              		.loc 1 191 0
 247 010e 6A4B     		ldr	r3, .L124+48
 248 0110 0122     		movs	r2, #1
 249 0112 1A70     		strb	r2, [r3]
 250 0114 01F04FB8 		b	.L6
 251              	.L9:
 192:main.c        ****                     //PutChar('I');
 193:main.c        **** 					//PutChar((uint8) Digital_Input_Status_Read());
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 9


 194:main.c        **** 				}
 195:main.c        **** 				else if(*psz == 'a')
 252              		.loc 1 195 0
 253 0118 BB69     		ldr	r3, [r7, #24]
 254 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 255 011c 612B     		cmp	r3, #97
 256 011e 04D1     		bne	.L10
 196:main.c        **** 				{
 197:main.c        **** 					Digital_AutoUpdate = 0;
 257              		.loc 1 197 0
 258 0120 654B     		ldr	r3, .L124+48
 259 0122 0022     		movs	r2, #0
 260 0124 1A70     		strb	r2, [r3]
 261 0126 01F046B8 		b	.L6
 262              	.L10:
 198:main.c        **** 				}
 199:main.c        **** 				else if(*psz == 'F')
 263              		.loc 1 199 0
 264 012a BB69     		ldr	r3, [r7, #24]
 265 012c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 266 012e 462B     		cmp	r3, #70
 267 0130 27D1     		bne	.L11
 200:main.c        **** 				{
 201:main.c        **** 					// set PWM output frequency
 202:main.c        **** 			    	// D F F_HIGH F_LOW where F_HIGH and F_LOW represent a 16 bit number
 203:main.c        ****                     psz = strtok(0, " ");
 268              		.loc 1 203 0
 269 0132 5D49     		ldr	r1, .L124+32
 270 0134 0020     		movs	r0, #0
 271 0136 FFF7FEFF 		bl	strtok
 272 013a B861     		str	r0, [r7, #24]
 204:main.c        **** 					sscanf(psz,"%hu", &avar);
 273              		.loc 1 204 0
 274 013c 3B1D     		adds	r3, r7, #4
 275 013e 1A46     		mov	r2, r3
 276 0140 5C49     		ldr	r1, .L124+44
 277 0142 B869     		ldr	r0, [r7, #24]
 278 0144 FFF7FEFF 		bl	sscanf
 205:main.c        **** 					pwm_div = ((uint32) avar)*256;
 279              		.loc 1 205 0
 280 0148 BB88     		ldrh	r3, [r7, #4]
 281 014a 1B02     		lsls	r3, r3, #8
 282 014c 7B61     		str	r3, [r7, #20]
 206:main.c        **** 					
 207:main.c        **** 					psz = strtok(0, " ");
 283              		.loc 1 207 0
 284 014e 5649     		ldr	r1, .L124+32
 285 0150 0020     		movs	r0, #0
 286 0152 FFF7FEFF 		bl	strtok
 287 0156 B861     		str	r0, [r7, #24]
 208:main.c        **** 					sscanf(psz,"%hu", &avar);
 288              		.loc 1 208 0
 289 0158 3B1D     		adds	r3, r7, #4
 290 015a 1A46     		mov	r2, r3
 291 015c 5549     		ldr	r1, .L124+44
 292 015e B869     		ldr	r0, [r7, #24]
 293 0160 FFF7FEFF 		bl	sscanf
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 10


 209:main.c        **** 					pwm_div += ((uint32) avar);
 294              		.loc 1 209 0
 295 0164 BB88     		ldrh	r3, [r7, #4]
 296 0166 1A46     		mov	r2, r3
 297 0168 7B69     		ldr	r3, [r7, #20]
 298 016a 1344     		add	r3, r3, r2
 299 016c 7B61     		str	r3, [r7, #20]
 210:main.c        **** 					Dig_PWM_Clock_SetDividerValue(pwm_div);
 300              		.loc 1 210 0
 301 016e 7B69     		ldr	r3, [r7, #20]
 302 0170 9BB2     		uxth	r3, r3
 303 0172 013B     		subs	r3, r3, #1
 304 0174 9BB2     		uxth	r3, r3
 305 0176 0121     		movs	r1, #1
 306 0178 1846     		mov	r0, r3
 307 017a FFF7FEFF 		bl	Dig_PWM_Clock_SetDividerRegister
 308 017e 01F01AB8 		b	.L6
 309              	.L11:
 211:main.c        **** 				}
 212:main.c        **** 				else if(*psz == 'D')
 310              		.loc 1 212 0
 311 0182 BB69     		ldr	r3, [r7, #24]
 312 0184 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 0186 442B     		cmp	r3, #68
 314 0188 16D1     		bne	.L12
 213:main.c        **** 				{
 214:main.c        **** 					// Set PWM Duty cycle
 215:main.c        **** 					// D D N where N is an 8 bit ascii value representing the duty cycle
 216:main.c        **** 					// from 0 to 249
 217:main.c        **** 					psz = strtok(0, " ");
 315              		.loc 1 217 0
 316 018a 4749     		ldr	r1, .L124+32
 317 018c 0020     		movs	r0, #0
 318 018e FFF7FEFF 		bl	strtok
 319 0192 B861     		str	r0, [r7, #24]
 218:main.c        **** 					sscanf(psz,"%hu", &avar);
 320              		.loc 1 218 0
 321 0194 3B1D     		adds	r3, r7, #4
 322 0196 1A46     		mov	r2, r3
 323 0198 4649     		ldr	r1, .L124+44
 324 019a B869     		ldr	r0, [r7, #24]
 325 019c FFF7FEFF 		bl	sscanf
 219:main.c        **** 					// GJL: Limit upper compare value to 249 since period is 249
 220:main.c        ****                     if(avar > 249)
 326              		.loc 1 220 0
 327 01a0 BB88     		ldrh	r3, [r7, #4]
 328 01a2 F92B     		cmp	r3, #249
 329 01a4 01D9     		bls	.L13
 221:main.c        ****                     {
 222:main.c        ****                         avar = 249;
 330              		.loc 1 222 0
 331 01a6 F923     		movs	r3, #249
 332 01a8 BB80     		strh	r3, [r7, #4]	@ movhi
 333              	.L13:
 223:main.c        ****                     }
 224:main.c        **** 					Dig_PWM_WriteCompare((uint8) avar);
 334              		.loc 1 224 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 11


 335 01aa BB88     		ldrh	r3, [r7, #4]
 336 01ac DBB2     		uxtb	r3, r3
 337 01ae 1846     		mov	r0, r3
 338 01b0 FFF7FEFF 		bl	Dig_PWM_WriteCompare
 339 01b4 00F0FFBF 		b	.L6
 340              	.L12:
 225:main.c        **** 					//Dig_PWM_WriteCompare2((uint8) avar);
 226:main.c        **** 				}
 227:main.c        **** 				else if(*psz == '!')
 341              		.loc 1 227 0
 342 01b8 BB69     		ldr	r3, [r7, #24]
 343 01ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 344 01bc 212B     		cmp	r3, #33
 345 01be 40F0FA87 		bne	.L6
 228:main.c        **** 				{
 229:main.c        **** 					// interrupt line configuration.  not implemented yet
 230:main.c        **** 					// sends back a '!' character when the interrupt condition is met
 231:main.c        **** 					// D ! M where M is the mode:
 232:main.c        **** 					// M = D : Disable
 233:main.c        **** 					// M = R : Rising Edge
 234:main.c        **** 					// M = F : Falling Edge
 235:main.c        **** 					// M = H : High Level
 236:main.c        **** 					// M = L : Low Level
 237:main.c        **** 					psz = strtok(0, " ");
 346              		.loc 1 237 0
 347 01c2 3949     		ldr	r1, .L124+32
 348 01c4 0020     		movs	r0, #0
 349 01c6 FFF7FEFF 		bl	strtok
 350 01ca B861     		str	r0, [r7, #24]
 238:main.c        **** 					
 239:main.c        **** 					if(*psz == 'D')
 351              		.loc 1 239 0
 352 01cc BB69     		ldr	r3, [r7, #24]
 353 01ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 01d0 442B     		cmp	r3, #68
 355 01d2 00F0F087 		beq	.L6
 240:main.c        **** 					{
 241:main.c        **** 					}
 242:main.c        **** 					else if(*psz == 'R')
 356              		.loc 1 242 0
 357 01d6 BB69     		ldr	r3, [r7, #24]
 358 01d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 359 01da 522B     		cmp	r3, #82
 360 01dc 00F0EB87 		beq	.L6
 243:main.c        **** 					{
 244:main.c        **** 					}
 245:main.c        **** 					else if(*psz == 'F')
 361              		.loc 1 245 0
 362 01e0 BB69     		ldr	r3, [r7, #24]
 363 01e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 364 01e4 462B     		cmp	r3, #70
 365 01e6 00F0E687 		beq	.L6
 246:main.c        **** 					{
 247:main.c        **** 					}
 248:main.c        **** 					else if(*psz == 'H')
 366              		.loc 1 248 0
 367 01ea BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 12


 368 01ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 369 01ee 482B     		cmp	r3, #72
 370 01f0 00F0E1BF 		b	.L6
 371              	.L7:
 249:main.c        **** 					{
 250:main.c        **** 					}
 251:main.c        **** 					else if(*psz == 'L')
 252:main.c        **** 					{
 253:main.c        **** 					}
 254:main.c        **** 					
 255:main.c        **** 					// if trigger condition is met, send back the '!' character
 256:main.c        **** 					//PutChar('!');
 257:main.c        **** 				}
 258:main.c        **** 			}
 259:main.c        **** 			else if(*psz == 'W')
 372              		.loc 1 259 0
 373 01f4 BB69     		ldr	r3, [r7, #24]
 374 01f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 375 01f8 572B     		cmp	r3, #87
 376 01fa 40F0CD84 		bne	.L14
 260:main.c        **** 			{
 261:main.c        **** 				// waveform generator commands
 262:main.c        **** 				
 263:main.c        **** 				psz = strtok(0, " ");
 377              		.loc 1 263 0
 378 01fe 2A49     		ldr	r1, .L124+32
 379 0200 0020     		movs	r0, #0
 380 0202 FFF7FEFF 		bl	strtok
 381 0206 B861     		str	r0, [r7, #24]
 264:main.c        **** 				if(*psz == 'S') // Upper Case for AWG A
 382              		.loc 1 264 0
 383 0208 BB69     		ldr	r3, [r7, #24]
 384 020a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 385 020c 532B     		cmp	r3, #83
 386 020e 31D1     		bne	.L15
 265:main.c        **** 				{
 266:main.c        **** 					// sample data into the buffer
 267:main.c        **** 					// command is W S H_ADDR L_ADDR DATA
 268:main.c        **** 					// ADDR is the 2 8 bit bytes for address 0 - 255
 269:main.c        **** 					// DATA is the waveform amplitude 0 - 255
 270:main.c        **** 					psz = strtok(0, " ");
 387              		.loc 1 270 0
 388 0210 2549     		ldr	r1, .L124+32
 389 0212 0020     		movs	r0, #0
 390 0214 FFF7FEFF 		bl	strtok
 391 0218 B861     		str	r0, [r7, #24]
 271:main.c        **** 					sscanf(psz,"%hu", &avar);
 392              		.loc 1 271 0
 393 021a 3B1D     		adds	r3, r7, #4
 394 021c 1A46     		mov	r2, r3
 395 021e 2549     		ldr	r1, .L124+44
 396 0220 B869     		ldr	r0, [r7, #24]
 397 0222 FFF7FEFF 		bl	sscanf
 272:main.c        ****                     uaddr = ((uint32) avar)*256;
 398              		.loc 1 272 0
 399 0226 BB88     		ldrh	r3, [r7, #4]
 400 0228 1B02     		lsls	r3, r3, #8
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 13


 401 022a 3B61     		str	r3, [r7, #16]
 273:main.c        **** 					//bvar = avar;  // something is wacky with sscanf.  if I dont move the data into bvar, 
 274:main.c        ****                     // then on the next call to sscanf, even
 275:main.c        **** 					// if I use another variable, avar gets reset to zero!
 276:main.c        **** 					psz = strtok(0, " ");
 402              		.loc 1 276 0
 403 022c 1E49     		ldr	r1, .L124+32
 404 022e 0020     		movs	r0, #0
 405 0230 FFF7FEFF 		bl	strtok
 406 0234 B861     		str	r0, [r7, #24]
 277:main.c        **** 					sscanf(psz,"%hu", &avar);
 407              		.loc 1 277 0
 408 0236 3B1D     		adds	r3, r7, #4
 409 0238 1A46     		mov	r2, r3
 410 023a 1E49     		ldr	r1, .L124+44
 411 023c B869     		ldr	r0, [r7, #24]
 412 023e FFF7FEFF 		bl	sscanf
 278:main.c        ****                     uaddr = uaddr + avar;
 413              		.loc 1 278 0
 414 0242 BB88     		ldrh	r3, [r7, #4]
 415 0244 1A46     		mov	r2, r3
 416 0246 3B69     		ldr	r3, [r7, #16]
 417 0248 1344     		add	r3, r3, r2
 418 024a 3B61     		str	r3, [r7, #16]
 279:main.c        ****                     //got the address
 280:main.c        **** 					psz = strtok(0, " ");
 419              		.loc 1 280 0
 420 024c 1649     		ldr	r1, .L124+32
 421 024e 0020     		movs	r0, #0
 422 0250 FFF7FEFF 		bl	strtok
 423 0254 B861     		str	r0, [r7, #24]
 281:main.c        **** 					sscanf(psz,"%hu", &avar);
 424              		.loc 1 281 0
 425 0256 3B1D     		adds	r3, r7, #4
 426 0258 1A46     		mov	r2, r3
 427 025a 1649     		ldr	r1, .L124+44
 428 025c B869     		ldr	r0, [r7, #24]
 429 025e FFF7FEFF 		bl	sscanf
 282:main.c        **** 					// got the data
 283:main.c        **** 					// store it in the buffer
 284:main.c        **** 					WaveformA_Temp_Buffer[uaddr] = avar;
 430              		.loc 1 284 0
 431 0262 BB88     		ldrh	r3, [r7, #4]
 432 0264 D9B2     		uxtb	r1, r3
 433 0266 154A     		ldr	r2, .L124+52
 434 0268 3B69     		ldr	r3, [r7, #16]
 435 026a 1344     		add	r3, r3, r2
 436 026c 0A46     		mov	r2, r1
 437 026e 1A70     		strb	r2, [r3]
 438 0270 00F0A1BF 		b	.L6
 439              	.L15:
 285:main.c        **** 				}
 286:main.c        **** 				else if(*psz == 'P') // Upper Case for AWG A
 440              		.loc 1 286 0
 441 0274 BB69     		ldr	r3, [r7, #24]
 442 0276 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 443 0278 502B     		cmp	r3, #80
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 14


 444 027a 70D1     		bne	.L17
 287:main.c        **** 				{
 288:main.c        **** 					// program the waveform by copying it into the array that the waveform generator uses
 289:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 445              		.loc 1 289 0
 446 027c 0023     		movs	r3, #0
 447 027e BB84     		strh	r3, [r7, #36]	@ movhi
 448 0280 67E0     		b	.L18
 449              	.L125:
 450 0282 00BFAFF3 		.align	3
 450      0080
 451              	.L124:
 452 0288 00000000 		.word	0
 453 028c 00E06F40 		.word	1081073664
 454 0290 08650040 		.word	1073767688
 455 0294 00000000 		.word	wavea_gain
 456 0298 00000000 		.word	wavea_offset
 457 029c 00007F43 		.word	1132396544
 458 02a0 00000000 		.word	Noise_Adjusted
 459 02a4 00000000 		.word	bCommandReady
 460 02a8 00000000 		.word	.LC0
 461 02ac 00000000 		.word	szCommand
 462 02b0 04000000 		.word	.LC1
 463 02b4 18000000 		.word	.LC2
 464 02b8 00000000 		.word	Digital_AutoUpdate
 465 02bc 00000000 		.word	WaveformA_Temp_Buffer
 466              	.L21:
 290:main.c        **** 					{
 291:main.c        **** 						// Add offset and max checking
 292:main.c        ****                         wave_temp = (((float) WaveformA_Temp_Buffer[i]) * ((float)wavea_gain)/255.0
 467              		.loc 1 292 0
 468 02c0 BB8C     		ldrh	r3, [r7, #36]
 469 02c2 A54A     		ldr	r2, .L126+8
 470 02c4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 471 02c6 1846     		mov	r0, r3
 472 02c8 FFF7FEFF 		bl	__aeabi_ui2f
 473 02cc 0446     		mov	r4, r0
 474 02ce A34B     		ldr	r3, .L126+12
 475 02d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 476 02d2 1846     		mov	r0, r3
 477 02d4 FFF7FEFF 		bl	__aeabi_ui2f
 478 02d8 0346     		mov	r3, r0
 479 02da 1946     		mov	r1, r3
 480 02dc 2046     		mov	r0, r4
 481 02de FFF7FEFF 		bl	__aeabi_fmul
 482 02e2 0346     		mov	r3, r0
 483 02e4 1846     		mov	r0, r3
 484 02e6 FFF7FEFF 		bl	__aeabi_f2d
 485 02ea 99A3     		adr	r3, .L126
 486 02ec D3E90023 		ldrd	r2, [r3]
 487 02f0 FFF7FEFF 		bl	__aeabi_ddiv
 488 02f4 0346     		mov	r3, r0
 489 02f6 0C46     		mov	r4, r1
 490 02f8 2546     		mov	r5, r4
 491 02fa 1C46     		mov	r4, r3
 492 02fc 984B     		ldr	r3, .L126+16
 493 02fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 15


 494 0300 1846     		mov	r0, r3
 495 0302 FFF7FEFF 		bl	__aeabi_ui2f
 496 0306 0346     		mov	r3, r0
 497 0308 1846     		mov	r0, r3
 498 030a FFF7FEFF 		bl	__aeabi_f2d
 499 030e 0246     		mov	r2, r0
 500 0310 0B46     		mov	r3, r1
 501 0312 2046     		mov	r0, r4
 502 0314 2946     		mov	r1, r5
 503 0316 FFF7FEFF 		bl	__aeabi_dadd
 504 031a 0346     		mov	r3, r0
 505 031c 0C46     		mov	r4, r1
 506 031e 1846     		mov	r0, r3
 507 0320 2146     		mov	r1, r4
 508 0322 FFF7FEFF 		bl	__aeabi_d2f
 509 0326 0346     		mov	r3, r0
 510 0328 FB61     		str	r3, [r7, #28]	@ float
 293:main.c        ****                         if(wave_temp > 255.0)
 511              		.loc 1 293 0
 512 032a 8E49     		ldr	r1, .L126+20
 513 032c F869     		ldr	r0, [r7, #28]	@ float
 514 032e FFF7FEFF 		bl	__aeabi_fcmpgt
 515 0332 0346     		mov	r3, r0
 516 0334 002B     		cmp	r3, #0
 517 0336 01D0     		beq	.L19
 294:main.c        ****                         {
 295:main.c        ****                             wave_temp = 255.0;
 518              		.loc 1 295 0
 519 0338 8A4B     		ldr	r3, .L126+20
 520 033a FB61     		str	r3, [r7, #28]	@ float
 521              	.L19:
 296:main.c        ****                         }
 297:main.c        ****                         WaveformA_Buffer[i] = (uint8) wave_temp;
 522              		.loc 1 297 0 discriminator 2
 523 033c BC8C     		ldrh	r4, [r7, #36]
 524 033e F869     		ldr	r0, [r7, #28]	@ float
 525 0340 FFF7FEFF 		bl	__aeabi_f2uiz
 526 0344 0346     		mov	r3, r0
 527 0346 DAB2     		uxtb	r2, r3
 528 0348 874B     		ldr	r3, .L126+24
 529 034a 1A55     		strb	r2, [r3, r4]
 289:main.c        **** 					{
 530              		.loc 1 289 0 discriminator 2
 531 034c BB8C     		ldrh	r3, [r7, #36]
 532 034e 0133     		adds	r3, r3, #1
 533 0350 BB84     		strh	r3, [r7, #36]	@ movhi
 534              	.L18:
 289:main.c        **** 					{
 535              		.loc 1 289 0 is_stmt 0 discriminator 1
 536 0352 BB8C     		ldrh	r3, [r7, #36]
 537 0354 B3F5006F 		cmp	r3, #2048
 538 0358 B2D3     		bcc	.L21
 539 035a 00F02CBF 		b	.L6
 540              	.L17:
 298:main.c        **** 					}   
 299:main.c        **** 				}
 300:main.c        **** 				else if(*psz == 'A') // Upper Case for AWG A
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 16


 541              		.loc 1 300 0 is_stmt 1
 542 035e BB69     		ldr	r3, [r7, #24]
 543 0360 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 544 0362 412B     		cmp	r3, #65
 545 0364 60D1     		bne	.L22
 301:main.c        **** 				{
 302:main.c        **** 					// set the waveform amplitude
 303:main.c        **** 					// W A A0, where A0 is the a bit amplitude, 0 = 0%, 255 = 100%
 304:main.c        **** 					// program the waveform amplitude by copying it into the array that the waveform generator use
 305:main.c        **** 					// but scale it during the copy
 306:main.c        **** 					
 307:main.c        **** 					psz = strtok(0, " ");
 546              		.loc 1 307 0
 547 0366 8149     		ldr	r1, .L126+28
 548 0368 0020     		movs	r0, #0
 549 036a FFF7FEFF 		bl	strtok
 550 036e B861     		str	r0, [r7, #24]
 308:main.c        **** 					sscanf(psz,"%hu", &avar);
 551              		.loc 1 308 0
 552 0370 3B1D     		adds	r3, r7, #4
 553 0372 1A46     		mov	r2, r3
 554 0374 7E49     		ldr	r1, .L126+32
 555 0376 B869     		ldr	r0, [r7, #24]
 556 0378 FFF7FEFF 		bl	sscanf
 309:main.c        **** 					
 310:main.c        **** 					wavea_gain = avar;
 557              		.loc 1 310 0
 558 037c BB88     		ldrh	r3, [r7, #4]
 559 037e DAB2     		uxtb	r2, r3
 560 0380 764B     		ldr	r3, .L126+12
 561 0382 1A70     		strb	r2, [r3]
 311:main.c        **** 					
 312:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 562              		.loc 1 312 0
 563 0384 0023     		movs	r3, #0
 564 0386 BB84     		strh	r3, [r7, #36]	@ movhi
 565 0388 48E0     		b	.L23
 566              	.L26:
 313:main.c        **** 					{
 314:main.c        **** 						// Add offset and max checking
 315:main.c        ****                         wave_temp = (((float) WaveformA_Temp_Buffer[i]) * ((float)wavea_gain)/255.0
 567              		.loc 1 315 0
 568 038a BB8C     		ldrh	r3, [r7, #36]
 569 038c 724A     		ldr	r2, .L126+8
 570 038e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 571 0390 1846     		mov	r0, r3
 572 0392 FFF7FEFF 		bl	__aeabi_ui2f
 573 0396 0446     		mov	r4, r0
 574 0398 704B     		ldr	r3, .L126+12
 575 039a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 576 039c 1846     		mov	r0, r3
 577 039e FFF7FEFF 		bl	__aeabi_ui2f
 578 03a2 0346     		mov	r3, r0
 579 03a4 1946     		mov	r1, r3
 580 03a6 2046     		mov	r0, r4
 581 03a8 FFF7FEFF 		bl	__aeabi_fmul
 582 03ac 0346     		mov	r3, r0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 17


 583 03ae 1846     		mov	r0, r3
 584 03b0 FFF7FEFF 		bl	__aeabi_f2d
 585 03b4 66A3     		adr	r3, .L126
 586 03b6 D3E90023 		ldrd	r2, [r3]
 587 03ba FFF7FEFF 		bl	__aeabi_ddiv
 588 03be 0346     		mov	r3, r0
 589 03c0 0C46     		mov	r4, r1
 590 03c2 2546     		mov	r5, r4
 591 03c4 1C46     		mov	r4, r3
 592 03c6 664B     		ldr	r3, .L126+16
 593 03c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 594 03ca 1846     		mov	r0, r3
 595 03cc FFF7FEFF 		bl	__aeabi_ui2f
 596 03d0 0346     		mov	r3, r0
 597 03d2 1846     		mov	r0, r3
 598 03d4 FFF7FEFF 		bl	__aeabi_f2d
 599 03d8 0246     		mov	r2, r0
 600 03da 0B46     		mov	r3, r1
 601 03dc 2046     		mov	r0, r4
 602 03de 2946     		mov	r1, r5
 603 03e0 FFF7FEFF 		bl	__aeabi_dadd
 604 03e4 0346     		mov	r3, r0
 605 03e6 0C46     		mov	r4, r1
 606 03e8 1846     		mov	r0, r3
 607 03ea 2146     		mov	r1, r4
 608 03ec FFF7FEFF 		bl	__aeabi_d2f
 609 03f0 0346     		mov	r3, r0
 610 03f2 FB61     		str	r3, [r7, #28]	@ float
 316:main.c        ****                         if(wave_temp > 255.0)
 611              		.loc 1 316 0
 612 03f4 5B49     		ldr	r1, .L126+20
 613 03f6 F869     		ldr	r0, [r7, #28]	@ float
 614 03f8 FFF7FEFF 		bl	__aeabi_fcmpgt
 615 03fc 0346     		mov	r3, r0
 616 03fe 002B     		cmp	r3, #0
 617 0400 01D0     		beq	.L24
 317:main.c        ****                         {
 318:main.c        ****                             wave_temp = 255.0;
 618              		.loc 1 318 0
 619 0402 584B     		ldr	r3, .L126+20
 620 0404 FB61     		str	r3, [r7, #28]	@ float
 621              	.L24:
 319:main.c        ****                         }
 320:main.c        ****                         WaveformA_Buffer[i] = (uint8) wave_temp;
 622              		.loc 1 320 0 discriminator 2
 623 0406 BC8C     		ldrh	r4, [r7, #36]
 624 0408 F869     		ldr	r0, [r7, #28]	@ float
 625 040a FFF7FEFF 		bl	__aeabi_f2uiz
 626 040e 0346     		mov	r3, r0
 627 0410 DAB2     		uxtb	r2, r3
 628 0412 554B     		ldr	r3, .L126+24
 629 0414 1A55     		strb	r2, [r3, r4]
 312:main.c        **** 					{
 630              		.loc 1 312 0 discriminator 2
 631 0416 BB8C     		ldrh	r3, [r7, #36]
 632 0418 0133     		adds	r3, r3, #1
 633 041a BB84     		strh	r3, [r7, #36]	@ movhi
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 18


 634              	.L23:
 312:main.c        **** 					{
 635              		.loc 1 312 0 is_stmt 0 discriminator 1
 636 041c BB8C     		ldrh	r3, [r7, #36]
 637 041e B3F5006F 		cmp	r3, #2048
 638 0422 B2D3     		bcc	.L26
 639 0424 00F0C7BE 		b	.L6
 640              	.L22:
 321:main.c        **** 					}              
 322:main.c        ****                     
 323:main.c        **** 				}
 324:main.c        **** 				// Add offset functionality
 325:main.c        ****                 else if(*psz == 'O') // Upper Case for AWG A
 641              		.loc 1 325 0 is_stmt 1
 642 0428 BB69     		ldr	r3, [r7, #24]
 643 042a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 644 042c 4F2B     		cmp	r3, #79
 645 042e 60D1     		bne	.L27
 326:main.c        ****                 {
 327:main.c        ****                     // set waveform offset
 328:main.c        ****                     // W O O0 where O0 is the offset - 0 = 0%, 255 = 100%
 329:main.c        ****                     // program teh offset by copying it into the array that the waveform generator 
 330:main.c        ****                     // but adjust the values upwards during the copy
 331:main.c        ****                     
 332:main.c        ****                     psz = strtok(0, " ");
 646              		.loc 1 332 0
 647 0430 4E49     		ldr	r1, .L126+28
 648 0432 0020     		movs	r0, #0
 649 0434 FFF7FEFF 		bl	strtok
 650 0438 B861     		str	r0, [r7, #24]
 333:main.c        **** 					sscanf(psz,"%hu", &avar);
 651              		.loc 1 333 0
 652 043a 3B1D     		adds	r3, r7, #4
 653 043c 1A46     		mov	r2, r3
 654 043e 4C49     		ldr	r1, .L126+32
 655 0440 B869     		ldr	r0, [r7, #24]
 656 0442 FFF7FEFF 		bl	sscanf
 334:main.c        **** 					
 335:main.c        **** 					wavea_offset = avar;
 657              		.loc 1 335 0
 658 0446 BB88     		ldrh	r3, [r7, #4]
 659 0448 DAB2     		uxtb	r2, r3
 660 044a 454B     		ldr	r3, .L126+16
 661 044c 1A70     		strb	r2, [r3]
 336:main.c        **** 					
 337:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 662              		.loc 1 337 0
 663 044e 0023     		movs	r3, #0
 664 0450 BB84     		strh	r3, [r7, #36]	@ movhi
 665 0452 48E0     		b	.L28
 666              	.L31:
 338:main.c        **** 					{
 339:main.c        **** 						// Add offset
 340:main.c        ****                         wave_temp = (((float) WaveformA_Temp_Buffer[i]) * ((float)wavea_gain)/255.0
 667              		.loc 1 340 0
 668 0454 BB8C     		ldrh	r3, [r7, #36]
 669 0456 404A     		ldr	r2, .L126+8
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 19


 670 0458 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 671 045a 1846     		mov	r0, r3
 672 045c FFF7FEFF 		bl	__aeabi_ui2f
 673 0460 0446     		mov	r4, r0
 674 0462 3E4B     		ldr	r3, .L126+12
 675 0464 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 676 0466 1846     		mov	r0, r3
 677 0468 FFF7FEFF 		bl	__aeabi_ui2f
 678 046c 0346     		mov	r3, r0
 679 046e 1946     		mov	r1, r3
 680 0470 2046     		mov	r0, r4
 681 0472 FFF7FEFF 		bl	__aeabi_fmul
 682 0476 0346     		mov	r3, r0
 683 0478 1846     		mov	r0, r3
 684 047a FFF7FEFF 		bl	__aeabi_f2d
 685 047e 34A3     		adr	r3, .L126
 686 0480 D3E90023 		ldrd	r2, [r3]
 687 0484 FFF7FEFF 		bl	__aeabi_ddiv
 688 0488 0346     		mov	r3, r0
 689 048a 0C46     		mov	r4, r1
 690 048c 2546     		mov	r5, r4
 691 048e 1C46     		mov	r4, r3
 692 0490 334B     		ldr	r3, .L126+16
 693 0492 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 694 0494 1846     		mov	r0, r3
 695 0496 FFF7FEFF 		bl	__aeabi_ui2f
 696 049a 0346     		mov	r3, r0
 697 049c 1846     		mov	r0, r3
 698 049e FFF7FEFF 		bl	__aeabi_f2d
 699 04a2 0246     		mov	r2, r0
 700 04a4 0B46     		mov	r3, r1
 701 04a6 2046     		mov	r0, r4
 702 04a8 2946     		mov	r1, r5
 703 04aa FFF7FEFF 		bl	__aeabi_dadd
 704 04ae 0346     		mov	r3, r0
 705 04b0 0C46     		mov	r4, r1
 706 04b2 1846     		mov	r0, r3
 707 04b4 2146     		mov	r1, r4
 708 04b6 FFF7FEFF 		bl	__aeabi_d2f
 709 04ba 0346     		mov	r3, r0
 710 04bc FB61     		str	r3, [r7, #28]	@ float
 341:main.c        ****                         if(wave_temp > 255.0)
 711              		.loc 1 341 0
 712 04be 2949     		ldr	r1, .L126+20
 713 04c0 F869     		ldr	r0, [r7, #28]	@ float
 714 04c2 FFF7FEFF 		bl	__aeabi_fcmpgt
 715 04c6 0346     		mov	r3, r0
 716 04c8 002B     		cmp	r3, #0
 717 04ca 01D0     		beq	.L29
 342:main.c        ****                         {
 343:main.c        ****                             wave_temp = 255.0;
 718              		.loc 1 343 0
 719 04cc 254B     		ldr	r3, .L126+20
 720 04ce FB61     		str	r3, [r7, #28]	@ float
 721              	.L29:
 344:main.c        ****                         }
 345:main.c        ****                         WaveformA_Buffer[i] = (uint8) wave_temp;
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 20


 722              		.loc 1 345 0 discriminator 2
 723 04d0 BC8C     		ldrh	r4, [r7, #36]
 724 04d2 F869     		ldr	r0, [r7, #28]	@ float
 725 04d4 FFF7FEFF 		bl	__aeabi_f2uiz
 726 04d8 0346     		mov	r3, r0
 727 04da DAB2     		uxtb	r2, r3
 728 04dc 224B     		ldr	r3, .L126+24
 729 04de 1A55     		strb	r2, [r3, r4]
 337:main.c        **** 					{
 730              		.loc 1 337 0 discriminator 2
 731 04e0 BB8C     		ldrh	r3, [r7, #36]
 732 04e2 0133     		adds	r3, r3, #1
 733 04e4 BB84     		strh	r3, [r7, #36]	@ movhi
 734              	.L28:
 337:main.c        **** 					{
 735              		.loc 1 337 0 is_stmt 0 discriminator 1
 736 04e6 BB8C     		ldrh	r3, [r7, #36]
 737 04e8 B3F5006F 		cmp	r3, #2048
 738 04ec B2D3     		bcc	.L31
 739 04ee 00F062BE 		b	.L6
 740              	.L27:
 346:main.c        **** 					}              
 347:main.c        ****                 }
 348:main.c        ****                 else if(*psz == 'W') // Upper Case for AWG A
 741              		.loc 1 348 0 is_stmt 1
 742 04f2 BB69     		ldr	r3, [r7, #24]
 743 04f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 744 04f6 572B     		cmp	r3, #87
 745 04f8 10D1     		bne	.L32
 349:main.c        **** 				{
 350:main.c        **** 					// select the waveform output
 351:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEA_SELECT_MASK);
 746              		.loc 1 351 0
 747 04fa FFF7FEFF 		bl	Wave_Control_Read
 748 04fe 0346     		mov	r3, r0
 749 0500 23F00103 		bic	r3, r3, #1
 750 0504 DBB2     		uxtb	r3, r3
 751 0506 1846     		mov	r0, r3
 752 0508 FFF7FEFF 		bl	Wave_Control_Write
 352:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 753              		.loc 1 352 0
 754 050c FFF7FEFF 		bl	Wave_Control_Read
 755 0510 0346     		mov	r3, r0
 756 0512 1846     		mov	r0, r3
 757 0514 FFF7FEFF 		bl	Wave_Control_Write
 758 0518 00F04DBE 		b	.L6
 759              	.L32:
 353:main.c        **** 				}
 354:main.c        **** 				else if(*psz == 'N') // Upper Case for AWG A
 760              		.loc 1 354 0
 761 051c BB69     		ldr	r3, [r7, #24]
 762 051e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 763 0520 4E2B     		cmp	r3, #78
 764 0522 27D1     		bne	.L33
 355:main.c        **** 				{
 356:main.c        **** 					// select the noise output
 357:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEA_SELECT_MASK);
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 21


 765              		.loc 1 357 0
 766 0524 FFF7FEFF 		bl	Wave_Control_Read
 767 0528 0346     		mov	r3, r0
 768 052a 23F00103 		bic	r3, r3, #1
 769 052e DBB2     		uxtb	r3, r3
 770 0530 1846     		mov	r0, r3
 771 0532 FFF7FEFF 		bl	Wave_Control_Write
 358:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVEA_SELECT_NOISE);
 772              		.loc 1 358 0
 773 0536 FFF7FEFF 		bl	Wave_Control_Read
 774 053a 0346     		mov	r3, r0
 775 053c 43F00103 		orr	r3, r3, #1
 776 0540 DBB2     		uxtb	r3, r3
 777 0542 1846     		mov	r0, r3
 778 0544 FFF7FEFF 		bl	Wave_Control_Write
 779 0548 00F035BE 		b	.L6
 780              	.L127:
 781 054c AFF30080 		.align	3
 782              	.L126:
 783 0550 00000000 		.word	0
 784 0554 00E06F40 		.word	1081073664
 785 0558 00000000 		.word	WaveformA_Temp_Buffer
 786 055c 00000000 		.word	wavea_gain
 787 0560 00000000 		.word	wavea_offset
 788 0564 00007F43 		.word	1132396544
 789 0568 00000000 		.word	WaveformA_Buffer
 790 056c 00000000 		.word	.LC0
 791 0570 18000000 		.word	.LC2
 792              	.L33:
 359:main.c        **** 				}
 360:main.c        **** 				else if(*psz == 'F') // Upper Case for AWG A
 793              		.loc 1 360 0
 794 0574 BB69     		ldr	r3, [r7, #24]
 795 0576 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 796 0578 462B     		cmp	r3, #70
 797 057a 7BD1     		bne	.L34
 361:main.c        **** 				{
 362:main.c        **** 					// set the frequency output of the waveform generator
 363:main.c        **** 					// best thing to have here is an actual DDS in the hardware
 364:main.c        **** 					// but to get this working, I'm just going to fake it by setting
 365:main.c        **** 					// the clock divider.  It wont work for everything, but it should be
 366:main.c        **** 					// passable.  The command is W F F3 F2 F1 F0 where Fn are 8 bit ascii
 367:main.c        **** 					// numbers that are combined into a 32 bit phase accumulator value
 368:main.c        **** 					// phase value = desired output frequency / 0.09313225746 Hz
 369:main.c        **** 					
 370:main.c        **** 					psz = strtok(0, " ");
 798              		.loc 1 370 0
 799 057c B049     		ldr	r1, .L128+16
 800 057e 0020     		movs	r0, #0
 801 0580 FFF7FEFF 		bl	strtok
 802 0584 B861     		str	r0, [r7, #24]
 371:main.c        **** 					sscanf(psz,"%hu", &avar);
 803              		.loc 1 371 0
 804 0586 3B1D     		adds	r3, r7, #4
 805 0588 1A46     		mov	r2, r3
 806 058a AE49     		ldr	r1, .L128+20
 807 058c B869     		ldr	r0, [r7, #24]
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 22


 808 058e FFF7FEFF 		bl	sscanf
 372:main.c        **** 					phase_int = ((uint32) avar)*16777216;
 809              		.loc 1 372 0
 810 0592 BB88     		ldrh	r3, [r7, #4]
 811 0594 1B06     		lsls	r3, r3, #24
 812 0596 3B62     		str	r3, [r7, #32]
 373:main.c        **** 					
 374:main.c        **** 					psz = strtok(0, " ");
 813              		.loc 1 374 0
 814 0598 A949     		ldr	r1, .L128+16
 815 059a 0020     		movs	r0, #0
 816 059c FFF7FEFF 		bl	strtok
 817 05a0 B861     		str	r0, [r7, #24]
 375:main.c        **** 					sscanf(psz,"%hu", &avar);
 818              		.loc 1 375 0
 819 05a2 3B1D     		adds	r3, r7, #4
 820 05a4 1A46     		mov	r2, r3
 821 05a6 A749     		ldr	r1, .L128+20
 822 05a8 B869     		ldr	r0, [r7, #24]
 823 05aa FFF7FEFF 		bl	sscanf
 376:main.c        **** 					phase_int += ((uint32) avar)*65536;
 824              		.loc 1 376 0
 825 05ae BB88     		ldrh	r3, [r7, #4]
 826 05b0 1B04     		lsls	r3, r3, #16
 827 05b2 3A6A     		ldr	r2, [r7, #32]
 828 05b4 1344     		add	r3, r3, r2
 829 05b6 3B62     		str	r3, [r7, #32]
 377:main.c        **** 					
 378:main.c        **** 					psz = strtok(0, " ");
 830              		.loc 1 378 0
 831 05b8 A149     		ldr	r1, .L128+16
 832 05ba 0020     		movs	r0, #0
 833 05bc FFF7FEFF 		bl	strtok
 834 05c0 B861     		str	r0, [r7, #24]
 379:main.c        **** 					sscanf(psz,"%hu", &avar);
 835              		.loc 1 379 0
 836 05c2 3B1D     		adds	r3, r7, #4
 837 05c4 1A46     		mov	r2, r3
 838 05c6 9F49     		ldr	r1, .L128+20
 839 05c8 B869     		ldr	r0, [r7, #24]
 840 05ca FFF7FEFF 		bl	sscanf
 380:main.c        **** 					phase_int += ((uint32) avar)*256;
 841              		.loc 1 380 0
 842 05ce BB88     		ldrh	r3, [r7, #4]
 843 05d0 1B02     		lsls	r3, r3, #8
 844 05d2 3A6A     		ldr	r2, [r7, #32]
 845 05d4 1344     		add	r3, r3, r2
 846 05d6 3B62     		str	r3, [r7, #32]
 381:main.c        **** 					
 382:main.c        **** 					psz = strtok(0, " ");
 847              		.loc 1 382 0
 848 05d8 9949     		ldr	r1, .L128+16
 849 05da 0020     		movs	r0, #0
 850 05dc FFF7FEFF 		bl	strtok
 851 05e0 B861     		str	r0, [r7, #24]
 383:main.c        **** 					sscanf(psz,"%hu", &avar);
 852              		.loc 1 383 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 23


 853 05e2 3B1D     		adds	r3, r7, #4
 854 05e4 1A46     		mov	r2, r3
 855 05e6 9749     		ldr	r1, .L128+20
 856 05e8 B869     		ldr	r0, [r7, #24]
 857 05ea FFF7FEFF 		bl	sscanf
 384:main.c        **** 					phase_int += ((uint32) avar);
 858              		.loc 1 384 0
 859 05ee BB88     		ldrh	r3, [r7, #4]
 860 05f0 1A46     		mov	r2, r3
 861 05f2 3B6A     		ldr	r3, [r7, #32]
 862 05f4 1344     		add	r3, r3, r2
 863 05f6 3B62     		str	r3, [r7, #32]
 385:main.c        **** 					
 386:main.c        **** 					freq = ((float) phase_int)*.09313225746;
 864              		.loc 1 386 0
 865 05f8 386A     		ldr	r0, [r7, #32]
 866 05fa FFF7FEFF 		bl	__aeabi_ui2f
 867 05fe 0346     		mov	r3, r0
 868 0600 1846     		mov	r0, r3
 869 0602 FFF7FEFF 		bl	__aeabi_f2d
 870 0606 8AA3     		adr	r3, .L128
 871 0608 D3E90023 		ldrd	r2, [r3]
 872 060c FFF7FEFF 		bl	__aeabi_dmul
 873 0610 0346     		mov	r3, r0
 874 0612 0C46     		mov	r4, r1
 875 0614 1846     		mov	r0, r3
 876 0616 2146     		mov	r1, r4
 877 0618 FFF7FEFF 		bl	__aeabi_d2f
 878 061c 0346     		mov	r3, r0
 879 061e FB60     		str	r3, [r7, #12]	@ float
 387:main.c        **** 					
 388:main.c        **** 					// calculate the clock divider
 389:main.c        **** 					phase_int = (int32) (36000000.0/((float) WAVEFORM_BUFFER_SIZE))/freq;
 880              		.loc 1 389 0
 881 0620 F968     		ldr	r1, [r7, #12]	@ float
 882 0622 8948     		ldr	r0, .L128+24
 883 0624 FFF7FEFF 		bl	__aeabi_fdiv
 884 0628 0346     		mov	r3, r0
 885 062a 1846     		mov	r0, r3
 886 062c FFF7FEFF 		bl	__aeabi_f2uiz
 887 0630 0346     		mov	r3, r0
 888 0632 3B62     		str	r3, [r7, #32]
 390:main.c        **** 					
 391:main.c        **** 					if(phase_int >= 65535)
 889              		.loc 1 391 0
 890 0634 3B6A     		ldr	r3, [r7, #32]
 891 0636 4FF6FE72 		movw	r2, #65534
 892 063a 9342     		cmp	r3, r2
 893 063c 03D9     		bls	.L35
 392:main.c        **** 					{
 393:main.c        **** 						phase_int = 65535;
 894              		.loc 1 393 0
 895 063e 4FF6FF73 		movw	r3, #65535
 896 0642 3B62     		str	r3, [r7, #32]
 897 0644 04E0     		b	.L36
 898              	.L35:
 394:main.c        **** 					}
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 24


 395:main.c        **** 					else if(phase_int <= 15) // anything less than this and the DMA doesn't have time to execute
 899              		.loc 1 395 0
 900 0646 3B6A     		ldr	r3, [r7, #32]
 901 0648 0F2B     		cmp	r3, #15
 902 064a 01D8     		bhi	.L36
 396:main.c        **** 					{
 397:main.c        **** 						phase_int = 15;
 903              		.loc 1 397 0
 904 064c 0F23     		movs	r3, #15
 905 064e 3B62     		str	r3, [r7, #32]
 906              	.L36:
 398:main.c        **** 					}
 399:main.c        **** 					
 400:main.c        **** 					WaveA_Clock_SetDividerValue((uint16) phase_int);
 907              		.loc 1 400 0
 908 0650 3B6A     		ldr	r3, [r7, #32]
 909 0652 9BB2     		uxth	r3, r3
 910 0654 013B     		subs	r3, r3, #1
 911 0656 9BB2     		uxth	r3, r3
 912 0658 0121     		movs	r1, #1
 913 065a 1846     		mov	r0, r3
 914 065c FFF7FEFF 		bl	WaveA_Clock_SetDividerRegister
 401:main.c        ****                     NoiseA_Clock_SetDividerValue((uint16) phase_int);
 915              		.loc 1 401 0
 916 0660 3B6A     		ldr	r3, [r7, #32]
 917 0662 9BB2     		uxth	r3, r3
 918 0664 013B     		subs	r3, r3, #1
 919 0666 9BB2     		uxth	r3, r3
 920 0668 0121     		movs	r1, #1
 921 066a 1846     		mov	r0, r3
 922 066c FFF7FEFF 		bl	NoiseA_Clock_SetDividerRegister
 923 0670 00F0A1BD 		b	.L6
 924              	.L34:
 402:main.c        **** 					
 403:main.c        **** 				}
 404:main.c        ****                 else if(*psz == 'L') // Set AWG Buffer Length Upper Case for AWG A
 925              		.loc 1 404 0
 926 0674 BB69     		ldr	r3, [r7, #24]
 927 0676 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 928 0678 4C2B     		cmp	r3, #76
 929 067a 23D1     		bne	.L37
 405:main.c        ****                 {
 406:main.c        ****                     psz = strtok(0, " ");
 930              		.loc 1 406 0
 931 067c 7049     		ldr	r1, .L128+16
 932 067e 0020     		movs	r0, #0
 933 0680 FFF7FEFF 		bl	strtok
 934 0684 B861     		str	r0, [r7, #24]
 407:main.c        **** 					sscanf(psz,"%hu", &avar); // Upper Byte
 935              		.loc 1 407 0
 936 0686 3B1D     		adds	r3, r7, #4
 937 0688 1A46     		mov	r2, r3
 938 068a 6E49     		ldr	r1, .L128+20
 939 068c B869     		ldr	r0, [r7, #24]
 940 068e FFF7FEFF 		bl	sscanf
 408:main.c        ****                     ulen = ((uint32) avar)*256;
 941              		.loc 1 408 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 25


 942 0692 BB88     		ldrh	r3, [r7, #4]
 943 0694 1B02     		lsls	r3, r3, #8
 944 0696 7B81     		strh	r3, [r7, #10]	@ movhi
 409:main.c        **** 					//
 410:main.c        **** 					psz = strtok(0, " ");
 945              		.loc 1 410 0
 946 0698 6949     		ldr	r1, .L128+16
 947 069a 0020     		movs	r0, #0
 948 069c FFF7FEFF 		bl	strtok
 949 06a0 B861     		str	r0, [r7, #24]
 411:main.c        **** 					sscanf(psz,"%hu", &avar); // Lower Byte
 950              		.loc 1 411 0
 951 06a2 3B1D     		adds	r3, r7, #4
 952 06a4 1A46     		mov	r2, r3
 953 06a6 6749     		ldr	r1, .L128+20
 954 06a8 B869     		ldr	r0, [r7, #24]
 955 06aa FFF7FEFF 		bl	sscanf
 412:main.c        ****                     ulen = ulen + avar;
 956              		.loc 1 412 0
 957 06ae BA88     		ldrh	r2, [r7, #4]
 958 06b0 7B89     		ldrh	r3, [r7, #10]	@ movhi
 959 06b2 1344     		add	r3, r3, r2
 960 06b4 7B81     		strh	r3, [r7, #10]	@ movhi
 413:main.c        ****                     //got the Length
 414:main.c        ****                     WaveA_DAC_Wave1Setup(&WaveformA_Buffer[0], ulen);
 961              		.loc 1 414 0
 962 06b6 7B89     		ldrh	r3, [r7, #10]
 963 06b8 1946     		mov	r1, r3
 964 06ba 6448     		ldr	r0, .L128+28
 965 06bc FFF7FEFF 		bl	WaveA_DAC_Wave1Setup
 966 06c0 00F079BD 		b	.L6
 967              	.L37:
 415:main.c        ****                 }
 416:main.c        ****                 else if(*psz == 'l') // Set AWG Buffer Length Lower Case for AWG B
 968              		.loc 1 416 0
 969 06c4 BB69     		ldr	r3, [r7, #24]
 970 06c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 971 06c8 6C2B     		cmp	r3, #108
 972 06ca 23D1     		bne	.L38
 417:main.c        ****                 {
 418:main.c        ****                     psz = strtok(0, " ");
 973              		.loc 1 418 0
 974 06cc 5C49     		ldr	r1, .L128+16
 975 06ce 0020     		movs	r0, #0
 976 06d0 FFF7FEFF 		bl	strtok
 977 06d4 B861     		str	r0, [r7, #24]
 419:main.c        **** 					sscanf(psz,"%hu", &avar); // Upper Byte
 978              		.loc 1 419 0
 979 06d6 3B1D     		adds	r3, r7, #4
 980 06d8 1A46     		mov	r2, r3
 981 06da 5A49     		ldr	r1, .L128+20
 982 06dc B869     		ldr	r0, [r7, #24]
 983 06de FFF7FEFF 		bl	sscanf
 420:main.c        ****                     ulen = ((uint32) avar)*256;
 984              		.loc 1 420 0
 985 06e2 BB88     		ldrh	r3, [r7, #4]
 986 06e4 1B02     		lsls	r3, r3, #8
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 26


 987 06e6 7B81     		strh	r3, [r7, #10]	@ movhi
 421:main.c        **** 					//
 422:main.c        **** 					psz = strtok(0, " ");
 988              		.loc 1 422 0
 989 06e8 5549     		ldr	r1, .L128+16
 990 06ea 0020     		movs	r0, #0
 991 06ec FFF7FEFF 		bl	strtok
 992 06f0 B861     		str	r0, [r7, #24]
 423:main.c        **** 					sscanf(psz,"%hu", &avar); // Lower Byte
 993              		.loc 1 423 0
 994 06f2 3B1D     		adds	r3, r7, #4
 995 06f4 1A46     		mov	r2, r3
 996 06f6 5349     		ldr	r1, .L128+20
 997 06f8 B869     		ldr	r0, [r7, #24]
 998 06fa FFF7FEFF 		bl	sscanf
 424:main.c        ****                     ulen = ulen + avar;
 999              		.loc 1 424 0
 1000 06fe BA88     		ldrh	r2, [r7, #4]
 1001 0700 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1002 0702 1344     		add	r3, r3, r2
 1003 0704 7B81     		strh	r3, [r7, #10]	@ movhi
 425:main.c        ****                     //got the Length
 426:main.c        ****                     WaveB_DAC_Wave1Setup(&WaveformB_Buffer[0], ulen);
 1004              		.loc 1 426 0
 1005 0706 7B89     		ldrh	r3, [r7, #10]
 1006 0708 1946     		mov	r1, r3
 1007 070a 5148     		ldr	r0, .L128+32
 1008 070c FFF7FEFF 		bl	WaveB_DAC_Wave1Setup
 1009 0710 00F051BD 		b	.L6
 1010              	.L38:
 427:main.c        ****                 }
 428:main.c        **** 				else if(*psz == 's') // Lower Case for AWG B
 1011              		.loc 1 428 0
 1012 0714 BB69     		ldr	r3, [r7, #24]
 1013 0716 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1014 0718 732B     		cmp	r3, #115
 1015 071a 31D1     		bne	.L39
 429:main.c        **** 				{
 430:main.c        **** 					// sample data into the buffer
 431:main.c        **** 					// command is W s H_ADDR L_ADDR DATA
 432:main.c        **** 					// ADDR is the 16 bits
 433:main.c        **** 					// DATA is the waveform amplitude 0 - 255
 434:main.c        **** 					psz = strtok(0, " ");
 1016              		.loc 1 434 0
 1017 071c 4849     		ldr	r1, .L128+16
 1018 071e 0020     		movs	r0, #0
 1019 0720 FFF7FEFF 		bl	strtok
 1020 0724 B861     		str	r0, [r7, #24]
 435:main.c        **** 					sscanf(psz,"%hu", &avar);
 1021              		.loc 1 435 0
 1022 0726 3B1D     		adds	r3, r7, #4
 1023 0728 1A46     		mov	r2, r3
 1024 072a 4649     		ldr	r1, .L128+20
 1025 072c B869     		ldr	r0, [r7, #24]
 1026 072e FFF7FEFF 		bl	sscanf
 436:main.c        ****                     uaddr = ((uint32) avar)*256;
 1027              		.loc 1 436 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 27


 1028 0732 BB88     		ldrh	r3, [r7, #4]
 1029 0734 1B02     		lsls	r3, r3, #8
 1030 0736 3B61     		str	r3, [r7, #16]
 437:main.c        **** 					//bvar = avar;  // something is wacky with sscanf.  if I dont move the data into bvar, then on
 438:main.c        **** 					// if I use another variable, avar gets reset to zero!
 439:main.c        **** 					psz = strtok(0, " ");
 1031              		.loc 1 439 0
 1032 0738 4149     		ldr	r1, .L128+16
 1033 073a 0020     		movs	r0, #0
 1034 073c FFF7FEFF 		bl	strtok
 1035 0740 B861     		str	r0, [r7, #24]
 440:main.c        **** 					sscanf(psz,"%hu", &avar);
 1036              		.loc 1 440 0
 1037 0742 3B1D     		adds	r3, r7, #4
 1038 0744 1A46     		mov	r2, r3
 1039 0746 3F49     		ldr	r1, .L128+20
 1040 0748 B869     		ldr	r0, [r7, #24]
 1041 074a FFF7FEFF 		bl	sscanf
 441:main.c        ****                     uaddr = uaddr + avar;
 1042              		.loc 1 441 0
 1043 074e BB88     		ldrh	r3, [r7, #4]
 1044 0750 1A46     		mov	r2, r3
 1045 0752 3B69     		ldr	r3, [r7, #16]
 1046 0754 1344     		add	r3, r3, r2
 1047 0756 3B61     		str	r3, [r7, #16]
 442:main.c        ****                     // got the address
 443:main.c        **** 					psz = strtok(0, " ");
 1048              		.loc 1 443 0
 1049 0758 3949     		ldr	r1, .L128+16
 1050 075a 0020     		movs	r0, #0
 1051 075c FFF7FEFF 		bl	strtok
 1052 0760 B861     		str	r0, [r7, #24]
 444:main.c        **** 					sscanf(psz,"%hu", &avar);
 1053              		.loc 1 444 0
 1054 0762 3B1D     		adds	r3, r7, #4
 1055 0764 1A46     		mov	r2, r3
 1056 0766 3749     		ldr	r1, .L128+20
 1057 0768 B869     		ldr	r0, [r7, #24]
 1058 076a FFF7FEFF 		bl	sscanf
 445:main.c        **** 					// got the data
 446:main.c        **** 					// store it in the buffer
 447:main.c        **** 					WaveformB_Temp_Buffer[uaddr] = avar;
 1059              		.loc 1 447 0
 1060 076e BB88     		ldrh	r3, [r7, #4]
 1061 0770 D9B2     		uxtb	r1, r3
 1062 0772 384A     		ldr	r2, .L128+36
 1063 0774 3B69     		ldr	r3, [r7, #16]
 1064 0776 1344     		add	r3, r3, r2
 1065 0778 0A46     		mov	r2, r1
 1066 077a 1A70     		strb	r2, [r3]
 1067 077c 00F01BBD 		b	.L6
 1068              	.L39:
 448:main.c        **** 				}
 449:main.c        **** 				else if(*psz == 'p') // Lower Case for AWG B
 1069              		.loc 1 449 0
 1070 0780 BB69     		ldr	r3, [r7, #24]
 1071 0782 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 28


 1072 0784 702B     		cmp	r3, #112
 1073 0786 6DD1     		bne	.L40
 450:main.c        **** 				{
 451:main.c        **** 					// program the waveform by copying it into the array that the waveform generator uses
 452:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 1074              		.loc 1 452 0
 1075 0788 0023     		movs	r3, #0
 1076 078a BB84     		strh	r3, [r7, #36]	@ movhi
 1077 078c 48E0     		b	.L41
 1078              	.L44:
 453:main.c        **** 					{
 454:main.c        **** 						// Add offset and max checking
 455:main.c        ****                         wave_temp = (((float) WaveformB_Temp_Buffer[i]) * ((float)waveb_gain)/255.0
 1079              		.loc 1 455 0
 1080 078e BB8C     		ldrh	r3, [r7, #36]
 1081 0790 304A     		ldr	r2, .L128+36
 1082 0792 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1083 0794 1846     		mov	r0, r3
 1084 0796 FFF7FEFF 		bl	__aeabi_ui2f
 1085 079a 0446     		mov	r4, r0
 1086 079c 2E4B     		ldr	r3, .L128+40
 1087 079e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1088 07a0 1846     		mov	r0, r3
 1089 07a2 FFF7FEFF 		bl	__aeabi_ui2f
 1090 07a6 0346     		mov	r3, r0
 1091 07a8 1946     		mov	r1, r3
 1092 07aa 2046     		mov	r0, r4
 1093 07ac FFF7FEFF 		bl	__aeabi_fmul
 1094 07b0 0346     		mov	r3, r0
 1095 07b2 1846     		mov	r0, r3
 1096 07b4 FFF7FEFF 		bl	__aeabi_f2d
 1097 07b8 1FA3     		adr	r3, .L128+8
 1098 07ba D3E90023 		ldrd	r2, [r3]
 1099 07be FFF7FEFF 		bl	__aeabi_ddiv
 1100 07c2 0346     		mov	r3, r0
 1101 07c4 0C46     		mov	r4, r1
 1102 07c6 2546     		mov	r5, r4
 1103 07c8 1C46     		mov	r4, r3
 1104 07ca 244B     		ldr	r3, .L128+44
 1105 07cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1106 07ce 1846     		mov	r0, r3
 1107 07d0 FFF7FEFF 		bl	__aeabi_ui2f
 1108 07d4 0346     		mov	r3, r0
 1109 07d6 1846     		mov	r0, r3
 1110 07d8 FFF7FEFF 		bl	__aeabi_f2d
 1111 07dc 0246     		mov	r2, r0
 1112 07de 0B46     		mov	r3, r1
 1113 07e0 2046     		mov	r0, r4
 1114 07e2 2946     		mov	r1, r5
 1115 07e4 FFF7FEFF 		bl	__aeabi_dadd
 1116 07e8 0346     		mov	r3, r0
 1117 07ea 0C46     		mov	r4, r1
 1118 07ec 1846     		mov	r0, r3
 1119 07ee 2146     		mov	r1, r4
 1120 07f0 FFF7FEFF 		bl	__aeabi_d2f
 1121 07f4 0346     		mov	r3, r0
 1122 07f6 FB61     		str	r3, [r7, #28]	@ float
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 29


 456:main.c        ****                         if(wave_temp > 255.0)
 1123              		.loc 1 456 0
 1124 07f8 1949     		ldr	r1, .L128+48
 1125 07fa F869     		ldr	r0, [r7, #28]	@ float
 1126 07fc FFF7FEFF 		bl	__aeabi_fcmpgt
 1127 0800 0346     		mov	r3, r0
 1128 0802 002B     		cmp	r3, #0
 1129 0804 01D0     		beq	.L42
 457:main.c        ****                         {
 458:main.c        ****                             wave_temp = 255.0;
 1130              		.loc 1 458 0
 1131 0806 164B     		ldr	r3, .L128+48
 1132 0808 FB61     		str	r3, [r7, #28]	@ float
 1133              	.L42:
 459:main.c        ****                         }
 460:main.c        ****                         WaveformB_Buffer[i] = (uint8) wave_temp;
 1134              		.loc 1 460 0 discriminator 2
 1135 080a BC8C     		ldrh	r4, [r7, #36]
 1136 080c F869     		ldr	r0, [r7, #28]	@ float
 1137 080e FFF7FEFF 		bl	__aeabi_f2uiz
 1138 0812 0346     		mov	r3, r0
 1139 0814 DAB2     		uxtb	r2, r3
 1140 0816 0E4B     		ldr	r3, .L128+32
 1141 0818 1A55     		strb	r2, [r3, r4]
 452:main.c        **** 					{
 1142              		.loc 1 452 0 discriminator 2
 1143 081a BB8C     		ldrh	r3, [r7, #36]
 1144 081c 0133     		adds	r3, r3, #1
 1145 081e BB84     		strh	r3, [r7, #36]	@ movhi
 1146              	.L41:
 452:main.c        **** 					{
 1147              		.loc 1 452 0 is_stmt 0 discriminator 1
 1148 0820 BB8C     		ldrh	r3, [r7, #36]
 1149 0822 B3F5006F 		cmp	r3, #2048
 1150 0826 B2D3     		bcc	.L44
 1151 0828 00F0C5BC 		b	.L6
 1152              	.L129:
 1153 082c AFF30080 		.align	3
 1154              	.L128:
 1155 0830 524CFEFF 		.word	-111534
 1156 0834 83D7B73F 		.word	1069012867
 1157 0838 00000000 		.word	0
 1158 083c 00E06F40 		.word	1081073664
 1159 0840 00000000 		.word	.LC0
 1160 0844 18000000 		.word	.LC2
 1161 0848 00548946 		.word	1183405056
 1162 084c 00000000 		.word	WaveformA_Buffer
 1163 0850 00000000 		.word	WaveformB_Buffer
 1164 0854 00000000 		.word	WaveformB_Temp_Buffer
 1165 0858 00000000 		.word	waveb_gain
 1166 085c 00000000 		.word	waveb_offset
 1167 0860 00007F43 		.word	1132396544
 1168              	.L40:
 461:main.c        **** 					}   
 462:main.c        **** 				}
 463:main.c        **** 				else if(*psz == 'a') // Lower Case for AWG B
 1169              		.loc 1 463 0 is_stmt 1
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 30


 1170 0864 BB69     		ldr	r3, [r7, #24]
 1171 0866 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1172 0868 612B     		cmp	r3, #97
 1173 086a 60D1     		bne	.L45
 464:main.c        **** 				{
 465:main.c        **** 					// set the waveform amplitude
 466:main.c        **** 					// W a A0, where A0 is the a bit amplitude, 0 = 0%, 255 = 100%
 467:main.c        **** 					// program the waveform amplitude by copying it into the array that the waveform generator use
 468:main.c        **** 					// but scale it during the copy
 469:main.c        **** 					
 470:main.c        **** 					psz = strtok(0, " ");
 1174              		.loc 1 470 0
 1175 086c B049     		ldr	r1, .L130+16
 1176 086e 0020     		movs	r0, #0
 1177 0870 FFF7FEFF 		bl	strtok
 1178 0874 B861     		str	r0, [r7, #24]
 471:main.c        **** 					sscanf(psz,"%hu", &avar);
 1179              		.loc 1 471 0
 1180 0876 3B1D     		adds	r3, r7, #4
 1181 0878 1A46     		mov	r2, r3
 1182 087a AE49     		ldr	r1, .L130+20
 1183 087c B869     		ldr	r0, [r7, #24]
 1184 087e FFF7FEFF 		bl	sscanf
 472:main.c        **** 					
 473:main.c        **** 					waveb_gain = avar;
 1185              		.loc 1 473 0
 1186 0882 BB88     		ldrh	r3, [r7, #4]
 1187 0884 DAB2     		uxtb	r2, r3
 1188 0886 AC4B     		ldr	r3, .L130+24
 1189 0888 1A70     		strb	r2, [r3]
 474:main.c        **** 					
 475:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 1190              		.loc 1 475 0
 1191 088a 0023     		movs	r3, #0
 1192 088c BB84     		strh	r3, [r7, #36]	@ movhi
 1193 088e 48E0     		b	.L46
 1194              	.L49:
 476:main.c        **** 					{
 477:main.c        **** 						// Add offset and max checking
 478:main.c        ****                         wave_temp = (((float) WaveformB_Temp_Buffer[i]) * ((float)waveb_gain)/255.0
 1195              		.loc 1 478 0
 1196 0890 BB8C     		ldrh	r3, [r7, #36]
 1197 0892 AA4A     		ldr	r2, .L130+28
 1198 0894 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1199 0896 1846     		mov	r0, r3
 1200 0898 FFF7FEFF 		bl	__aeabi_ui2f
 1201 089c 0446     		mov	r4, r0
 1202 089e A64B     		ldr	r3, .L130+24
 1203 08a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1204 08a2 1846     		mov	r0, r3
 1205 08a4 FFF7FEFF 		bl	__aeabi_ui2f
 1206 08a8 0346     		mov	r3, r0
 1207 08aa 1946     		mov	r1, r3
 1208 08ac 2046     		mov	r0, r4
 1209 08ae FFF7FEFF 		bl	__aeabi_fmul
 1210 08b2 0346     		mov	r3, r0
 1211 08b4 1846     		mov	r0, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 31


 1212 08b6 FFF7FEFF 		bl	__aeabi_f2d
 1213 08ba 99A3     		adr	r3, .L130
 1214 08bc D3E90023 		ldrd	r2, [r3]
 1215 08c0 FFF7FEFF 		bl	__aeabi_ddiv
 1216 08c4 0346     		mov	r3, r0
 1217 08c6 0C46     		mov	r4, r1
 1218 08c8 2546     		mov	r5, r4
 1219 08ca 1C46     		mov	r4, r3
 1220 08cc 9C4B     		ldr	r3, .L130+32
 1221 08ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1222 08d0 1846     		mov	r0, r3
 1223 08d2 FFF7FEFF 		bl	__aeabi_ui2f
 1224 08d6 0346     		mov	r3, r0
 1225 08d8 1846     		mov	r0, r3
 1226 08da FFF7FEFF 		bl	__aeabi_f2d
 1227 08de 0246     		mov	r2, r0
 1228 08e0 0B46     		mov	r3, r1
 1229 08e2 2046     		mov	r0, r4
 1230 08e4 2946     		mov	r1, r5
 1231 08e6 FFF7FEFF 		bl	__aeabi_dadd
 1232 08ea 0346     		mov	r3, r0
 1233 08ec 0C46     		mov	r4, r1
 1234 08ee 1846     		mov	r0, r3
 1235 08f0 2146     		mov	r1, r4
 1236 08f2 FFF7FEFF 		bl	__aeabi_d2f
 1237 08f6 0346     		mov	r3, r0
 1238 08f8 FB61     		str	r3, [r7, #28]	@ float
 479:main.c        ****                         if(wave_temp > 255.0)
 1239              		.loc 1 479 0
 1240 08fa 9249     		ldr	r1, .L130+36
 1241 08fc F869     		ldr	r0, [r7, #28]	@ float
 1242 08fe FFF7FEFF 		bl	__aeabi_fcmpgt
 1243 0902 0346     		mov	r3, r0
 1244 0904 002B     		cmp	r3, #0
 1245 0906 01D0     		beq	.L47
 480:main.c        ****                         {
 481:main.c        ****                             wave_temp = 255.0;
 1246              		.loc 1 481 0
 1247 0908 8E4B     		ldr	r3, .L130+36
 1248 090a FB61     		str	r3, [r7, #28]	@ float
 1249              	.L47:
 482:main.c        ****                         }
 483:main.c        ****                         WaveformB_Buffer[i] = (uint8) wave_temp;
 1250              		.loc 1 483 0 discriminator 2
 1251 090c BC8C     		ldrh	r4, [r7, #36]
 1252 090e F869     		ldr	r0, [r7, #28]	@ float
 1253 0910 FFF7FEFF 		bl	__aeabi_f2uiz
 1254 0914 0346     		mov	r3, r0
 1255 0916 DAB2     		uxtb	r2, r3
 1256 0918 8B4B     		ldr	r3, .L130+40
 1257 091a 1A55     		strb	r2, [r3, r4]
 475:main.c        **** 					{
 1258              		.loc 1 475 0 discriminator 2
 1259 091c BB8C     		ldrh	r3, [r7, #36]
 1260 091e 0133     		adds	r3, r3, #1
 1261 0920 BB84     		strh	r3, [r7, #36]	@ movhi
 1262              	.L46:
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 32


 475:main.c        **** 					{
 1263              		.loc 1 475 0 is_stmt 0 discriminator 1
 1264 0922 BB8C     		ldrh	r3, [r7, #36]
 1265 0924 B3F5006F 		cmp	r3, #2048
 1266 0928 B2D3     		bcc	.L49
 1267 092a 00F044BC 		b	.L6
 1268              	.L45:
 484:main.c        **** 					}              
 485:main.c        ****                     
 486:main.c        **** 				}
 487:main.c        **** 				// Add offset functionality
 488:main.c        ****                 else if(*psz == 'o') // Lower Case for AWG B
 1269              		.loc 1 488 0 is_stmt 1
 1270 092e BB69     		ldr	r3, [r7, #24]
 1271 0930 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1272 0932 6F2B     		cmp	r3, #111
 1273 0934 5FD1     		bne	.L50
 489:main.c        ****                 {
 490:main.c        ****                     // set waveform offset
 491:main.c        ****                     // W o O0 where O0 is the offset - 0 = 0%, 255 = 100%
 492:main.c        ****                     // program teh offset by copying it into the array that the waveform generator 
 493:main.c        ****                     // but adjust the values upwards during the copy
 494:main.c        ****                     
 495:main.c        ****                     psz = strtok(0, " ");
 1274              		.loc 1 495 0
 1275 0936 7E49     		ldr	r1, .L130+16
 1276 0938 0020     		movs	r0, #0
 1277 093a FFF7FEFF 		bl	strtok
 1278 093e B861     		str	r0, [r7, #24]
 496:main.c        **** 					sscanf(psz,"%hu", &avar);
 1279              		.loc 1 496 0
 1280 0940 3B1D     		adds	r3, r7, #4
 1281 0942 1A46     		mov	r2, r3
 1282 0944 7B49     		ldr	r1, .L130+20
 1283 0946 B869     		ldr	r0, [r7, #24]
 1284 0948 FFF7FEFF 		bl	sscanf
 497:main.c        **** 					
 498:main.c        **** 					waveb_offset = avar;
 1285              		.loc 1 498 0
 1286 094c BB88     		ldrh	r3, [r7, #4]
 1287 094e DAB2     		uxtb	r2, r3
 1288 0950 7B4B     		ldr	r3, .L130+32
 1289 0952 1A70     		strb	r2, [r3]
 499:main.c        **** 					
 500:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 1290              		.loc 1 500 0
 1291 0954 0023     		movs	r3, #0
 1292 0956 BB84     		strh	r3, [r7, #36]	@ movhi
 1293 0958 48E0     		b	.L51
 1294              	.L54:
 501:main.c        **** 					{
 502:main.c        **** 						// GJL temp - add offset
 503:main.c        ****                         wave_temp = (((float) WaveformB_Temp_Buffer[i]) * ((float)waveb_gain)/255.0
 1295              		.loc 1 503 0
 1296 095a BB8C     		ldrh	r3, [r7, #36]
 1297 095c 774A     		ldr	r2, .L130+28
 1298 095e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 33


 1299 0960 1846     		mov	r0, r3
 1300 0962 FFF7FEFF 		bl	__aeabi_ui2f
 1301 0966 0446     		mov	r4, r0
 1302 0968 734B     		ldr	r3, .L130+24
 1303 096a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1304 096c 1846     		mov	r0, r3
 1305 096e FFF7FEFF 		bl	__aeabi_ui2f
 1306 0972 0346     		mov	r3, r0
 1307 0974 1946     		mov	r1, r3
 1308 0976 2046     		mov	r0, r4
 1309 0978 FFF7FEFF 		bl	__aeabi_fmul
 1310 097c 0346     		mov	r3, r0
 1311 097e 1846     		mov	r0, r3
 1312 0980 FFF7FEFF 		bl	__aeabi_f2d
 1313 0984 66A3     		adr	r3, .L130
 1314 0986 D3E90023 		ldrd	r2, [r3]
 1315 098a FFF7FEFF 		bl	__aeabi_ddiv
 1316 098e 0346     		mov	r3, r0
 1317 0990 0C46     		mov	r4, r1
 1318 0992 2546     		mov	r5, r4
 1319 0994 1C46     		mov	r4, r3
 1320 0996 6A4B     		ldr	r3, .L130+32
 1321 0998 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1322 099a 1846     		mov	r0, r3
 1323 099c FFF7FEFF 		bl	__aeabi_ui2f
 1324 09a0 0346     		mov	r3, r0
 1325 09a2 1846     		mov	r0, r3
 1326 09a4 FFF7FEFF 		bl	__aeabi_f2d
 1327 09a8 0246     		mov	r2, r0
 1328 09aa 0B46     		mov	r3, r1
 1329 09ac 2046     		mov	r0, r4
 1330 09ae 2946     		mov	r1, r5
 1331 09b0 FFF7FEFF 		bl	__aeabi_dadd
 1332 09b4 0346     		mov	r3, r0
 1333 09b6 0C46     		mov	r4, r1
 1334 09b8 1846     		mov	r0, r3
 1335 09ba 2146     		mov	r1, r4
 1336 09bc FFF7FEFF 		bl	__aeabi_d2f
 1337 09c0 0346     		mov	r3, r0
 1338 09c2 FB61     		str	r3, [r7, #28]	@ float
 504:main.c        ****                         if(wave_temp > 255.0)
 1339              		.loc 1 504 0
 1340 09c4 5F49     		ldr	r1, .L130+36
 1341 09c6 F869     		ldr	r0, [r7, #28]	@ float
 1342 09c8 FFF7FEFF 		bl	__aeabi_fcmpgt
 1343 09cc 0346     		mov	r3, r0
 1344 09ce 002B     		cmp	r3, #0
 1345 09d0 01D0     		beq	.L52
 505:main.c        ****                         {
 506:main.c        ****                             wave_temp = 255.0;
 1346              		.loc 1 506 0
 1347 09d2 5C4B     		ldr	r3, .L130+36
 1348 09d4 FB61     		str	r3, [r7, #28]	@ float
 1349              	.L52:
 507:main.c        ****                         }
 508:main.c        ****                         WaveformB_Buffer[i] = (uint8) wave_temp;
 1350              		.loc 1 508 0 discriminator 2
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 34


 1351 09d6 BC8C     		ldrh	r4, [r7, #36]
 1352 09d8 F869     		ldr	r0, [r7, #28]	@ float
 1353 09da FFF7FEFF 		bl	__aeabi_f2uiz
 1354 09de 0346     		mov	r3, r0
 1355 09e0 DAB2     		uxtb	r2, r3
 1356 09e2 594B     		ldr	r3, .L130+40
 1357 09e4 1A55     		strb	r2, [r3, r4]
 500:main.c        **** 					{
 1358              		.loc 1 500 0 discriminator 2
 1359 09e6 BB8C     		ldrh	r3, [r7, #36]
 1360 09e8 0133     		adds	r3, r3, #1
 1361 09ea BB84     		strh	r3, [r7, #36]	@ movhi
 1362              	.L51:
 500:main.c        **** 					{
 1363              		.loc 1 500 0 is_stmt 0 discriminator 1
 1364 09ec BB8C     		ldrh	r3, [r7, #36]
 1365 09ee B3F5006F 		cmp	r3, #2048
 1366 09f2 B2D3     		bcc	.L54
 1367 09f4 DFE3     		b	.L6
 1368              	.L50:
 509:main.c        **** 					}              
 510:main.c        ****                 }
 511:main.c        ****                 else if(*psz == 'w') // Lower Case for AWG B
 1369              		.loc 1 511 0 is_stmt 1
 1370 09f6 BB69     		ldr	r3, [r7, #24]
 1371 09f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1372 09fa 772B     		cmp	r3, #119
 1373 09fc 0FD1     		bne	.L55
 512:main.c        **** 				{
 513:main.c        **** 					// select the waveform output
 514:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEB_SELECT_MASK);
 1374              		.loc 1 514 0
 1375 09fe FFF7FEFF 		bl	Wave_Control_Read
 1376 0a02 0346     		mov	r3, r0
 1377 0a04 23F00403 		bic	r3, r3, #4
 1378 0a08 DBB2     		uxtb	r3, r3
 1379 0a0a 1846     		mov	r0, r3
 1380 0a0c FFF7FEFF 		bl	Wave_Control_Write
 515:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 1381              		.loc 1 515 0
 1382 0a10 FFF7FEFF 		bl	Wave_Control_Read
 1383 0a14 0346     		mov	r3, r0
 1384 0a16 1846     		mov	r0, r3
 1385 0a18 FFF7FEFF 		bl	Wave_Control_Write
 1386 0a1c CBE3     		b	.L6
 1387              	.L55:
 516:main.c        **** 				}
 517:main.c        **** 				else if(*psz == 'n') // Lower Case for AWG B
 1388              		.loc 1 517 0
 1389 0a1e BB69     		ldr	r3, [r7, #24]
 1390 0a20 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1391 0a22 6E2B     		cmp	r3, #110
 1392 0a24 12D1     		bne	.L56
 518:main.c        **** 				{
 519:main.c        **** 					// select the noise output
 520:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEB_SELECT_MASK);
 1393              		.loc 1 520 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 35


 1394 0a26 FFF7FEFF 		bl	Wave_Control_Read
 1395 0a2a 0346     		mov	r3, r0
 1396 0a2c 23F00403 		bic	r3, r3, #4
 1397 0a30 DBB2     		uxtb	r3, r3
 1398 0a32 1846     		mov	r0, r3
 1399 0a34 FFF7FEFF 		bl	Wave_Control_Write
 521:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVEB_SELECT_NOISE);
 1400              		.loc 1 521 0
 1401 0a38 FFF7FEFF 		bl	Wave_Control_Read
 1402 0a3c 0346     		mov	r3, r0
 1403 0a3e 43F00403 		orr	r3, r3, #4
 1404 0a42 DBB2     		uxtb	r3, r3
 1405 0a44 1846     		mov	r0, r3
 1406 0a46 FFF7FEFF 		bl	Wave_Control_Write
 1407 0a4a B4E3     		b	.L6
 1408              	.L56:
 522:main.c        **** 				}
 523:main.c        **** 				else if(*psz == 'f') // Lower Case for AWG B
 1409              		.loc 1 523 0
 1410 0a4c BB69     		ldr	r3, [r7, #24]
 1411 0a4e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1412 0a50 662B     		cmp	r3, #102
 1413 0a52 40F08B80 		bne	.L57
 524:main.c        **** 				{
 525:main.c        **** 					// set the frequency output of the waveform generator
 526:main.c        **** 					// best thing to have here is an actual DDS in the hardware
 527:main.c        **** 					// but to get this working, I'm just going to fake it by setting
 528:main.c        **** 					// the clock divider.  It wont work for everything, but it should be
 529:main.c        **** 					// passable.  The command is W f F3 F2 F1 F0 where Fn are 8 bit ascii
 530:main.c        **** 					// numbers that are combined into a 32 bit phase accumulator value
 531:main.c        **** 					// phase value = desired output frequency / 0.09313225746 Hz
 532:main.c        **** 					
 533:main.c        **** 					psz = strtok(0, " ");
 1414              		.loc 1 533 0
 1415 0a56 3649     		ldr	r1, .L130+16
 1416 0a58 0020     		movs	r0, #0
 1417 0a5a FFF7FEFF 		bl	strtok
 1418 0a5e B861     		str	r0, [r7, #24]
 534:main.c        **** 					sscanf(psz,"%hu", &avar);
 1419              		.loc 1 534 0
 1420 0a60 3B1D     		adds	r3, r7, #4
 1421 0a62 1A46     		mov	r2, r3
 1422 0a64 3349     		ldr	r1, .L130+20
 1423 0a66 B869     		ldr	r0, [r7, #24]
 1424 0a68 FFF7FEFF 		bl	sscanf
 535:main.c        **** 					phase_int = ((uint32) avar)*16777216;
 1425              		.loc 1 535 0
 1426 0a6c BB88     		ldrh	r3, [r7, #4]
 1427 0a6e 1B06     		lsls	r3, r3, #24
 1428 0a70 3B62     		str	r3, [r7, #32]
 536:main.c        **** 					
 537:main.c        **** 					psz = strtok(0, " ");
 1429              		.loc 1 537 0
 1430 0a72 2F49     		ldr	r1, .L130+16
 1431 0a74 0020     		movs	r0, #0
 1432 0a76 FFF7FEFF 		bl	strtok
 1433 0a7a B861     		str	r0, [r7, #24]
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 36


 538:main.c        **** 					sscanf(psz,"%hu", &avar);
 1434              		.loc 1 538 0
 1435 0a7c 3B1D     		adds	r3, r7, #4
 1436 0a7e 1A46     		mov	r2, r3
 1437 0a80 2C49     		ldr	r1, .L130+20
 1438 0a82 B869     		ldr	r0, [r7, #24]
 1439 0a84 FFF7FEFF 		bl	sscanf
 539:main.c        **** 					phase_int += ((uint32) avar)*65536;
 1440              		.loc 1 539 0
 1441 0a88 BB88     		ldrh	r3, [r7, #4]
 1442 0a8a 1B04     		lsls	r3, r3, #16
 1443 0a8c 3A6A     		ldr	r2, [r7, #32]
 1444 0a8e 1344     		add	r3, r3, r2
 1445 0a90 3B62     		str	r3, [r7, #32]
 540:main.c        **** 					
 541:main.c        **** 					psz = strtok(0, " ");
 1446              		.loc 1 541 0
 1447 0a92 2749     		ldr	r1, .L130+16
 1448 0a94 0020     		movs	r0, #0
 1449 0a96 FFF7FEFF 		bl	strtok
 1450 0a9a B861     		str	r0, [r7, #24]
 542:main.c        **** 					sscanf(psz,"%hu", &avar);
 1451              		.loc 1 542 0
 1452 0a9c 3B1D     		adds	r3, r7, #4
 1453 0a9e 1A46     		mov	r2, r3
 1454 0aa0 2449     		ldr	r1, .L130+20
 1455 0aa2 B869     		ldr	r0, [r7, #24]
 1456 0aa4 FFF7FEFF 		bl	sscanf
 543:main.c        **** 					phase_int += ((uint32) avar)*256;
 1457              		.loc 1 543 0
 1458 0aa8 BB88     		ldrh	r3, [r7, #4]
 1459 0aaa 1B02     		lsls	r3, r3, #8
 1460 0aac 3A6A     		ldr	r2, [r7, #32]
 1461 0aae 1344     		add	r3, r3, r2
 1462 0ab0 3B62     		str	r3, [r7, #32]
 544:main.c        **** 					
 545:main.c        **** 					psz = strtok(0, " ");
 1463              		.loc 1 545 0
 1464 0ab2 1F49     		ldr	r1, .L130+16
 1465 0ab4 0020     		movs	r0, #0
 1466 0ab6 FFF7FEFF 		bl	strtok
 1467 0aba B861     		str	r0, [r7, #24]
 546:main.c        **** 					sscanf(psz,"%hu", &avar);
 1468              		.loc 1 546 0
 1469 0abc 3B1D     		adds	r3, r7, #4
 1470 0abe 1A46     		mov	r2, r3
 1471 0ac0 1C49     		ldr	r1, .L130+20
 1472 0ac2 B869     		ldr	r0, [r7, #24]
 1473 0ac4 FFF7FEFF 		bl	sscanf
 547:main.c        **** 					phase_int += ((uint32) avar);
 1474              		.loc 1 547 0
 1475 0ac8 BB88     		ldrh	r3, [r7, #4]
 1476 0aca 1A46     		mov	r2, r3
 1477 0acc 3B6A     		ldr	r3, [r7, #32]
 1478 0ace 1344     		add	r3, r3, r2
 1479 0ad0 3B62     		str	r3, [r7, #32]
 548:main.c        **** 					
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 37


 549:main.c        **** 					freq = ((float) phase_int)*.09313225746;
 1480              		.loc 1 549 0
 1481 0ad2 386A     		ldr	r0, [r7, #32]
 1482 0ad4 FFF7FEFF 		bl	__aeabi_ui2f
 1483 0ad8 0346     		mov	r3, r0
 1484 0ada 1846     		mov	r0, r3
 1485 0adc FFF7FEFF 		bl	__aeabi_f2d
 1486 0ae0 11A3     		adr	r3, .L130+8
 1487 0ae2 D3E90023 		ldrd	r2, [r3]
 1488 0ae6 FFF7FEFF 		bl	__aeabi_dmul
 1489 0aea 0346     		mov	r3, r0
 1490 0aec 0C46     		mov	r4, r1
 1491 0aee 1846     		mov	r0, r3
 1492 0af0 2146     		mov	r1, r4
 1493 0af2 FFF7FEFF 		bl	__aeabi_d2f
 1494 0af6 0346     		mov	r3, r0
 1495 0af8 FB60     		str	r3, [r7, #12]	@ float
 550:main.c        **** 					
 551:main.c        **** 					// calculate the clock divider
 552:main.c        **** 					phase_int = (int32) (36000000.0/((float) WAVEFORM_BUFFER_SIZE))/freq;
 1496              		.loc 1 552 0
 1497 0afa F968     		ldr	r1, [r7, #12]	@ float
 1498 0afc 1348     		ldr	r0, .L130+44
 1499 0afe FFF7FEFF 		bl	__aeabi_fdiv
 1500 0b02 0346     		mov	r3, r0
 1501 0b04 1846     		mov	r0, r3
 1502 0b06 FFF7FEFF 		bl	__aeabi_f2uiz
 1503 0b0a 0346     		mov	r3, r0
 1504 0b0c 3B62     		str	r3, [r7, #32]
 553:main.c        **** 					
 554:main.c        **** 					if(phase_int >= 65535)
 1505              		.loc 1 554 0
 1506 0b0e 3B6A     		ldr	r3, [r7, #32]
 1507 0b10 4FF6FE72 		movw	r2, #65534
 1508 0b14 9342     		cmp	r3, r2
 1509 0b16 1BD9     		bls	.L58
 555:main.c        **** 					{
 556:main.c        **** 						phase_int = 65535;
 1510              		.loc 1 556 0
 1511 0b18 4FF6FF73 		movw	r3, #65535
 1512 0b1c 3B62     		str	r3, [r7, #32]
 1513 0b1e 1CE0     		b	.L59
 1514              	.L131:
 1515              		.align	3
 1516              	.L130:
 1517 0b20 00000000 		.word	0
 1518 0b24 00E06F40 		.word	1081073664
 1519 0b28 524CFEFF 		.word	-111534
 1520 0b2c 83D7B73F 		.word	1069012867
 1521 0b30 00000000 		.word	.LC0
 1522 0b34 18000000 		.word	.LC2
 1523 0b38 00000000 		.word	waveb_gain
 1524 0b3c 00000000 		.word	WaveformB_Temp_Buffer
 1525 0b40 00000000 		.word	waveb_offset
 1526 0b44 00007F43 		.word	1132396544
 1527 0b48 00000000 		.word	WaveformB_Buffer
 1528 0b4c 00548946 		.word	1183405056
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 38


 1529              	.L58:
 557:main.c        **** 					}
 558:main.c        **** 					else if(phase_int <= 15) // anything less than this and the DMA doesn't have time to execute
 1530              		.loc 1 558 0
 1531 0b50 3B6A     		ldr	r3, [r7, #32]
 1532 0b52 0F2B     		cmp	r3, #15
 1533 0b54 01D8     		bhi	.L59
 559:main.c        **** 					{
 560:main.c        **** 						phase_int = 15;
 1534              		.loc 1 560 0
 1535 0b56 0F23     		movs	r3, #15
 1536 0b58 3B62     		str	r3, [r7, #32]
 1537              	.L59:
 561:main.c        **** 					}
 562:main.c        **** 					
 563:main.c        **** 					WaveB_Clock_SetDividerValue((uint16) phase_int);
 1538              		.loc 1 563 0
 1539 0b5a 3B6A     		ldr	r3, [r7, #32]
 1540 0b5c 9BB2     		uxth	r3, r3
 1541 0b5e 013B     		subs	r3, r3, #1
 1542 0b60 9BB2     		uxth	r3, r3
 1543 0b62 0121     		movs	r1, #1
 1544 0b64 1846     		mov	r0, r3
 1545 0b66 FFF7FEFF 		bl	WaveB_Clock_SetDividerRegister
 1546 0b6a 24E3     		b	.L6
 1547              	.L57:
 564:main.c        ****                     // NoiseB_Clock_SetDividerValue((uint16) phase_int);
 565:main.c        **** 					
 566:main.c        **** 				}
 567:main.c        ****                 else if(*psz == 'X')
 1548              		.loc 1 567 0
 1549 0b6c BB69     		ldr	r3, [r7, #24]
 1550 0b6e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1551 0b70 582B     		cmp	r3, #88
 1552 0b72 40F02083 		bne	.L6
 568:main.c        **** 				{
 569:main.c        **** 					// set the Aux DAC level
 570:main.c        **** 					// Data comes back as a single byte representing the value to write to the DAC
 571:main.c        **** 					// W X VAL
 572:main.c        ****                     // Grab the byte value from the USB and write it to the DAC
 573:main.c        **** 					psz = strtok(0, " ");
 1553              		.loc 1 573 0
 1554 0b76 BE49     		ldr	r1, .L132
 1555 0b78 0020     		movs	r0, #0
 1556 0b7a FFF7FEFF 		bl	strtok
 1557 0b7e B861     		str	r0, [r7, #24]
 574:main.c        **** 					sscanf(psz,"%hu", &avar);
 1558              		.loc 1 574 0
 1559 0b80 3B1D     		adds	r3, r7, #4
 1560 0b82 1A46     		mov	r2, r3
 1561 0b84 BB49     		ldr	r1, .L132+4
 1562 0b86 B869     		ldr	r0, [r7, #24]
 1563 0b88 FFF7FEFF 		bl	sscanf
 575:main.c        **** 					AuxDAC_1_SetValue((uint8) avar);
 1564              		.loc 1 575 0
 1565 0b8c BB88     		ldrh	r3, [r7, #4]
 1566 0b8e DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 39


 1567 0b90 1846     		mov	r0, r3
 1568 0b92 FFF7FEFF 		bl	AuxDAC_1_SetValue
 1569 0b96 0EE3     		b	.L6
 1570              	.L14:
 576:main.c        **** 				}
 577:main.c        **** 			}
 578:main.c        **** 			else if(*psz == 'S')
 1571              		.loc 1 578 0
 1572 0b98 BB69     		ldr	r3, [r7, #24]
 1573 0b9a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1574 0b9c 532B     		cmp	r3, #83
 1575 0b9e 40F00783 		bne	.L60
 579:main.c        **** 			{
 580:main.c        **** 				// scope commands
 581:main.c        **** 				
 582:main.c        **** 				psz = strtok(0, " ");
 1576              		.loc 1 582 0
 1577 0ba2 B349     		ldr	r1, .L132
 1578 0ba4 0020     		movs	r0, #0
 1579 0ba6 FFF7FEFF 		bl	strtok
 1580 0baa B861     		str	r0, [r7, #24]
 583:main.c        **** 				if(*psz == 'O')
 1581              		.loc 1 583 0
 1582 0bac BB69     		ldr	r3, [r7, #24]
 1583 0bae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1584 0bb0 4F2B     		cmp	r3, #79
 1585 0bb2 0FD1     		bne	.L61
 584:main.c        **** 				{
 585:main.c        **** 					// read offset from EEPROM command
 586:main.c        **** 					PutChar('O');
 1586              		.loc 1 586 0
 1587 0bb4 4F20     		movs	r0, #79
 1588 0bb6 FFF7FEFF 		bl	PutChar
 587:main.c        **** 					PutChar(128); // A
 1589              		.loc 1 587 0
 1590 0bba 8020     		movs	r0, #128
 1591 0bbc FFF7FEFF 		bl	PutChar
 588:main.c        **** 					PutChar(128); // a
 1592              		.loc 1 588 0
 1593 0bc0 8020     		movs	r0, #128
 1594 0bc2 FFF7FEFF 		bl	PutChar
 589:main.c        **** 					PutChar(128); // B
 1595              		.loc 1 589 0
 1596 0bc6 8020     		movs	r0, #128
 1597 0bc8 FFF7FEFF 		bl	PutChar
 590:main.c        **** 					PutChar(128); // b
 1598              		.loc 1 590 0
 1599 0bcc 8020     		movs	r0, #128
 1600 0bce FFF7FEFF 		bl	PutChar
 1601 0bd2 F0E2     		b	.L6
 1602              	.L61:
 591:main.c        **** 					
 592:main.c        **** 				}
 593:main.c        **** 				else if(*psz == 'T')
 1603              		.loc 1 593 0
 1604 0bd4 BB69     		ldr	r3, [r7, #24]
 1605 0bd6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 40


 1606 0bd8 542B     		cmp	r3, #84
 1607 0bda 10D1     		bne	.L63
 594:main.c        **** 				{
 595:main.c        **** 					// set the trigger level
 596:main.c        **** 					// Data comes back as a single byte representing the value to write to the DAC
 597:main.c        **** 					// S T VAL
 598:main.c        ****                     // Grab the trigger byte value from the USB and write it to the DAC
 599:main.c        **** 					psz = strtok(0, " ");
 1608              		.loc 1 599 0
 1609 0bdc A449     		ldr	r1, .L132
 1610 0bde 0020     		movs	r0, #0
 1611 0be0 FFF7FEFF 		bl	strtok
 1612 0be4 B861     		str	r0, [r7, #24]
 600:main.c        **** 					sscanf(psz,"%hu", &avar);
 1613              		.loc 1 600 0
 1614 0be6 3B1D     		adds	r3, r7, #4
 1615 0be8 1A46     		mov	r2, r3
 1616 0bea A249     		ldr	r1, .L132+4
 1617 0bec B869     		ldr	r0, [r7, #24]
 1618 0bee FFF7FEFF 		bl	sscanf
 601:main.c        **** 					Vtrigger_SetValue((uint8) avar);
 1619              		.loc 1 601 0
 1620 0bf2 BB88     		ldrh	r3, [r7, #4]
 1621 0bf4 DBB2     		uxtb	r3, r3
 1622 0bf6 1846     		mov	r0, r3
 1623 0bf8 FFF7FEFF 		bl	Vtrigger_SetValue
 1624 0bfc DBE2     		b	.L6
 1625              	.L63:
 602:main.c        **** 				}
 603:main.c        **** 				else if(*psz == 'C')
 1626              		.loc 1 603 0
 1627 0bfe BB69     		ldr	r3, [r7, #24]
 1628 0c00 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1629 0c02 432B     		cmp	r3, #67
 1630 0c04 33D1     		bne	.L64
 604:main.c        **** 				{
 605:main.c        **** 					// Post trigger buffer size
 606:main.c        **** 					// data comes back as two ascii strings, each representing an 8 bit value
 607:main.c        **** 					// S C C_HIGH C_LOW where C_HIGH and C_LOW represent a 10 bit number
 608:main.c        **** 					psz = strtok(0, " ");
 1631              		.loc 1 608 0
 1632 0c06 9A49     		ldr	r1, .L132
 1633 0c08 0020     		movs	r0, #0
 1634 0c0a FFF7FEFF 		bl	strtok
 1635 0c0e B861     		str	r0, [r7, #24]
 609:main.c        **** 					sscanf(psz,"%hu", &avar);
 1636              		.loc 1 609 0
 1637 0c10 3B1D     		adds	r3, r7, #4
 1638 0c12 1A46     		mov	r2, r3
 1639 0c14 9749     		ldr	r1, .L132+4
 1640 0c16 B869     		ldr	r0, [r7, #24]
 1641 0c18 FFF7FEFF 		bl	sscanf
 610:main.c        **** 					bvar = avar*256;
 1642              		.loc 1 610 0
 1643 0c1c BB88     		ldrh	r3, [r7, #4]
 1644 0c1e 1B02     		lsls	r3, r3, #8
 1645 0c20 FB84     		strh	r3, [r7, #38]	@ movhi
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 41


 611:main.c        **** 					
 612:main.c        **** 					psz = strtok(0, " ");
 1646              		.loc 1 612 0
 1647 0c22 9349     		ldr	r1, .L132
 1648 0c24 0020     		movs	r0, #0
 1649 0c26 FFF7FEFF 		bl	strtok
 1650 0c2a B861     		str	r0, [r7, #24]
 613:main.c        **** 					sscanf(psz,"%hu", &avar);
 1651              		.loc 1 613 0
 1652 0c2c 3B1D     		adds	r3, r7, #4
 1653 0c2e 1A46     		mov	r2, r3
 1654 0c30 9049     		ldr	r1, .L132+4
 1655 0c32 B869     		ldr	r0, [r7, #24]
 1656 0c34 FFF7FEFF 		bl	sscanf
 614:main.c        **** 					bvar += avar;
 1657              		.loc 1 614 0
 1658 0c38 BA88     		ldrh	r2, [r7, #4]
 1659 0c3a FB8C     		ldrh	r3, [r7, #38]	@ movhi
 1660 0c3c 1344     		add	r3, r3, r2
 1661 0c3e FB84     		strh	r3, [r7, #38]	@ movhi
 615:main.c        **** 					
 616:main.c        **** 					if(bvar >= (BUFFER_SIZE-1))
 1662              		.loc 1 616 0
 1663 0c40 FB8C     		ldrh	r3, [r7, #38]
 1664 0c42 40F2FE32 		movw	r2, #1022
 1665 0c46 9342     		cmp	r3, r2
 1666 0c48 03D9     		bls	.L65
 617:main.c        **** 					{
 618:main.c        **** 						bvar = (BUFFER_SIZE-1);  // maximum post trigger buffer size
 1667              		.loc 1 618 0
 1668 0c4a 40F2FF33 		movw	r3, #1023
 1669 0c4e FB84     		strh	r3, [r7, #38]	@ movhi
 1670 0c50 04E0     		b	.L66
 1671              	.L65:
 619:main.c        **** 					}
 620:main.c        **** 					else if(bvar <= 2)
 1672              		.loc 1 620 0
 1673 0c52 FB8C     		ldrh	r3, [r7, #38]
 1674 0c54 022B     		cmp	r3, #2
 1675 0c56 01D8     		bhi	.L66
 621:main.c        **** 					{
 622:main.c        **** 						bvar = 2; // minimum post trigger buffer size
 1676              		.loc 1 622 0
 1677 0c58 0223     		movs	r3, #2
 1678 0c5a FB84     		strh	r3, [r7, #38]	@ movhi
 1679              	.L66:
 623:main.c        **** 					}
 624:main.c        **** 					
 625:main.c        **** 					// update the period to match the trigger buffer size post trigger capture
 626:main.c        **** 					PWM_Sample_Buffer_WritePeriod(bvar); // post trigger buffer
 1680              		.loc 1 626 0
 1681 0c5c FB8C     		ldrh	r3, [r7, #38]
 1682 0c5e 1846     		mov	r0, r3
 1683 0c60 FFF7FEFF 		bl	PWM_Sample_Buffer_WritePeriod
 627:main.c        **** 					// after setting the period, need to set the count to the proper value as well
 628:main.c        **** 					PWM_Sample_Buffer_WriteCounter(bvar); // post trigger buffer					
 1684              		.loc 1 628 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 42


 1685 0c64 FB8C     		ldrh	r3, [r7, #38]
 1686 0c66 1846     		mov	r0, r3
 1687 0c68 FFF7FEFF 		bl	PWM_Sample_Buffer_WriteCounter
 1688 0c6c A3E2     		b	.L6
 1689              	.L64:
 629:main.c        **** 				}
 630:main.c        **** 				else if(*psz == 'R')
 1690              		.loc 1 630 0
 1691 0c6e BB69     		ldr	r3, [r7, #24]
 1692 0c70 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1693 0c72 522B     		cmp	r3, #82
 1694 0c74 40F00281 		bne	.L67
 631:main.c        **** 				{
 632:main.c        **** 					// Scope control register update
 633:main.c        **** 					// data comes back as an ascii number, representing an 8 bit value
 634:main.c        **** 					// bit 7: unused
 635:main.c        **** 					// bit 6: Internal (0, a or b as defined later) or External Trigger (1)
 636:main.c        **** 					// bit 5: trigger polarity, rising (0) or falling (1)
 637:main.c        **** 					// bit 4: trigger source, A (0) or B (1)
 638:main.c        **** 					// bits 3:0 -> sample rate 20 Msps / (2^thisval) this val can be 0 - 15
 639:main.c        **** 					psz = strtok(0, " ");
 1695              		.loc 1 639 0
 1696 0c78 7D49     		ldr	r1, .L132
 1697 0c7a 0020     		movs	r0, #0
 1698 0c7c FFF7FEFF 		bl	strtok
 1699 0c80 B861     		str	r0, [r7, #24]
 640:main.c        **** 					sscanf(psz,"%hu", &avar);
 1700              		.loc 1 640 0
 1701 0c82 3B1D     		adds	r3, r7, #4
 1702 0c84 1A46     		mov	r2, r3
 1703 0c86 7B49     		ldr	r1, .L132+4
 1704 0c88 B869     		ldr	r0, [r7, #24]
 1705 0c8a FFF7FEFF 		bl	sscanf
 641:main.c        **** 					
 642:main.c        **** 					// internal versus external trigger
 643:main.c        **** 					// bit 6
 644:main.c        **** 					if((avar & 0x40) == 0)
 1706              		.loc 1 644 0
 1707 0c8e BB88     		ldrh	r3, [r7, #4]
 1708 0c90 03F04003 		and	r3, r3, #64
 1709 0c94 002B     		cmp	r3, #0
 1710 0c96 2AD1     		bne	.L68
 645:main.c        **** 					{
 646:main.c        **** 						// internal trigger
 647:main.c        **** 						// trigger polarity
 648:main.c        **** 						// bit 5
 649:main.c        **** 						if((avar & 0x20) == 0)
 1711              		.loc 1 649 0
 1712 0c98 BB88     		ldrh	r3, [r7, #4]
 1713 0c9a 03F02003 		and	r3, r3, #32
 1714 0c9e 002B     		cmp	r3, #0
 1715 0ca0 12D1     		bne	.L69
 650:main.c        **** 						{
 651:main.c        **** 							// rising edge
 652:main.c        **** 							Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1716              		.loc 1 652 0
 1717 0ca2 FFF7FEFF 		bl	Trigger_Control_Read
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 43


 1718 0ca6 0346     		mov	r3, r0
 1719 0ca8 23F00F03 		bic	r3, r3, #15
 1720 0cac DBB2     		uxtb	r3, r3
 1721 0cae 1846     		mov	r0, r3
 1722 0cb0 FFF7FEFF 		bl	Trigger_Control_Write
 653:main.c        ****     						Trigger_Control_Write(Trigger_Control_Read() | RISING_EDGE_TRIGGERED);
 1723              		.loc 1 653 0
 1724 0cb4 FFF7FEFF 		bl	Trigger_Control_Read
 1725 0cb8 0346     		mov	r3, r0
 1726 0cba 43F00203 		orr	r3, r3, #2
 1727 0cbe DBB2     		uxtb	r3, r3
 1728 0cc0 1846     		mov	r0, r3
 1729 0cc2 FFF7FEFF 		bl	Trigger_Control_Write
 1730 0cc6 24E0     		b	.L71
 1731              	.L69:
 654:main.c        **** 						}
 655:main.c        **** 						else
 656:main.c        **** 						{
 657:main.c        **** 							// falling edge
 658:main.c        **** 							Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1732              		.loc 1 658 0
 1733 0cc8 FFF7FEFF 		bl	Trigger_Control_Read
 1734 0ccc 0346     		mov	r3, r0
 1735 0cce 23F00F03 		bic	r3, r3, #15
 1736 0cd2 DBB2     		uxtb	r3, r3
 1737 0cd4 1846     		mov	r0, r3
 1738 0cd6 FFF7FEFF 		bl	Trigger_Control_Write
 659:main.c        ****     						Trigger_Control_Write(Trigger_Control_Read() | FALLING_EDGE_TRIGGERED);
 1739              		.loc 1 659 0
 1740 0cda FFF7FEFF 		bl	Trigger_Control_Read
 1741 0cde 0346     		mov	r3, r0
 1742 0ce0 43F00103 		orr	r3, r3, #1
 1743 0ce4 DBB2     		uxtb	r3, r3
 1744 0ce6 1846     		mov	r0, r3
 1745 0ce8 FFF7FEFF 		bl	Trigger_Control_Write
 1746 0cec 11E0     		b	.L71
 1747              	.L68:
 660:main.c        **** 						}
 661:main.c        **** 					}
 662:main.c        **** 					else
 663:main.c        **** 					{
 664:main.c        **** 						// external trigger
 665:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1748              		.loc 1 665 0
 1749 0cee FFF7FEFF 		bl	Trigger_Control_Read
 1750 0cf2 0346     		mov	r3, r0
 1751 0cf4 23F00F03 		bic	r3, r3, #15
 1752 0cf8 DBB2     		uxtb	r3, r3
 1753 0cfa 1846     		mov	r0, r3
 1754 0cfc FFF7FEFF 		bl	Trigger_Control_Write
 666:main.c        ****     					Trigger_Control_Write(Trigger_Control_Read() | EXTERNAL_TRIGGERED);
 1755              		.loc 1 666 0
 1756 0d00 FFF7FEFF 		bl	Trigger_Control_Read
 1757 0d04 0346     		mov	r3, r0
 1758 0d06 43F00803 		orr	r3, r3, #8
 1759 0d0a DBB2     		uxtb	r3, r3
 1760 0d0c 1846     		mov	r0, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 44


 1761 0d0e FFF7FEFF 		bl	Trigger_Control_Write
 1762              	.L71:
 667:main.c        **** 					}
 668:main.c        **** 					// bit 4
 669:main.c        **** 					// trigger source select
 670:main.c        **** 					if((avar & 0x10) == 0)
 1763              		.loc 1 670 0
 1764 0d12 BB88     		ldrh	r3, [r7, #4]
 1765 0d14 03F01003 		and	r3, r3, #16
 1766 0d18 002B     		cmp	r3, #0
 1767 0d1a 06D1     		bne	.L72
 671:main.c        **** 					{
 672:main.c        **** 						// channel 1 / A
 673:main.c        **** 						trigger_source = SCOPE_CHANNEL_1;
 1768              		.loc 1 673 0
 1769 0d1c 564B     		ldr	r3, .L132+8
 1770 0d1e 0022     		movs	r2, #0
 1771 0d20 1A70     		strb	r2, [r3]
 674:main.c        **** 						Amux_Trigger_Select(SCOPE_CHANNEL_1);
 1772              		.loc 1 674 0
 1773 0d22 0020     		movs	r0, #0
 1774 0d24 FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1775 0d28 05E0     		b	.L73
 1776              	.L72:
 675:main.c        **** 					}
 676:main.c        **** 					else
 677:main.c        **** 					{
 678:main.c        **** 					    // channel 2 / B
 679:main.c        **** 						trigger_source = SCOPE_CHANNEL_2;
 1777              		.loc 1 679 0
 1778 0d2a 534B     		ldr	r3, .L132+8
 1779 0d2c 0122     		movs	r2, #1
 1780 0d2e 1A70     		strb	r2, [r3]
 680:main.c        **** 						Amux_Trigger_Select(SCOPE_CHANNEL_2);
 1781              		.loc 1 680 0
 1782 0d30 0120     		movs	r0, #1
 1783 0d32 FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1784              	.L73:
 681:main.c        **** 					}   
 682:main.c        ****                     if((avar & 0x80) != 0)
 1785              		.loc 1 682 0
 1786 0d36 BB88     		ldrh	r3, [r7, #4]
 1787 0d38 03F08003 		and	r3, r3, #128
 1788 0d3c 002B     		cmp	r3, #0
 1789 0d3e 05D0     		beq	.L74
 683:main.c        ****                     {
 684:main.c        ****                         // select external trigger input pin
 685:main.c        ****                         trigger_source = EXT_TRIGGER;
 1790              		.loc 1 685 0
 1791 0d40 4D4B     		ldr	r3, .L132+8
 1792 0d42 0222     		movs	r2, #2
 1793 0d44 1A70     		strb	r2, [r3]
 686:main.c        **** 						Amux_Trigger_Select(EXT_TRIGGER);
 1794              		.loc 1 686 0
 1795 0d46 0220     		movs	r0, #2
 1796 0d48 FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1797              	.L74:
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 45


 687:main.c        ****                     }
 688:main.c        **** 					// sample rate
 689:main.c        **** 					// bit 3:0
 690:main.c        **** 					if((avar & 0x0f) <= 0) // 818.2 Ksps "maximum" sample rate
 1798              		.loc 1 690 0
 1799 0d4c BB88     		ldrh	r3, [r7, #4]
 1800 0d4e 03F00F03 		and	r3, r3, #15
 1801 0d52 002B     		cmp	r3, #0
 1802 0d54 04DC     		bgt	.L75
 691:main.c        **** 					{
 692:main.c        ****                         // 36 Mhz master clock divided by this number and then divided by 
 693:main.c        ****                         // 18 due to the freq divider set the ADC sample rate.
 694:main.c        **** 						SampleClock_SetDividerValue(1); 
 1803              		.loc 1 694 0
 1804 0d56 0121     		movs	r1, #1
 1805 0d58 0020     		movs	r0, #0
 1806 0d5a FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1807 0d5e 2AE2     		b	.L6
 1808              	.L75:
 695:main.c        **** 					}
 696:main.c        **** 					else if((avar & 0x0f) == 1) // 409.1 ksps
 1809              		.loc 1 696 0
 1810 0d60 BB88     		ldrh	r3, [r7, #4]
 1811 0d62 03F00F03 		and	r3, r3, #15
 1812 0d66 012B     		cmp	r3, #1
 1813 0d68 04D1     		bne	.L77
 697:main.c        **** 					{
 698:main.c        **** 						SampleClock_SetDividerValue(2);
 1814              		.loc 1 698 0
 1815 0d6a 0121     		movs	r1, #1
 1816 0d6c 0120     		movs	r0, #1
 1817 0d6e FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1818 0d72 20E2     		b	.L6
 1819              	.L77:
 699:main.c        **** 					}
 700:main.c        **** 					else if((avar & 0x0f) == 2) // 204.5 ksps
 1820              		.loc 1 700 0
 1821 0d74 BB88     		ldrh	r3, [r7, #4]
 1822 0d76 03F00F03 		and	r3, r3, #15
 1823 0d7a 022B     		cmp	r3, #2
 1824 0d7c 04D1     		bne	.L78
 701:main.c        **** 					{
 702:main.c        **** 						SampleClock_SetDividerValue(4);
 1825              		.loc 1 702 0
 1826 0d7e 0121     		movs	r1, #1
 1827 0d80 0320     		movs	r0, #3
 1828 0d82 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1829 0d86 16E2     		b	.L6
 1830              	.L78:
 703:main.c        **** 					}
 704:main.c        **** 					else if((avar & 0x0f) == 3) // 102.3 ksps
 1831              		.loc 1 704 0
 1832 0d88 BB88     		ldrh	r3, [r7, #4]
 1833 0d8a 03F00F03 		and	r3, r3, #15
 1834 0d8e 032B     		cmp	r3, #3
 1835 0d90 04D1     		bne	.L79
 705:main.c        **** 					{
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 46


 706:main.c        **** 						SampleClock_SetDividerValue(8);
 1836              		.loc 1 706 0
 1837 0d92 0121     		movs	r1, #1
 1838 0d94 0720     		movs	r0, #7
 1839 0d96 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1840 0d9a 0CE2     		b	.L6
 1841              	.L79:
 707:main.c        **** 					}
 708:main.c        **** 					else if((avar & 0x0f) == 4) // 51.1 ksps
 1842              		.loc 1 708 0
 1843 0d9c BB88     		ldrh	r3, [r7, #4]
 1844 0d9e 03F00F03 		and	r3, r3, #15
 1845 0da2 042B     		cmp	r3, #4
 1846 0da4 04D1     		bne	.L80
 709:main.c        **** 					{ 
 710:main.c        **** 						SampleClock_SetDividerValue(16);
 1847              		.loc 1 710 0
 1848 0da6 0121     		movs	r1, #1
 1849 0da8 0F20     		movs	r0, #15
 1850 0daa FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1851 0dae 02E2     		b	.L6
 1852              	.L80:
 711:main.c        **** 					}
 712:main.c        **** 					else if((avar & 0x0f) == 5) // 25.6 ksps
 1853              		.loc 1 712 0
 1854 0db0 BB88     		ldrh	r3, [r7, #4]
 1855 0db2 03F00F03 		and	r3, r3, #15
 1856 0db6 052B     		cmp	r3, #5
 1857 0db8 04D1     		bne	.L81
 713:main.c        **** 					{
 714:main.c        **** 						SampleClock_SetDividerValue(32);
 1858              		.loc 1 714 0
 1859 0dba 0121     		movs	r1, #1
 1860 0dbc 1F20     		movs	r0, #31
 1861 0dbe FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1862 0dc2 F8E1     		b	.L6
 1863              	.L81:
 715:main.c        **** 					}
 716:main.c        **** 					else if((avar & 0x0f) == 6) // 12.8 ksps
 1864              		.loc 1 716 0
 1865 0dc4 BB88     		ldrh	r3, [r7, #4]
 1866 0dc6 03F00F03 		and	r3, r3, #15
 1867 0dca 062B     		cmp	r3, #6
 1868 0dcc 04D1     		bne	.L82
 717:main.c        **** 					{
 718:main.c        **** 						SampleClock_SetDividerValue(64);
 1869              		.loc 1 718 0
 1870 0dce 0121     		movs	r1, #1
 1871 0dd0 3F20     		movs	r0, #63
 1872 0dd2 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1873 0dd6 EEE1     		b	.L6
 1874              	.L82:
 719:main.c        **** 					}
 720:main.c        **** 					else if((avar & 0x0f) == 7) // 6.4 ksps
 1875              		.loc 1 720 0
 1876 0dd8 BB88     		ldrh	r3, [r7, #4]
 1877 0dda 03F00F03 		and	r3, r3, #15
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 47


 1878 0dde 072B     		cmp	r3, #7
 1879 0de0 04D1     		bne	.L83
 721:main.c        **** 					{ 
 722:main.c        **** 						SampleClock_SetDividerValue(128);
 1880              		.loc 1 722 0
 1881 0de2 0121     		movs	r1, #1
 1882 0de4 7F20     		movs	r0, #127
 1883 0de6 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1884 0dea E4E1     		b	.L6
 1885              	.L83:
 723:main.c        **** 					}
 724:main.c        **** 					else if((avar & 0x0f) == 8) // 3.2 ksps
 1886              		.loc 1 724 0
 1887 0dec BB88     		ldrh	r3, [r7, #4]
 1888 0dee 03F00F03 		and	r3, r3, #15
 1889 0df2 082B     		cmp	r3, #8
 1890 0df4 04D1     		bne	.L84
 725:main.c        **** 					{
 726:main.c        **** 						SampleClock_SetDividerValue(256);
 1891              		.loc 1 726 0
 1892 0df6 0121     		movs	r1, #1
 1893 0df8 FF20     		movs	r0, #255
 1894 0dfa FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1895 0dfe DAE1     		b	.L6
 1896              	.L84:
 727:main.c        **** 					}
 728:main.c        **** 					else if((avar & 0x0f) == 9) // 1.6 ksps
 1897              		.loc 1 728 0
 1898 0e00 BB88     		ldrh	r3, [r7, #4]
 1899 0e02 03F00F03 		and	r3, r3, #15
 1900 0e06 092B     		cmp	r3, #9
 1901 0e08 05D1     		bne	.L85
 729:main.c        **** 					{
 730:main.c        **** 						SampleClock_SetDividerValue(512);
 1902              		.loc 1 730 0
 1903 0e0a 0121     		movs	r1, #1
 1904 0e0c 40F2FF10 		movw	r0, #511
 1905 0e10 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1906 0e14 CFE1     		b	.L6
 1907              	.L85:
 731:main.c        **** 					}
 732:main.c        **** 					else if((avar & 0x0f) == 10) // 799 sps 
 1908              		.loc 1 732 0
 1909 0e16 BB88     		ldrh	r3, [r7, #4]
 1910 0e18 03F00F03 		and	r3, r3, #15
 1911 0e1c 0A2B     		cmp	r3, #10
 1912 0e1e 05D1     		bne	.L86
 733:main.c        **** 					{ 
 734:main.c        **** 						SampleClock_SetDividerValue(1024);
 1913              		.loc 1 734 0
 1914 0e20 0121     		movs	r1, #1
 1915 0e22 40F2FF30 		movw	r0, #1023
 1916 0e26 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1917 0e2a C4E1     		b	.L6
 1918              	.L86:
 735:main.c        **** 					}
 736:main.c        **** 					else if((avar & 0x0f) == 11) // 400 sps
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 48


 1919              		.loc 1 736 0
 1920 0e2c BB88     		ldrh	r3, [r7, #4]
 1921 0e2e 03F00F03 		and	r3, r3, #15
 1922 0e32 0B2B     		cmp	r3, #11
 1923 0e34 05D1     		bne	.L87
 737:main.c        **** 					{ 
 738:main.c        **** 						SampleClock_SetDividerValue(2048);
 1924              		.loc 1 738 0
 1925 0e36 0121     		movs	r1, #1
 1926 0e38 40F2FF70 		movw	r0, #2047
 1927 0e3c FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1928 0e40 B9E1     		b	.L6
 1929              	.L87:
 739:main.c        **** 					}                    
 740:main.c        **** 					else if((avar & 0x0f) == 12) // 200 sps
 1930              		.loc 1 740 0
 1931 0e42 BB88     		ldrh	r3, [r7, #4]
 1932 0e44 03F00F03 		and	r3, r3, #15
 1933 0e48 0C2B     		cmp	r3, #12
 1934 0e4a 05D1     		bne	.L88
 741:main.c        **** 					{ 
 742:main.c        **** 						SampleClock_SetDividerValue(4096);
 1935              		.loc 1 742 0
 1936 0e4c 0121     		movs	r1, #1
 1937 0e4e 40F6FF70 		movw	r0, #4095
 1938 0e52 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1939 0e56 AEE1     		b	.L6
 1940              	.L88:
 743:main.c        **** 					}
 744:main.c        **** 					else if((avar & 0x0f) >= 13) // 100 sps
 1941              		.loc 1 744 0
 1942 0e58 BB88     		ldrh	r3, [r7, #4]
 1943 0e5a 03F00F03 		and	r3, r3, #15
 1944 0e5e 0C2B     		cmp	r3, #12
 1945 0e60 40F3A981 		ble	.L6
 745:main.c        **** 					{ 
 746:main.c        **** 						SampleClock_SetDividerValue(8192);
 1946              		.loc 1 746 0
 1947 0e64 0121     		movs	r1, #1
 1948 0e66 41F6FF70 		movw	r0, #8191
 1949 0e6a FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1950 0e6e A2E1     		b	.L6
 1951              	.L133:
 1952              		.align	2
 1953              	.L132:
 1954 0e70 00000000 		.word	.LC0
 1955 0e74 18000000 		.word	.LC2
 1956 0e78 00000000 		.word	trigger_source
 1957              	.L67:
 747:main.c        **** 					}
 748:main.c        ****                 }
 749:main.c        **** 				else if(*psz == 'D')
 1958              		.loc 1 749 0
 1959 0e7c BB69     		ldr	r3, [r7, #24]
 1960 0e7e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1961 0e80 442B     		cmp	r3, #68
 1962 0e82 59D1     		bne	.L89
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 49


 750:main.c        **** 				{
 751:main.c        **** 					// Scope debug hardware command
 752:main.c        **** 					// data comes back as an ascii number, representing a single value
 753:main.c        **** 					// 0 set reset to 0
 754:main.c        **** 					// 1 set reset to 1
 755:main.c        **** 					// 2 set REQ = 0
 756:main.c        **** 					// 3 set REQ = 1
 757:main.c        **** 					// 4 set MAN_TRIG = 1
 758:main.c        **** 					// 5 set MAN_TRIG = 0
 759:main.c        **** 					psz = strtok(0, " ");
 1963              		.loc 1 759 0
 1964 0e84 B649     		ldr	r1, .L134+8
 1965 0e86 0020     		movs	r0, #0
 1966 0e88 FFF7FEFF 		bl	strtok
 1967 0e8c B861     		str	r0, [r7, #24]
 760:main.c        **** 					sscanf(psz,"%hu", &avar);
 1968              		.loc 1 760 0
 1969 0e8e 3B1D     		adds	r3, r7, #4
 1970 0e90 1A46     		mov	r2, r3
 1971 0e92 B449     		ldr	r1, .L134+12
 1972 0e94 B869     		ldr	r0, [r7, #24]
 1973 0e96 FFF7FEFF 		bl	sscanf
 761:main.c        **** 					
 762:main.c        **** 					if(avar == 0) // reset PWM = 0
 1974              		.loc 1 762 0
 1975 0e9a BB88     		ldrh	r3, [r7, #4]
 1976 0e9c 002B     		cmp	r3, #0
 1977 0e9e 09D1     		bne	.L90
 763:main.c        **** 					{
 764:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~RESET_PWM);
 1978              		.loc 1 764 0
 1979 0ea0 FFF7FEFF 		bl	Trigger_Control_Read
 1980 0ea4 0346     		mov	r3, r0
 1981 0ea6 03F07F03 		and	r3, r3, #127
 1982 0eaa DBB2     		uxtb	r3, r3
 1983 0eac 1846     		mov	r0, r3
 1984 0eae FFF7FEFF 		bl	Trigger_Control_Write
 1985 0eb2 80E1     		b	.L6
 1986              	.L90:
 765:main.c        **** 					}
 766:main.c        **** 					else if(avar == 1) // reset PWM = 1
 1987              		.loc 1 766 0
 1988 0eb4 BB88     		ldrh	r3, [r7, #4]
 1989 0eb6 012B     		cmp	r3, #1
 1990 0eb8 09D1     		bne	.L92
 767:main.c        **** 					{
 768:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | RESET_PWM);
 1991              		.loc 1 768 0
 1992 0eba FFF7FEFF 		bl	Trigger_Control_Read
 1993 0ebe 0346     		mov	r3, r0
 1994 0ec0 63F07F03 		orn	r3, r3, #127
 1995 0ec4 DBB2     		uxtb	r3, r3
 1996 0ec6 1846     		mov	r0, r3
 1997 0ec8 FFF7FEFF 		bl	Trigger_Control_Write
 1998 0ecc 73E1     		b	.L6
 1999              	.L92:
 769:main.c        **** 					}
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 50


 770:main.c        **** 					else if(avar == 2) // set REQ = 0
 2000              		.loc 1 770 0
 2001 0ece BB88     		ldrh	r3, [r7, #4]
 2002 0ed0 022B     		cmp	r3, #2
 2003 0ed2 09D1     		bne	.L93
 771:main.c        **** 					{
 772:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 2004              		.loc 1 772 0
 2005 0ed4 FFF7FEFF 		bl	Trigger_Control_Read
 2006 0ed8 0346     		mov	r3, r0
 2007 0eda 23F04003 		bic	r3, r3, #64
 2008 0ede DBB2     		uxtb	r3, r3
 2009 0ee0 1846     		mov	r0, r3
 2010 0ee2 FFF7FEFF 		bl	Trigger_Control_Write
 2011 0ee6 66E1     		b	.L6
 2012              	.L93:
 773:main.c        **** 					}
 774:main.c        **** 					else if(avar == 3) // set REQ = 1
 2013              		.loc 1 774 0
 2014 0ee8 BB88     		ldrh	r3, [r7, #4]
 2015 0eea 032B     		cmp	r3, #3
 2016 0eec 09D1     		bne	.L94
 775:main.c        **** 					{
 776:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 2017              		.loc 1 776 0
 2018 0eee FFF7FEFF 		bl	Trigger_Control_Read
 2019 0ef2 0346     		mov	r3, r0
 2020 0ef4 43F04003 		orr	r3, r3, #64
 2021 0ef8 DBB2     		uxtb	r3, r3
 2022 0efa 1846     		mov	r0, r3
 2023 0efc FFF7FEFF 		bl	Trigger_Control_Write
 2024 0f00 59E1     		b	.L6
 2025              	.L94:
 777:main.c        **** 					}
 778:main.c        **** 					else if(avar == 4) // manual trigger = 0
 2026              		.loc 1 778 0
 2027 0f02 BB88     		ldrh	r3, [r7, #4]
 2028 0f04 042B     		cmp	r3, #4
 2029 0f06 09D1     		bne	.L95
 779:main.c        **** 					{
 780:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~MANUAL_TRIGGER);
 2030              		.loc 1 780 0
 2031 0f08 FFF7FEFF 		bl	Trigger_Control_Read
 2032 0f0c 0346     		mov	r3, r0
 2033 0f0e 23F01003 		bic	r3, r3, #16
 2034 0f12 DBB2     		uxtb	r3, r3
 2035 0f14 1846     		mov	r0, r3
 2036 0f16 FFF7FEFF 		bl	Trigger_Control_Write
 2037 0f1a 4CE1     		b	.L6
 2038              	.L95:
 781:main.c        **** 					}
 782:main.c        **** 					else if(avar == 5) // manual trigger = 1
 2039              		.loc 1 782 0
 2040 0f1c BB88     		ldrh	r3, [r7, #4]
 2041 0f1e 052B     		cmp	r3, #5
 2042 0f20 40F04981 		bne	.L6
 783:main.c        **** 					{
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 51


 784:main.c        **** 						//Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 785:main.c        **** 						//Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 786:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | MANUAL_TRIGGER);
 2043              		.loc 1 786 0
 2044 0f24 FFF7FEFF 		bl	Trigger_Control_Read
 2045 0f28 0346     		mov	r3, r0
 2046 0f2a 43F01003 		orr	r3, r3, #16
 2047 0f2e DBB2     		uxtb	r3, r3
 2048 0f30 1846     		mov	r0, r3
 2049 0f32 FFF7FEFF 		bl	Trigger_Control_Write
 2050 0f36 3EE1     		b	.L6
 2051              	.L89:
 787:main.c        **** 					}
 788:main.c        **** 					
 789:main.c        **** 				}
 790:main.c        **** 				else if(*psz == 'G')
 2052              		.loc 1 790 0
 2053 0f38 BB69     		ldr	r3, [r7, #24]
 2054 0f3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2055 0f3c 472B     		cmp	r3, #71
 2056 0f3e 12D1     		bne	.L96
 791:main.c        **** 				{
 792:main.c        **** 					// Scope GO, arms the scope and waits for a trigger event
 793:main.c        **** 					// if a trigger occurs, sends back the character 'A' followed
 794:main.c        **** 					// by a 2nd and 3rd byte in binary format indicating the address
 795:main.c        **** 					// where the capture ended in the buffer (10 bits).  I'm assuming Aa format
 796:main.c        **** 					
 797:main.c        **** 					// arm the scope
 798:main.c        **** 					Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 2057              		.loc 1 798 0
 2058 0f40 FFF7FEFF 		bl	Trigger_Control_Read
 2059 0f44 0346     		mov	r3, r0
 2060 0f46 43F04003 		orr	r3, r3, #64
 2061 0f4a DBB2     		uxtb	r3, r3
 2062 0f4c 1846     		mov	r0, r3
 2063 0f4e FFF7FEFF 		bl	Trigger_Control_Write
 799:main.c        **** 					Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 2064              		.loc 1 799 0
 2065 0f52 FFF7FEFF 		bl	Trigger_Control_Read
 2066 0f56 0346     		mov	r3, r0
 2067 0f58 23F04003 		bic	r3, r3, #64
 2068 0f5c DBB2     		uxtb	r3, r3
 2069 0f5e 1846     		mov	r0, r3
 2070 0f60 FFF7FEFF 		bl	Trigger_Control_Write
 2071 0f64 27E1     		b	.L6
 2072              	.L96:
 800:main.c        **** 					
 801:main.c        **** 				}
 802:main.c        **** 				else if(*psz == 'B')
 2073              		.loc 1 802 0
 2074 0f66 BB69     		ldr	r3, [r7, #24]
 2075 0f68 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2076 0f6a 422B     		cmp	r3, #66
 2077 0f6c 40F08480 		bne	.L97
 803:main.c        **** 				{
 804:main.c        **** 					// dump the scope buffer
 805:main.c        **** 					PutChar('D');
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 52


 2078              		.loc 1 805 0
 2079 0f70 4420     		movs	r0, #68
 2080 0f72 FFF7FEFF 		bl	PutChar
 806:main.c        **** 					
 807:main.c        **** 					for(i = 0; i < BUFFER_SIZE; i++)
 2081              		.loc 1 807 0
 2082 0f76 0023     		movs	r3, #0
 2083 0f78 BB84     		strh	r3, [r7, #36]	@ movhi
 2084 0f7a 78E0     		b	.L98
 2085              	.L104:
 808:main.c        **** 					{
 809:main.c        **** 						// truncate to 12 bits
 810:main.c        **** 						avar = (uint16) Channel_1_Data[i]/1.005;
 2086              		.loc 1 810 0
 2087 0f7c BB8C     		ldrh	r3, [r7, #36]
 2088 0f7e 7A4A     		ldr	r2, .L134+16
 2089 0f80 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 2090 0f84 1846     		mov	r0, r3
 2091 0f86 FFF7FEFF 		bl	__aeabi_i2d
 2092 0f8a 73A3     		adr	r3, .L134
 2093 0f8c D3E90023 		ldrd	r2, [r3]
 2094 0f90 FFF7FEFF 		bl	__aeabi_ddiv
 2095 0f94 0346     		mov	r3, r0
 2096 0f96 0C46     		mov	r4, r1
 2097 0f98 1846     		mov	r0, r3
 2098 0f9a 2146     		mov	r1, r4
 2099 0f9c FFF7FEFF 		bl	__aeabi_d2uiz
 2100 0fa0 0346     		mov	r3, r0
 2101 0fa2 9BB2     		uxth	r3, r3
 2102 0fa4 BB80     		strh	r3, [r7, #4]	@ movhi
 811:main.c        **** 						bvar = (uint16) Channel_2_Data[i]/1.005;
 2103              		.loc 1 811 0
 2104 0fa6 BB8C     		ldrh	r3, [r7, #36]
 2105 0fa8 704A     		ldr	r2, .L134+20
 2106 0faa 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 2107 0fae 1846     		mov	r0, r3
 2108 0fb0 FFF7FEFF 		bl	__aeabi_i2d
 2109 0fb4 68A3     		adr	r3, .L134
 2110 0fb6 D3E90023 		ldrd	r2, [r3]
 2111 0fba FFF7FEFF 		bl	__aeabi_ddiv
 2112 0fbe 0346     		mov	r3, r0
 2113 0fc0 0C46     		mov	r4, r1
 2114 0fc2 1846     		mov	r0, r3
 2115 0fc4 2146     		mov	r1, r4
 2116 0fc6 FFF7FEFF 		bl	__aeabi_d2uiz
 2117 0fca 0346     		mov	r3, r0
 2118 0fcc FB84     		strh	r3, [r7, #38]	@ movhi
 812:main.c        **** 						
 813:main.c        **** 						// send the data out to the terminal
 814:main.c        **** 						USB_Out_Buffer[(i*4+0) % USBUART_BUFFER_SIZE] = (uint8) (avar >> 8); // address of the end, M
 2119              		.loc 1 814 0
 2120 0fce BB8C     		ldrh	r3, [r7, #36]
 2121 0fd0 9B00     		lsls	r3, r3, #2
 2122 0fd2 03F03C03 		and	r3, r3, #60
 2123 0fd6 BA88     		ldrh	r2, [r7, #4]
 2124 0fd8 120A     		lsrs	r2, r2, #8
 2125 0fda 92B2     		uxth	r2, r2
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 53


 2126 0fdc D1B2     		uxtb	r1, r2
 2127 0fde 644A     		ldr	r2, .L134+24
 2128 0fe0 D154     		strb	r1, [r2, r3]
 815:main.c        **** 						USB_Out_Buffer[(i*4+1) % USBUART_BUFFER_SIZE] = (uint8) (avar & 0x00FF); // address of the en
 2129              		.loc 1 815 0
 2130 0fe2 BB8C     		ldrh	r3, [r7, #36]
 2131 0fe4 9B00     		lsls	r3, r3, #2
 2132 0fe6 5A1C     		adds	r2, r3, #1
 2133 0fe8 624B     		ldr	r3, .L134+28
 2134 0fea 1340     		ands	r3, r3, r2
 2135 0fec 002B     		cmp	r3, #0
 2136 0fee 03DA     		bge	.L99
 2137 0ff0 013B     		subs	r3, r3, #1
 2138 0ff2 63F03F03 		orn	r3, r3, #63
 2139 0ff6 0133     		adds	r3, r3, #1
 2140              	.L99:
 2141 0ff8 1A46     		mov	r2, r3
 2142 0ffa BB88     		ldrh	r3, [r7, #4]
 2143 0ffc D9B2     		uxtb	r1, r3
 2144 0ffe 5C4B     		ldr	r3, .L134+24
 2145 1000 9954     		strb	r1, [r3, r2]
 816:main.c        **** 						USB_Out_Buffer[(i*4+2) % USBUART_BUFFER_SIZE] = (uint8) (bvar >> 8); // address of the end, M
 2146              		.loc 1 816 0
 2147 1002 BB8C     		ldrh	r3, [r7, #36]
 2148 1004 9B00     		lsls	r3, r3, #2
 2149 1006 9A1C     		adds	r2, r3, #2
 2150 1008 5A4B     		ldr	r3, .L134+28
 2151 100a 1340     		ands	r3, r3, r2
 2152 100c 002B     		cmp	r3, #0
 2153 100e 03DA     		bge	.L100
 2154 1010 013B     		subs	r3, r3, #1
 2155 1012 63F03F03 		orn	r3, r3, #63
 2156 1016 0133     		adds	r3, r3, #1
 2157              	.L100:
 2158 1018 1A46     		mov	r2, r3
 2159 101a FB8C     		ldrh	r3, [r7, #38]
 2160 101c 1B0A     		lsrs	r3, r3, #8
 2161 101e 9BB2     		uxth	r3, r3
 2162 1020 D9B2     		uxtb	r1, r3
 2163 1022 534B     		ldr	r3, .L134+24
 2164 1024 9954     		strb	r1, [r3, r2]
 817:main.c        **** 						USB_Out_Buffer[(i*4+3) % USBUART_BUFFER_SIZE] = (uint8) (bvar & 0x00FF); // address of the en
 2165              		.loc 1 817 0
 2166 1026 BB8C     		ldrh	r3, [r7, #36]
 2167 1028 9B00     		lsls	r3, r3, #2
 2168 102a DA1C     		adds	r2, r3, #3
 2169 102c 514B     		ldr	r3, .L134+28
 2170 102e 1340     		ands	r3, r3, r2
 2171 1030 002B     		cmp	r3, #0
 2172 1032 03DA     		bge	.L101
 2173 1034 013B     		subs	r3, r3, #1
 2174 1036 63F03F03 		orn	r3, r3, #63
 2175 103a 0133     		adds	r3, r3, #1
 2176              	.L101:
 2177 103c 1A46     		mov	r2, r3
 2178 103e FB8C     		ldrh	r3, [r7, #38]	@ movhi
 2179 1040 D9B2     		uxtb	r1, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 54


 2180 1042 4B4B     		ldr	r3, .L134+24
 2181 1044 9954     		strb	r1, [r3, r2]
 818:main.c        **** 						
 819:main.c        **** 						// our buffer has been filled up, dump the data out the serial port
 820:main.c        **** 						if(((i*4+4) % USBUART_BUFFER_SIZE) == 0)
 2182              		.loc 1 820 0
 2183 1046 BB8C     		ldrh	r3, [r7, #36]
 2184 1048 0133     		adds	r3, r3, #1
 2185 104a 9B00     		lsls	r3, r3, #2
 2186 104c 03F03C03 		and	r3, r3, #60
 2187 1050 002B     		cmp	r3, #0
 2188 1052 09D1     		bne	.L102
 821:main.c        **** 						{
 822:main.c        **** 							while(USBUART_CDCIsReady() == 0){};
 2189              		.loc 1 822 0
 2190 1054 00BF     		nop
 2191              	.L103:
 2192              		.loc 1 822 0 is_stmt 0 discriminator 1
 2193 1056 FFF7FEFF 		bl	USBUART_CDCIsReady
 2194 105a 0346     		mov	r3, r0
 2195 105c 002B     		cmp	r3, #0
 2196 105e FAD0     		beq	.L103
 823:main.c        **** 							USBUART_PutData(USB_Out_Buffer, USBUART_BUFFER_SIZE);
 2197              		.loc 1 823 0 is_stmt 1
 2198 1060 4021     		movs	r1, #64
 2199 1062 4348     		ldr	r0, .L134+24
 2200 1064 FFF7FEFF 		bl	USBUART_PutData
 2201              	.L102:
 807:main.c        **** 					{
 2202              		.loc 1 807 0 discriminator 2
 2203 1068 BB8C     		ldrh	r3, [r7, #36]
 2204 106a 0133     		adds	r3, r3, #1
 2205 106c BB84     		strh	r3, [r7, #36]	@ movhi
 2206              	.L98:
 807:main.c        **** 					{
 2207              		.loc 1 807 0 is_stmt 0 discriminator 1
 2208 106e BB8C     		ldrh	r3, [r7, #36]
 2209 1070 B3F5806F 		cmp	r3, #1024
 2210 1074 82D3     		bcc	.L104
 2211 1076 9EE0     		b	.L6
 2212              	.L97:
 824:main.c        **** 						}
 825:main.c        **** 					}
 826:main.c        **** 				}
 827:main.c        **** 				else if(*psz == 'P')
 2213              		.loc 1 827 0 is_stmt 1
 2214 1078 BB69     		ldr	r3, [r7, #24]
 2215 107a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2216 107c 502B     		cmp	r3, #80
 2217 107e 58D1     		bne	.L105
 828:main.c        **** 				{
 829:main.c        **** 					// Scope Preamp settings
 830:main.c        **** 					// S P [A,B] Val can be 1,2,4,8,16,24,32,48,50
 831:main.c        ****                     // Grab the preamp gain value and set the gain
 832:main.c        **** 					//
 833:main.c        **** 					psz = strtok(0, " ");
 2218              		.loc 1 833 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 55


 2219 1080 3749     		ldr	r1, .L134+8
 2220 1082 0020     		movs	r0, #0
 2221 1084 FFF7FEFF 		bl	strtok
 2222 1088 B861     		str	r0, [r7, #24]
 834:main.c        **** 					
 835:main.c        **** 					if(*psz == 'A')
 2223              		.loc 1 835 0
 2224 108a BB69     		ldr	r3, [r7, #24]
 2225 108c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2226 108e 412B     		cmp	r3, #65
 2227 1090 10D1     		bne	.L106
 836:main.c        **** 					{
 837:main.c        ****                         psz = strtok(0, " ");
 2228              		.loc 1 837 0
 2229 1092 3349     		ldr	r1, .L134+8
 2230 1094 0020     		movs	r0, #0
 2231 1096 FFF7FEFF 		bl	strtok
 2232 109a B861     		str	r0, [r7, #24]
 838:main.c        ****                         sscanf(psz,"%hu", &avar);
 2233              		.loc 1 838 0
 2234 109c 3B1D     		adds	r3, r7, #4
 2235 109e 1A46     		mov	r2, r3
 2236 10a0 3049     		ldr	r1, .L134+12
 2237 10a2 B869     		ldr	r0, [r7, #24]
 2238 10a4 FFF7FEFF 		bl	sscanf
 839:main.c        **** 						//preamp_a = (uint8) avar;
 840:main.c        ****                         ScopeA_Buf_SetGain((uint8) avar);
 2239              		.loc 1 840 0
 2240 10a8 BB88     		ldrh	r3, [r7, #4]
 2241 10aa DBB2     		uxtb	r3, r3
 2242 10ac 1846     		mov	r0, r3
 2243 10ae FFF7FEFF 		bl	ScopeA_Buf_SetGain
 2244 10b2 80E0     		b	.L6
 2245              	.L106:
 841:main.c        **** 					}
 842:main.c        **** 					else if(*psz == 'B')
 2246              		.loc 1 842 0
 2247 10b4 BB69     		ldr	r3, [r7, #24]
 2248 10b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2249 10b8 422B     		cmp	r3, #66
 2250 10ba 10D1     		bne	.L108
 843:main.c        **** 					{
 844:main.c        **** 						psz = strtok(0, " ");
 2251              		.loc 1 844 0
 2252 10bc 2849     		ldr	r1, .L134+8
 2253 10be 0020     		movs	r0, #0
 2254 10c0 FFF7FEFF 		bl	strtok
 2255 10c4 B861     		str	r0, [r7, #24]
 845:main.c        ****                         sscanf(psz,"%hu", &avar);
 2256              		.loc 1 845 0
 2257 10c6 3B1D     		adds	r3, r7, #4
 2258 10c8 1A46     		mov	r2, r3
 2259 10ca 2649     		ldr	r1, .L134+12
 2260 10cc B869     		ldr	r0, [r7, #24]
 2261 10ce FFF7FEFF 		bl	sscanf
 846:main.c        **** 						//preamp_b = (uint8) avar;
 847:main.c        ****                         ScopeB_Buf_SetGain((uint8) avar);
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 56


 2262              		.loc 1 847 0
 2263 10d2 BB88     		ldrh	r3, [r7, #4]
 2264 10d4 DBB2     		uxtb	r3, r3
 2265 10d6 1846     		mov	r0, r3
 2266 10d8 FFF7FEFF 		bl	ScopeB_Buf_SetGain
 2267 10dc 6BE0     		b	.L6
 2268              	.L108:
 848:main.c        **** 					}
 849:main.c        ****                     else if(*psz == 'C')
 2269              		.loc 1 849 0
 2270 10de BB69     		ldr	r3, [r7, #24]
 2271 10e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2272 10e2 432B     		cmp	r3, #67
 2273 10e4 10D1     		bne	.L109
 850:main.c        **** 					{
 851:main.c        ****                         psz = strtok(0, " ");
 2274              		.loc 1 851 0
 2275 10e6 1E49     		ldr	r1, .L134+8
 2276 10e8 0020     		movs	r0, #0
 2277 10ea FFF7FEFF 		bl	strtok
 2278 10ee B861     		str	r0, [r7, #24]
 852:main.c        ****                         sscanf(psz,"%hu", &avar);
 2279              		.loc 1 852 0
 2280 10f0 3B1D     		adds	r3, r7, #4
 2281 10f2 1A46     		mov	r2, r3
 2282 10f4 1B49     		ldr	r1, .L134+12
 2283 10f6 B869     		ldr	r0, [r7, #24]
 2284 10f8 FFF7FEFF 		bl	sscanf
 853:main.c        **** 						//preamp_a = (uint8) avar;
 854:main.c        ****                         ScopeC_Buf_SetGain((uint8) avar);
 2285              		.loc 1 854 0
 2286 10fc BB88     		ldrh	r3, [r7, #4]
 2287 10fe DBB2     		uxtb	r3, r3
 2288 1100 1846     		mov	r0, r3
 2289 1102 FFF7FEFF 		bl	ScopeC_Buf_SetGain
 2290 1106 56E0     		b	.L6
 2291              	.L109:
 855:main.c        **** 					}
 856:main.c        **** 					else if(*psz == 'D')
 2292              		.loc 1 856 0
 2293 1108 BB69     		ldr	r3, [r7, #24]
 2294 110a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2295 110c 442B     		cmp	r3, #68
 2296 110e 52D1     		bne	.L6
 857:main.c        **** 					{
 858:main.c        **** 						psz = strtok(0, " ");
 2297              		.loc 1 858 0
 2298 1110 1349     		ldr	r1, .L134+8
 2299 1112 0020     		movs	r0, #0
 2300 1114 FFF7FEFF 		bl	strtok
 2301 1118 B861     		str	r0, [r7, #24]
 859:main.c        ****                         sscanf(psz,"%hu", &avar);
 2302              		.loc 1 859 0
 2303 111a 3B1D     		adds	r3, r7, #4
 2304 111c 1A46     		mov	r2, r3
 2305 111e 1149     		ldr	r1, .L134+12
 2306 1120 B869     		ldr	r0, [r7, #24]
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 57


 2307 1122 FFF7FEFF 		bl	sscanf
 860:main.c        **** 						//preamp_b = (uint8) avar;
 861:main.c        ****                         ScopeC_Buf_SetGain((uint8) avar);
 2308              		.loc 1 861 0
 2309 1126 BB88     		ldrh	r3, [r7, #4]
 2310 1128 DBB2     		uxtb	r3, r3
 2311 112a 1846     		mov	r0, r3
 2312 112c FFF7FEFF 		bl	ScopeC_Buf_SetGain
 2313 1130 41E0     		b	.L6
 2314              	.L105:
 862:main.c        **** 					}
 863:main.c        **** 				}
 864:main.c        ****                 else if(*psz == 'M')
 2315              		.loc 1 864 0
 2316 1132 BB69     		ldr	r3, [r7, #24]
 2317 1134 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2318 1136 4D2B     		cmp	r3, #77
 2319 1138 36D1     		bne	.L110
 865:main.c        **** 				{
 866:main.c        **** 					// Select scope input mux channel A or C and B or D
 867:main.c        **** 					psz = strtok(0, " ");
 2320              		.loc 1 867 0
 2321 113a 0949     		ldr	r1, .L134+8
 2322 113c 0020     		movs	r0, #0
 2323 113e FFF7FEFF 		bl	strtok
 2324 1142 B861     		str	r0, [r7, #24]
 868:main.c        **** 					if(*psz == 'A')
 2325              		.loc 1 868 0
 2326 1144 BB69     		ldr	r3, [r7, #24]
 2327 1146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2328 1148 412B     		cmp	r3, #65
 2329 114a 15D1     		bne	.L111
 869:main.c        **** 					{
 870:main.c        ****                         AMux_1_Select(SCOPE_CHANNEL_1);
 2330              		.loc 1 870 0
 2331 114c 0020     		movs	r0, #0
 2332 114e FFF7FEFF 		bl	AMux_1_FastSelect
 2333 1152 30E0     		b	.L6
 2334              	.L135:
 2335 1154 AFF30080 		.align	3
 2336              	.L134:
 2337 1158 14AE47E1 		.word	-515396076
 2338 115c 7A14F03F 		.word	1072698490
 2339 1160 00000000 		.word	.LC0
 2340 1164 18000000 		.word	.LC2
 2341 1168 00000000 		.word	Channel_1_Data
 2342 116c 00000000 		.word	Channel_2_Data
 2343 1170 00000000 		.word	USB_Out_Buffer
 2344 1174 3F000080 		.word	-2147483585
 2345              	.L111:
 871:main.c        **** 					}
 872:main.c        **** 					else if(*psz == 'B')
 2346              		.loc 1 872 0
 2347 1178 BB69     		ldr	r3, [r7, #24]
 2348 117a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2349 117c 422B     		cmp	r3, #66
 2350 117e 03D1     		bne	.L113
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 58


 873:main.c        ****                     {
 874:main.c        ****                         AMux_2_Select(SCOPE_CHANNEL_3);
 2351              		.loc 1 874 0
 2352 1180 0020     		movs	r0, #0
 2353 1182 FFF7FEFF 		bl	AMux_2_FastSelect
 2354 1186 16E0     		b	.L6
 2355              	.L113:
 875:main.c        **** 					}
 876:main.c        ****                     else if(*psz == 'C')
 2356              		.loc 1 876 0
 2357 1188 BB69     		ldr	r3, [r7, #24]
 2358 118a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2359 118c 432B     		cmp	r3, #67
 2360 118e 03D1     		bne	.L114
 877:main.c        ****                     {
 878:main.c        ****                         AMux_1_Select(SCOPE_CHANNEL_2);
 2361              		.loc 1 878 0
 2362 1190 0120     		movs	r0, #1
 2363 1192 FFF7FEFF 		bl	AMux_1_FastSelect
 2364 1196 0EE0     		b	.L6
 2365              	.L114:
 879:main.c        ****                     }
 880:main.c        ****                     else if(*psz == 'D')
 2366              		.loc 1 880 0
 2367 1198 BB69     		ldr	r3, [r7, #24]
 2368 119a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2369 119c 442B     		cmp	r3, #68
 2370 119e 0AD1     		bne	.L6
 881:main.c        ****                     {
 882:main.c        ****                         AMux_2_Select(SCOPE_CHANNEL_4);
 2371              		.loc 1 882 0
 2372 11a0 0120     		movs	r0, #1
 2373 11a2 FFF7FEFF 		bl	AMux_2_FastSelect
 2374 11a6 06E0     		b	.L6
 2375              	.L110:
 883:main.c        ****                     }
 884:main.c        **** 				}
 885:main.c        **** 				else
 886:main.c        **** 				{
 887:main.c        **** 					PutString("Error: Unrecognized Scope Command\n\r");
 2376              		.loc 1 887 0
 2377 11a8 1748     		ldr	r0, .L136
 2378 11aa FFF7FEFF 		bl	PutString
 2379 11ae 02E0     		b	.L6
 2380              	.L60:
 888:main.c        **** 				}
 889:main.c        **** 			// END OF SCOPE 'S' COMMANDS
 890:main.c        **** 			}
 891:main.c        **** 			else
 892:main.c        **** 			{
 893:main.c        **** 				// command not recognized, toss it
 894:main.c        **** 				PutString("Error: Unknown Command\n\r");
 2381              		.loc 1 894 0
 2382 11b0 1648     		ldr	r0, .L136+4
 2383 11b2 FFF7FEFF 		bl	PutString
 2384              	.L6:
 895:main.c        **** 			}
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 59


 896:main.c        **** 			bCommandReady = 0;
 2385              		.loc 1 896 0
 2386 11b6 164B     		ldr	r3, .L136+8
 2387 11b8 0022     		movs	r2, #0
 2388 11ba 1A70     		strb	r2, [r3]
 2389              	.L4:
 897:main.c        **** 		}
 898:main.c        **** 		
 899:main.c        **** 		status = Trigger_Status_Read();
 2390              		.loc 1 899 0
 2391 11bc FFF7FEFF 		bl	Trigger_Status_Read
 2392 11c0 0346     		mov	r3, r0
 2393 11c2 7B72     		strb	r3, [r7, #9]
 900:main.c        **** 						
 901:main.c        **** 		// if we have completed a capture, get the index of the last sample
 902:main.c        **** 		if((status & CAPTURE_COMPLETE ) != 0)
 2394              		.loc 1 902 0
 2395 11c4 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 2396 11c6 03F00403 		and	r3, r3, #4
 2397 11ca 002B     		cmp	r3, #0
 2398 11cc 3EF41FAF 		beq	.L116
 903:main.c        **** 		{
 904:main.c        **** 			ending_offset = GetLastSampleIndex(DMA_Channel_1_Chan);
 2399              		.loc 1 904 0
 2400 11d0 104B     		ldr	r3, .L136+12
 2401 11d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2402 11d4 1846     		mov	r0, r3
 2403 11d6 FFF7FEFF 		bl	GetLastSampleIndex
 2404 11da 0346     		mov	r3, r0
 2405 11dc FB80     		strh	r3, [r7, #6]	@ movhi
 905:main.c        **** 			
 906:main.c        **** 			// return the capture info
 907:main.c        **** 			PutChar('A');
 2406              		.loc 1 907 0
 2407 11de 4120     		movs	r0, #65
 2408 11e0 FFF7FEFF 		bl	PutChar
 908:main.c        **** 			PutChar((uint8) ((ending_offset >> 8) & 0x000F)); // address of the end, MSbits
 2409              		.loc 1 908 0
 2410 11e4 FB88     		ldrh	r3, [r7, #6]
 2411 11e6 1B0A     		lsrs	r3, r3, #8
 2412 11e8 9BB2     		uxth	r3, r3
 2413 11ea DBB2     		uxtb	r3, r3
 2414 11ec 03F00F03 		and	r3, r3, #15
 2415 11f0 DBB2     		uxtb	r3, r3
 2416 11f2 1846     		mov	r0, r3
 2417 11f4 FFF7FEFF 		bl	PutChar
 909:main.c        **** 			PutChar((uint8) (ending_offset & 0x00FF)); // address of the end, LSbits
 2418              		.loc 1 909 0
 2419 11f8 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2420 11fa DBB2     		uxtb	r3, r3
 2421 11fc 1846     		mov	r0, r3
 2422 11fe FFF7FEFF 		bl	PutChar
 910:main.c        **** 			//PutChar('\n'); // terminate the return data, through testing, there is no need to send this ch
 911:main.c        **** 		}
 912:main.c        **** 
 913:main.c        **** //		// digital input update
 914:main.c        **** //		if((Digital_Input_Status_Last != Digital_Input_Status_Read()) && (Digital_AutoUpdate != 0))
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 60


 915:main.c        **** //		{
 916:main.c        **** //			PutChar('I');
 917:main.c        **** //			PutChar((uint8) Digital_Input_Status_Read());
 918:main.c        **** //			Digital_Input_Status_Last = Digital_Input_Status_Read();
 919:main.c        **** //		}
 920:main.c        **** 	}
 2423              		.loc 1 920 0
 2424 1202 FEF704BF 		b	.L116
 2425              	.L137:
 2426 1206 00BF     		.align	2
 2427              	.L136:
 2428 1208 1C000000 		.word	.LC3
 2429 120c 40000000 		.word	.LC4
 2430 1210 00000000 		.word	bCommandReady
 2431 1214 00000000 		.word	DMA_Channel_1_Chan
 2432              		.cfi_endproc
 2433              	.LFE64:
 2434              		.size	main, .-main
 2435              		.section	.text.Hardware_Config,"ax",%progbits
 2436              		.align	2
 2437              		.global	Hardware_Config
 2438              		.thumb
 2439              		.thumb_func
 2440              		.type	Hardware_Config, %function
 2441              	Hardware_Config:
 2442              	.LFB65:
 921:main.c        **** }
 922:main.c        **** 
 923:main.c        **** void Hardware_Config(void)
 924:main.c        **** {
 2443              		.loc 1 924 0
 2444              		.cfi_startproc
 2445              		@ args = 0, pretend = 0, frame = 0
 2446              		@ frame_needed = 1, uses_anonymous_args = 0
 2447 0000 80B5     		push	{r7, lr}
 2448              		.cfi_def_cfa_offset 8
 2449              		.cfi_offset 7, -8
 2450              		.cfi_offset 14, -4
 2451 0002 00AF     		add	r7, sp, #0
 2452              		.cfi_def_cfa_register 7
 925:main.c        ****     CyGlobalIntEnable;
 2453              		.loc 1 925 0
 2454              		.syntax unified
 2455              	@ 925 "main.c" 1
 2456 0004 62B6     		CPSIE   i
 2457              	@ 0 "" 2
 926:main.c        **** 	
 927:main.c        **** 	cCommandsReady = 0;
 2458              		.loc 1 927 0
 2459              		.thumb
 2460              		.syntax unified
 2461 0006 4B4B     		ldr	r3, .L140
 2462 0008 0022     		movs	r2, #0
 2463 000a 1A80     		strh	r2, [r3]	@ movhi
 928:main.c        **** 	bCommandReady = 0;
 2464              		.loc 1 928 0
 2465 000c 4A4B     		ldr	r3, .L140+4
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 61


 2466 000e 0022     		movs	r2, #0
 2467 0010 1A70     		strb	r2, [r3]
 929:main.c        ****     
 930:main.c        ****     USBUART_Start(0, USBUART_5V_OPERATION);
 2468              		.loc 1 930 0
 2469 0012 0121     		movs	r1, #1
 2470 0014 0020     		movs	r0, #0
 2471 0016 FFF7FEFF 		bl	USBUART_Start
 931:main.c        **** 	while(!USBUART_GetConfiguration())
 2472              		.loc 1 931 0
 2473 001a 00BF     		nop
 2474              	.L139:
 2475              		.loc 1 931 0 is_stmt 0 discriminator 1
 2476 001c FFF7FEFF 		bl	USBUART_GetConfiguration
 2477 0020 0346     		mov	r3, r0
 2478 0022 002B     		cmp	r3, #0
 2479 0024 FAD0     		beq	.L139
 932:main.c        ****     {
 933:main.c        ****         /* Wait for USBUART to complete configuration */
 934:main.c        ****     }
 935:main.c        ****     USBUART_CDC_Init();
 2480              		.loc 1 935 0 is_stmt 1
 2481 0026 FFF7FEFF 		bl	USBUART_CDC_Init
 936:main.c        **** 	
 937:main.c        **** 	Amux_Trigger_Select(SCOPE_CHANNEL_1);
 2482              		.loc 1 937 0
 2483 002a 0020     		movs	r0, #0
 2484 002c FFF7FEFF 		bl	Amux_Trigger_FastSelect
 938:main.c        ****     
 939:main.c        ****     ADC_1_Start();
 2485              		.loc 1 939 0
 2486 0030 FFF7FEFF 		bl	ADC_1_Start
 940:main.c        ****     ADC_2_Start();
 2487              		.loc 1 940 0
 2488 0034 FFF7FEFF 		bl	ADC_2_Start
 941:main.c        ****     ScopeA_Buf_Start();
 2489              		.loc 1 941 0
 2490 0038 FFF7FEFF 		bl	ScopeA_Buf_Start
 942:main.c        ****     ScopeB_Buf_Start();
 2491              		.loc 1 942 0
 2492 003c FFF7FEFF 		bl	ScopeB_Buf_Start
 943:main.c        ****     ScopeC_Buf_Start();
 2493              		.loc 1 943 0
 2494 0040 FFF7FEFF 		bl	ScopeC_Buf_Start
 944:main.c        ****     ScopeD_Buf_Start();
 2495              		.loc 1 944 0
 2496 0044 FFF7FEFF 		bl	ScopeD_Buf_Start
 945:main.c        ****     Vtrigger_Start();
 2497              		.loc 1 945 0
 2498 0048 FFF7FEFF 		bl	Vtrigger_Start
 946:main.c        ****     Trigger_Comp_Start();
 2499              		.loc 1 946 0
 2500 004c FFF7FEFF 		bl	Trigger_Comp_Start
 947:main.c        ****     
 948:main.c        ****     // The extras
 949:main.c        ****     AuxDAC_Buf_Start();
 2501              		.loc 1 949 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 62


 2502 0050 FFF7FEFF 		bl	AuxDAC_Buf_Start
 950:main.c        ****     AuxDAC_1_Start();
 2503              		.loc 1 950 0
 2504 0054 FFF7FEFF 		bl	AuxDAC_1_Start
 951:main.c        ****     
 952:main.c        ****     PWM_Sample_Buffer_Start();
 2505              		.loc 1 952 0
 2506 0058 FFF7FEFF 		bl	PWM_Sample_Buffer_Start
 953:main.c        **** 	// update the period to match the trigger buffer size for maximum post trigger capture
 954:main.c        **** 	PWM_Sample_Buffer_WritePeriod(BUFFER_SIZE-1); // maximum post trigger buffer
 2507              		.loc 1 954 0
 2508 005c 40F2FF30 		movw	r0, #1023
 2509 0060 FFF7FEFF 		bl	PWM_Sample_Buffer_WritePeriod
 955:main.c        **** 	//PWM_Sample_Buffer_WritePeriod(2); // minimum post trigger buffer, 3 samples after trigger (used 
 956:main.c        **** 	// after setting the period, need to set the count to the proper value as well
 957:main.c        **** 	PWM_Sample_Buffer_WriteCounter(BUFFER_SIZE-1); // maximum post trigger buffer
 2510              		.loc 1 957 0
 2511 0064 40F2FF30 		movw	r0, #1023
 2512 0068 FFF7FEFF 		bl	PWM_Sample_Buffer_WriteCounter
 958:main.c        **** 	//PWM_Sample_Buffer_WriteCounter(2); // minimum post trigger buffer, 3 samples after trigger
 959:main.c        **** 	
 960:main.c        ****     ScopeA_Buf_SetGain(0);
 2513              		.loc 1 960 0
 2514 006c 0020     		movs	r0, #0
 2515 006e FFF7FEFF 		bl	ScopeA_Buf_SetGain
 961:main.c        ****     ScopeB_Buf_SetGain(0);
 2516              		.loc 1 961 0
 2517 0072 0020     		movs	r0, #0
 2518 0074 FFF7FEFF 		bl	ScopeB_Buf_SetGain
 962:main.c        ****     ScopeC_Buf_SetGain(0);
 2519              		.loc 1 962 0
 2520 0078 0020     		movs	r0, #0
 2521 007a FFF7FEFF 		bl	ScopeC_Buf_SetGain
 963:main.c        ****     ScopeD_Buf_SetGain(0);
 2522              		.loc 1 963 0
 2523 007e 0020     		movs	r0, #0
 2524 0080 FFF7FEFF 		bl	ScopeD_Buf_SetGain
 964:main.c        ****     
 965:main.c        **** 	trigger_source = SCOPE_CHANNEL_1;
 2525              		.loc 1 965 0
 2526 0084 2D4B     		ldr	r3, .L140+8
 2527 0086 0022     		movs	r2, #0
 2528 0088 1A70     		strb	r2, [r3]
 966:main.c        ****     
 967:main.c        **** 	// basic configuration is trigger on the rising edge of channel 0
 968:main.c        **** 	Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 2529              		.loc 1 968 0
 2530 008a FFF7FEFF 		bl	Trigger_Control_Read
 2531 008e 0346     		mov	r3, r0
 2532 0090 23F00F03 		bic	r3, r3, #15
 2533 0094 DBB2     		uxtb	r3, r3
 2534 0096 1846     		mov	r0, r3
 2535 0098 FFF7FEFF 		bl	Trigger_Control_Write
 969:main.c        ****     Trigger_Control_Write(Trigger_Control_Read() | RISING_EDGE_TRIGGERED);
 2536              		.loc 1 969 0
 2537 009c FFF7FEFF 		bl	Trigger_Control_Read
 2538 00a0 0346     		mov	r3, r0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 63


 2539 00a2 43F00203 		orr	r3, r3, #2
 2540 00a6 DBB2     		uxtb	r3, r3
 2541 00a8 1846     		mov	r0, r3
 2542 00aa FFF7FEFF 		bl	Trigger_Control_Write
 970:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | FALLING_EDGE_TRIGGERED);
 971:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | EITHER_EDGE_TRIGGERED);
 972:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | EXTERNAL_TRIGGERED);
 973:main.c        **** 	
 974:main.c        **** 	// waveform generator control
 975:main.c        **** 	Wave_Control_Write(Wave_Control_Read() & ~WAVEA_SELECT_MASK);
 2543              		.loc 1 975 0
 2544 00ae FFF7FEFF 		bl	Wave_Control_Read
 2545 00b2 0346     		mov	r3, r0
 2546 00b4 23F00103 		bic	r3, r3, #1
 2547 00b8 DBB2     		uxtb	r3, r3
 2548 00ba 1846     		mov	r0, r3
 2549 00bc FFF7FEFF 		bl	Wave_Control_Write
 976:main.c        **** 	Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 2550              		.loc 1 976 0
 2551 00c0 FFF7FEFF 		bl	Wave_Control_Read
 2552 00c4 0346     		mov	r3, r0
 2553 00c6 1846     		mov	r0, r3
 2554 00c8 FFF7FEFF 		bl	Wave_Control_Write
 977:main.c        **** 	// Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_NOISE);
 978:main.c        **** 	WaveA_DAC_Start();
 2555              		.loc 1 978 0
 2556 00cc FFF7FEFF 		bl	WaveA_DAC_Start
 979:main.c        **** 	WaveA_Buf_Start();
 2557              		.loc 1 979 0
 2558 00d0 FFF7FEFF 		bl	WaveA_Buf_Start
 980:main.c        ****     WaveB_DAC_Start();
 2559              		.loc 1 980 0
 2560 00d4 FFF7FEFF 		bl	WaveB_DAC_Start
 981:main.c        **** 	WaveB_Buf_Start();
 2561              		.loc 1 981 0
 2562 00d8 FFF7FEFF 		bl	WaveB_Buf_Start
 982:main.c        **** 	WaveA_DAC_Wave1Setup(&WaveformA_Buffer[0], WAVEFORM_BUFFER_SIZE);
 2563              		.loc 1 982 0
 2564 00dc 4FF40061 		mov	r1, #2048
 2565 00e0 1748     		ldr	r0, .L140+12
 2566 00e2 FFF7FEFF 		bl	WaveA_DAC_Wave1Setup
 983:main.c        **** 	wavea_gain = 0;
 2567              		.loc 1 983 0
 2568 00e6 174B     		ldr	r3, .L140+16
 2569 00e8 0022     		movs	r2, #0
 2570 00ea 1A70     		strb	r2, [r3]
 984:main.c        **** 	WaveB_DAC_Wave1Setup(&WaveformB_Buffer[0], WAVEFORM_BUFFER_SIZE);
 2571              		.loc 1 984 0
 2572 00ec 4FF40061 		mov	r1, #2048
 2573 00f0 1548     		ldr	r0, .L140+20
 2574 00f2 FFF7FEFF 		bl	WaveB_DAC_Wave1Setup
 985:main.c        **** 	waveb_gain = 0;
 2575              		.loc 1 985 0
 2576 00f6 154B     		ldr	r3, .L140+24
 2577 00f8 0022     		movs	r2, #0
 2578 00fa 1A70     		strb	r2, [r3]
 986:main.c        ****     
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 64


 987:main.c        **** 	PRS_Start();
 2579              		.loc 1 987 0
 2580 00fc FFF7FEFF 		bl	PRS_Start
 988:main.c        ****     //
 989:main.c        ****     // Change noise output to use value adjusted for amplitude/offset
 990:main.c        **** 	//Wave_DAC_Wave2Setup((uint8 *) PRS_SEED_PTR, 1);
 991:main.c        ****     WaveA_DAC_Wave2Setup(&Noise_Adjusted, 1);
 2581              		.loc 1 991 0
 2582 0100 0121     		movs	r1, #1
 2583 0102 1348     		ldr	r0, .L140+28
 2584 0104 FFF7FEFF 		bl	WaveA_DAC_Wave2Setup
 992:main.c        ****     WaveB_DAC_Wave2Setup(&Noise_Adjusted, 1);
 2585              		.loc 1 992 0
 2586 0108 0121     		movs	r1, #1
 2587 010a 1148     		ldr	r0, .L140+28
 2588 010c FFF7FEFF 		bl	WaveB_DAC_Wave2Setup
 993:main.c        ****     //
 994:main.c        **** //  digital IO initializations
 995:main.c        **** //	Digital_Input_Status_Last = 0;
 996:main.c        ****     Digital_Out_Control_Write(0);
 2589              		.loc 1 996 0
 2590 0110 0020     		movs	r0, #0
 2591 0112 FFF7FEFF 		bl	Digital_Out_Control_Write
 997:main.c        **** 	Digital_AutoUpdate = 0;
 2592              		.loc 1 997 0
 2593 0116 0F4B     		ldr	r3, .L140+32
 2594 0118 0022     		movs	r2, #0
 2595 011a 1A70     		strb	r2, [r3]
 998:main.c        **** //	
 999:main.c        **** 	Dig_PWM_Start();
 2596              		.loc 1 999 0
 2597 011c FFF7FEFF 		bl	Dig_PWM_Start
1000:main.c        ****     Dig_PWM_Enable();
 2598              		.loc 1 1000 0
 2599 0120 FFF7FEFF 		bl	Dig_PWM_Enable
1001:main.c        ****     Dig_PWM_Clock_Start();
 2600              		.loc 1 1001 0
 2601 0124 FFF7FEFF 		bl	Dig_PWM_Clock_Start
1002:main.c        ****     Dig_PWM_Clock_SetDividerValue(128);
 2602              		.loc 1 1002 0
 2603 0128 0121     		movs	r1, #1
 2604 012a 7F20     		movs	r0, #127
 2605 012c FFF7FEFF 		bl	Dig_PWM_Clock_SetDividerRegister
1003:main.c        **** }
 2606              		.loc 1 1003 0
 2607 0130 00BF     		nop
 2608 0132 80BD     		pop	{r7, pc}
 2609              	.L141:
 2610              		.align	2
 2611              	.L140:
 2612 0134 00000000 		.word	cCommandsReady
 2613 0138 00000000 		.word	bCommandReady
 2614 013c 00000000 		.word	trigger_source
 2615 0140 00000000 		.word	WaveformA_Buffer
 2616 0144 00000000 		.word	wavea_gain
 2617 0148 00000000 		.word	WaveformB_Buffer
 2618 014c 00000000 		.word	waveb_gain
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 65


 2619 0150 00000000 		.word	Noise_Adjusted
 2620 0154 00000000 		.word	Digital_AutoUpdate
 2621              		.cfi_endproc
 2622              	.LFE65:
 2623              		.size	Hardware_Config, .-Hardware_Config
 2624              		.section	.text.DMA_Config,"ax",%progbits
 2625              		.align	2
 2626              		.global	DMA_Config
 2627              		.thumb
 2628              		.thumb_func
 2629              		.type	DMA_Config, %function
 2630              	DMA_Config:
 2631              	.LFB66:
1004:main.c        **** 
1005:main.c        **** void DMA_Config(void)
1006:main.c        **** {
 2632              		.loc 1 1006 0
 2633              		.cfi_startproc
 2634              		@ args = 0, pretend = 0, frame = 0
 2635              		@ frame_needed = 1, uses_anonymous_args = 0
 2636 0000 80B5     		push	{r7, lr}
 2637              		.cfi_def_cfa_offset 8
 2638              		.cfi_offset 7, -8
 2639              		.cfi_offset 14, -4
 2640 0002 00AF     		add	r7, sp, #0
 2641              		.cfi_def_cfa_register 7
1007:main.c        ****     DMA_Channel_1_Chan = DMA_Channel_1_DmaInitialize(DMA_Channel_1_BYTES_PER_BURST, DMA_Channel_1_R
 2642              		.loc 1 1007 0
 2643 0004 41F6FF73 		movw	r3, #8191
 2644 0008 4FF48042 		mov	r2, #16384
 2645 000c 0121     		movs	r1, #1
 2646 000e 0220     		movs	r0, #2
 2647 0010 FFF7FEFF 		bl	DMA_Channel_1_DmaInitialize
 2648 0014 0346     		mov	r3, r0
 2649 0016 1A46     		mov	r2, r3
 2650 0018 3F4B     		ldr	r3, .L144
 2651 001a 1A70     		strb	r2, [r3]
1008:main.c        ****         HI16(DMA_Channel_1_SRC_BASE), HI16(DMA_Channel_1_DST_BASE));
1009:main.c        ****     DMA_Channel_1_TD[0] = CyDmaTdAllocate();
 2652              		.loc 1 1009 0
 2653 001c FFF7FEFF 		bl	CyDmaTdAllocate
 2654 0020 0346     		mov	r3, r0
 2655 0022 1A46     		mov	r2, r3
 2656 0024 3D4B     		ldr	r3, .L144+4
 2657 0026 1A70     		strb	r2, [r3]
1010:main.c        ****     CyDmaTdSetConfiguration(DMA_Channel_1_TD[0], BUFFER_SIZE*sizeof(int16), DMA_Channel_1_TD[0], DM
 2658              		.loc 1 1010 0
 2659 0028 3C4B     		ldr	r3, .L144+4
 2660 002a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2661 002c 3B4B     		ldr	r3, .L144+4
 2662 002e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2663 0030 0623     		movs	r3, #6
 2664 0032 4FF40061 		mov	r1, #2048
 2665 0036 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1011:main.c        ****     CyDmaTdSetAddress(DMA_Channel_1_TD[0], LO16((uint32)ADC_1_SAR_WRK0_PTR), LO16((uint32)&Channel_
 2666              		.loc 1 1011 0
 2667 003a 384B     		ldr	r3, .L144+4
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 66


 2668 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2669 003e 384A     		ldr	r2, .L144+8
 2670 0040 92B2     		uxth	r2, r2
 2671 0042 45F6A231 		movw	r1, #23458
 2672 0046 1846     		mov	r0, r3
 2673 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
1012:main.c        ****     CyDmaChSetInitialTd(DMA_Channel_1_Chan, DMA_Channel_1_TD[0]);
 2674              		.loc 1 1012 0
 2675 004c 324B     		ldr	r3, .L144
 2676 004e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2677 0050 324B     		ldr	r3, .L144+4
 2678 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2679 0054 1946     		mov	r1, r3
 2680 0056 1046     		mov	r0, r2
 2681 0058 FFF7FEFF 		bl	CyDmaChSetInitialTd
1013:main.c        ****     CyDmaChRoundRobin(DMA_Channel_1_Chan, 1);
 2682              		.loc 1 1013 0
 2683 005c 2E4B     		ldr	r3, .L144
 2684 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2685 0060 0121     		movs	r1, #1
 2686 0062 1846     		mov	r0, r3
 2687 0064 FFF7FEFF 		bl	CyDmaChRoundRobin
1014:main.c        ****     CyDmaChSetRequest(DMA_Channel_1_Chan, CPU_TERM_CHAIN);
 2688              		.loc 1 1014 0
 2689 0068 2B4B     		ldr	r3, .L144
 2690 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2691 006c 0421     		movs	r1, #4
 2692 006e 1846     		mov	r0, r3
 2693 0070 FFF7FEFF 		bl	CyDmaChSetRequest
1015:main.c        ****     CyDmaChEnable(DMA_Channel_1_Chan, 1);
 2694              		.loc 1 1015 0
 2695 0074 284B     		ldr	r3, .L144
 2696 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2697 0078 0121     		movs	r1, #1
 2698 007a 1846     		mov	r0, r3
 2699 007c FFF7FEFF 		bl	CyDmaChEnable
1016:main.c        ****     CyDmaChEnable(DMA_Channel_1_Chan, 1);
 2700              		.loc 1 1016 0
 2701 0080 254B     		ldr	r3, .L144
 2702 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2703 0084 0121     		movs	r1, #1
 2704 0086 1846     		mov	r0, r3
 2705 0088 FFF7FEFF 		bl	CyDmaChEnable
1017:main.c        **** 
1018:main.c        ****     DMA_Channel_2_Chan = DMA_Channel_2_DmaInitialize(DMA_Channel_2_BYTES_PER_BURST, DMA_Channel_2_R
 2706              		.loc 1 1018 0
 2707 008c 41F6FF73 		movw	r3, #8191
 2708 0090 4FF48042 		mov	r2, #16384
 2709 0094 0121     		movs	r1, #1
 2710 0096 0220     		movs	r0, #2
 2711 0098 FFF7FEFF 		bl	DMA_Channel_2_DmaInitialize
 2712 009c 0346     		mov	r3, r0
 2713 009e 1A46     		mov	r2, r3
 2714 00a0 204B     		ldr	r3, .L144+12
 2715 00a2 1A70     		strb	r2, [r3]
1019:main.c        ****         HI16(DMA_Channel_2_SRC_BASE), HI16(DMA_Channel_2_DST_BASE));
1020:main.c        ****     DMA_Channel_2_TD[0] = CyDmaTdAllocate();
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 67


 2716              		.loc 1 1020 0
 2717 00a4 FFF7FEFF 		bl	CyDmaTdAllocate
 2718 00a8 0346     		mov	r3, r0
 2719 00aa 1A46     		mov	r2, r3
 2720 00ac 1E4B     		ldr	r3, .L144+16
 2721 00ae 1A70     		strb	r2, [r3]
1021:main.c        ****     CyDmaTdSetConfiguration(DMA_Channel_2_TD[0], BUFFER_SIZE*sizeof(int16), DMA_Channel_2_TD[0], DM
 2722              		.loc 1 1021 0
 2723 00b0 1D4B     		ldr	r3, .L144+16
 2724 00b2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2725 00b4 1C4B     		ldr	r3, .L144+16
 2726 00b6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2727 00b8 0223     		movs	r3, #2
 2728 00ba 4FF40061 		mov	r1, #2048
 2729 00be FFF7FEFF 		bl	CyDmaTdSetConfiguration
1022:main.c        ****     CyDmaTdSetAddress(DMA_Channel_2_TD[0], LO16((uint32)ADC_2_SAR_WRK0_PTR), LO16((uint32)&Channel_
 2730              		.loc 1 1022 0
 2731 00c2 194B     		ldr	r3, .L144+16
 2732 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2733 00c6 194A     		ldr	r2, .L144+20
 2734 00c8 92B2     		uxth	r2, r2
 2735 00ca 45F6A031 		movw	r1, #23456
 2736 00ce 1846     		mov	r0, r3
 2737 00d0 FFF7FEFF 		bl	CyDmaTdSetAddress
1023:main.c        ****     CyDmaChSetInitialTd(DMA_Channel_2_Chan, DMA_Channel_2_TD[0]);
 2738              		.loc 1 1023 0
 2739 00d4 134B     		ldr	r3, .L144+12
 2740 00d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2741 00d8 134B     		ldr	r3, .L144+16
 2742 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2743 00dc 1946     		mov	r1, r3
 2744 00de 1046     		mov	r0, r2
 2745 00e0 FFF7FEFF 		bl	CyDmaChSetInitialTd
1024:main.c        ****     CyDmaChRoundRobin(DMA_Channel_2_Chan, 1);
 2746              		.loc 1 1024 0
 2747 00e4 0F4B     		ldr	r3, .L144+12
 2748 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2749 00e8 0121     		movs	r1, #1
 2750 00ea 1846     		mov	r0, r3
 2751 00ec FFF7FEFF 		bl	CyDmaChRoundRobin
1025:main.c        ****     CyDmaChSetRequest(DMA_Channel_2_Chan, CPU_TERM_CHAIN);
 2752              		.loc 1 1025 0
 2753 00f0 0C4B     		ldr	r3, .L144+12
 2754 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2755 00f4 0421     		movs	r1, #4
 2756 00f6 1846     		mov	r0, r3
 2757 00f8 FFF7FEFF 		bl	CyDmaChSetRequest
1026:main.c        ****     CyDmaChEnable(DMA_Channel_2_Chan, 1);
 2758              		.loc 1 1026 0
 2759 00fc 094B     		ldr	r3, .L144+12
 2760 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2761 0100 0121     		movs	r1, #1
 2762 0102 1846     		mov	r0, r3
 2763 0104 FFF7FEFF 		bl	CyDmaChEnable
1027:main.c        ****     CyDmaChEnable(DMA_Channel_2_Chan, 1);
 2764              		.loc 1 1027 0
 2765 0108 064B     		ldr	r3, .L144+12
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 68


 2766 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2767 010c 0121     		movs	r1, #1
 2768 010e 1846     		mov	r0, r3
 2769 0110 FFF7FEFF 		bl	CyDmaChEnable
1028:main.c        **** 
1029:main.c        ****     return;
 2770              		.loc 1 1029 0
 2771 0114 00BF     		nop
1030:main.c        **** }
 2772              		.loc 1 1030 0
 2773 0116 80BD     		pop	{r7, pc}
 2774              	.L145:
 2775              		.align	2
 2776              	.L144:
 2777 0118 00000000 		.word	DMA_Channel_1_Chan
 2778 011c 00000000 		.word	DMA_Channel_1_TD
 2779 0120 00000000 		.word	Channel_1_Data
 2780 0124 00000000 		.word	DMA_Channel_2_Chan
 2781 0128 00000000 		.word	DMA_Channel_2_TD
 2782 012c 00000000 		.word	Channel_2_Data
 2783              		.cfi_endproc
 2784              	.LFE66:
 2785              		.size	DMA_Config, .-DMA_Config
 2786              		.section	.text.GetLastSampleIndex,"ax",%progbits
 2787              		.align	2
 2788              		.global	GetLastSampleIndex
 2789              		.thumb
 2790              		.thumb_func
 2791              		.type	GetLastSampleIndex, %function
 2792              	GetLastSampleIndex:
 2793              	.LFB67:
1031:main.c        **** 
1032:main.c        **** // returns the address of the first sample in the circular DMA buffer
1033:main.c        **** 
1034:main.c        **** uint16 GetLastSampleIndex(uint8 chHandle)
1035:main.c        **** {
 2794              		.loc 1 1035 0
 2795              		.cfi_startproc
 2796              		@ args = 0, pretend = 0, frame = 16
 2797              		@ frame_needed = 1, uses_anonymous_args = 0
 2798              		@ link register save eliminated.
 2799 0000 80B4     		push	{r7}
 2800              		.cfi_def_cfa_offset 4
 2801              		.cfi_offset 7, -4
 2802 0002 85B0     		sub	sp, sp, #20
 2803              		.cfi_def_cfa_offset 24
 2804 0004 00AF     		add	r7, sp, #0
 2805              		.cfi_def_cfa_register 7
 2806 0006 0346     		mov	r3, r0
 2807 0008 FB71     		strb	r3, [r7, #7]
1036:main.c        **** 	uint16 index;
1037:main.c        **** 
1038:main.c        **** 	// get the upper 16 bits of the destination (not strictly necessary) (actually it doesn't work sin
1039:main.c        **** 	// upper 16 bit addresses for the same RAM information
1040:main.c        **** 	//dest_address = (((uint32) CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG1[3]) << 24) | (((uint32) CY_DMA
1041:main.c        **** 	
1042:main.c        **** 	// grab the lower 16 bits of the destination address
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 69


1043:main.c        **** 	// the assumption here is that "work seperate" has been enabled, so a copy of the TD is stored in 
1044:main.c        **** 	index = ((uint32) CY_DMA_TDMEM_STRUCT_PTR[chHandle].TD1[3] << 8) | ((uint32) CY_DMA_TDMEM_STRUCT_P
 2808              		.loc 1 1044 0
 2809 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2810 000c DB00     		lsls	r3, r3, #3
 2811 000e 03F18043 		add	r3, r3, #1073741824
 2812 0012 03F5F043 		add	r3, r3, #30720
 2813 0016 DB79     		ldrb	r3, [r3, #7]
 2814 0018 DBB2     		uxtb	r3, r3
 2815 001a 9BB2     		uxth	r3, r3
 2816 001c 1B02     		lsls	r3, r3, #8
 2817 001e 9AB2     		uxth	r2, r3
 2818 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2819 0022 DB00     		lsls	r3, r3, #3
 2820 0024 03F18043 		add	r3, r3, #1073741824
 2821 0028 03F5F043 		add	r3, r3, #30720
 2822 002c 9B79     		ldrb	r3, [r3, #6]
 2823 002e DBB2     		uxtb	r3, r3
 2824 0030 9BB2     		uxth	r3, r3
 2825 0032 1343     		orrs	r3, r3, r2
 2826 0034 FB81     		strh	r3, [r7, #14]	@ movhi
1045:main.c        **** 	
1046:main.c        **** 	// calculate the index by taking the difference between the starting and ending destination addres
1047:main.c        **** 	index = (index - sizeof(int16) - LO16((uint32) &Channel_1_Data[0]))/sizeof(int16) % BUFFER_SIZE;
 2827              		.loc 1 1047 0
 2828 0036 FA89     		ldrh	r2, [r7, #14]
 2829 0038 084B     		ldr	r3, .L148
 2830 003a 99B2     		uxth	r1, r3
 2831 003c 6FF00103 		mvn	r3, #1
 2832 0040 5B1A     		subs	r3, r3, r1
 2833 0042 1344     		add	r3, r3, r2
 2834 0044 5B08     		lsrs	r3, r3, #1
 2835 0046 9BB2     		uxth	r3, r3
 2836 0048 C3F30903 		ubfx	r3, r3, #0, #10
 2837 004c FB81     		strh	r3, [r7, #14]	@ movhi
1048:main.c        **** 	
1049:main.c        **** 	return index;
 2838              		.loc 1 1049 0
 2839 004e FB89     		ldrh	r3, [r7, #14]
1050:main.c        **** }
 2840              		.loc 1 1050 0
 2841 0050 1846     		mov	r0, r3
 2842 0052 1437     		adds	r7, r7, #20
 2843              		.cfi_def_cfa_offset 4
 2844 0054 BD46     		mov	sp, r7
 2845              		.cfi_def_cfa_register 13
 2846              		@ sp needed
 2847 0056 80BC     		pop	{r7}
 2848              		.cfi_restore 7
 2849              		.cfi_def_cfa_offset 0
 2850 0058 7047     		bx	lr
 2851              	.L149:
 2852 005a 00BF     		.align	2
 2853              	.L148:
 2854 005c 00000000 		.word	Channel_1_Data
 2855              		.cfi_endproc
 2856              	.LFE67:
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 70


 2857              		.size	GetLastSampleIndex, .-GetLastSampleIndex
 2858              		.section	.text.CommandCheck,"ax",%progbits
 2859              		.align	2
 2860              		.global	CommandCheck
 2861              		.thumb
 2862              		.thumb_func
 2863              		.type	CommandCheck, %function
 2864              	CommandCheck:
 2865              	.LFB68:
1051:main.c        **** 
1052:main.c        **** void CommandCheck(void)
1053:main.c        **** {
 2866              		.loc 1 1053 0
 2867              		.cfi_startproc
 2868              		@ args = 0, pretend = 0, frame = 8
 2869              		@ frame_needed = 1, uses_anonymous_args = 0
 2870 0000 80B5     		push	{r7, lr}
 2871              		.cfi_def_cfa_offset 8
 2872              		.cfi_offset 7, -8
 2873              		.cfi_offset 14, -4
 2874 0002 82B0     		sub	sp, sp, #8
 2875              		.cfi_def_cfa_offset 16
 2876 0004 00AF     		add	r7, sp, #0
 2877              		.cfi_def_cfa_register 7
1054:main.c        **** 	uint16 i, ReceivedBytes;
1055:main.c        **** 	// check to see if line state has changed? thought this might be necessary, but it probably isn't
1056:main.c        **** 	USBUART_IsLineChanged();
 2878              		.loc 1 1056 0
 2879 0006 FFF7FEFF 		bl	USBUART_IsLineChanged
1057:main.c        **** 	
1058:main.c        **** 	// if data is waiting
1059:main.c        **** 	if(USBUART_DataIsReady() != 0)
 2880              		.loc 1 1059 0
 2881 000a FFF7FEFF 		bl	USBUART_DataIsReady
 2882 000e 0346     		mov	r3, r0
 2883 0010 002B     		cmp	r3, #0
 2884 0012 5AD0     		beq	.L151
1060:main.c        **** 	{
1061:main.c        **** 		// lets find out how much the PC sent to us
1062:main.c        **** 		ReceivedBytes = USBUART_GetCount();
 2885              		.loc 1 1062 0
 2886 0014 FFF7FEFF 		bl	USBUART_GetCount
 2887 0018 0346     		mov	r3, r0
 2888 001a BB80     		strh	r3, [r7, #4]	@ movhi
1063:main.c        **** 		
1064:main.c        **** 		// if the amount of data received is non-zero
1065:main.c        **** 		if(ReceivedBytes != 0)
 2889              		.loc 1 1065 0
 2890 001c BB88     		ldrh	r3, [r7, #4]
 2891 001e 002B     		cmp	r3, #0
 2892 0020 07D0     		beq	.L152
1066:main.c        **** 		{
1067:main.c        **** 			cCharsReceived = USBUART_GetAll((uint8 *) &szTempBuffer[0]);
 2893              		.loc 1 1067 0
 2894 0022 4F48     		ldr	r0, .L163
 2895 0024 FFF7FEFF 		bl	USBUART_GetAll
 2896 0028 0346     		mov	r3, r0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 71


 2897 002a DAB2     		uxtb	r2, r3
 2898 002c 4D4B     		ldr	r3, .L163+4
 2899 002e 1A70     		strb	r2, [r3]
 2900 0030 02E0     		b	.L153
 2901              	.L152:
1068:main.c        **** 		}
1069:main.c        **** 		else
1070:main.c        **** 		{
1071:main.c        **** 			// its a zero length data packet, it *should* be safe to do this and not worry about corrupting 
1072:main.c        **** 			USBUART_GetAll((uint8 *) &szTempBuffer[0]);
 2902              		.loc 1 1072 0
 2903 0032 4B48     		ldr	r0, .L163
 2904 0034 FFF7FEFF 		bl	USBUART_GetAll
 2905              	.L153:
1073:main.c        **** 			//PutString("Zero Length Packet\n");
1074:main.c        **** 		}
1075:main.c        **** 		
1076:main.c        **** 		// move the data from the temporary buffer into the circular command buffer
1077:main.c        **** 		i = 0;
 2906              		.loc 1 1077 0
 2907 0038 0023     		movs	r3, #0
 2908 003a FB80     		strh	r3, [r7, #6]	@ movhi
 2909              	.L155:
1078:main.c        **** 		do
1079:main.c        **** 		{
1080:main.c        **** 			szCommandsBuffer[iWrite] = szTempBuffer[i];
 2910              		.loc 1 1080 0 discriminator 2
 2911 003c 4A4B     		ldr	r3, .L163+8
 2912 003e 1B88     		ldrh	r3, [r3]
 2913 0040 1946     		mov	r1, r3
 2914 0042 FB88     		ldrh	r3, [r7, #6]
 2915 0044 464A     		ldr	r2, .L163
 2916 0046 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 2917 0048 484B     		ldr	r3, .L163+12
 2918 004a 5A54     		strb	r2, [r3, r1]
1081:main.c        **** 			i++;
 2919              		.loc 1 1081 0 discriminator 2
 2920 004c FB88     		ldrh	r3, [r7, #6]
 2921 004e 0133     		adds	r3, r3, #1
 2922 0050 FB80     		strh	r3, [r7, #6]	@ movhi
1082:main.c        **** 			iWrite++;
 2923              		.loc 1 1082 0 discriminator 2
 2924 0052 454B     		ldr	r3, .L163+8
 2925 0054 1B88     		ldrh	r3, [r3]
 2926 0056 0133     		adds	r3, r3, #1
 2927 0058 9AB2     		uxth	r2, r3
 2928 005a 434B     		ldr	r3, .L163+8
 2929 005c 1A80     		strh	r2, [r3]	@ movhi
1083:main.c        **** 			iWrite = iWrite % CIRCULAR_BUFFER_SIZE;
 2930              		.loc 1 1083 0 discriminator 2
 2931 005e 424B     		ldr	r3, .L163+8
 2932 0060 1B88     		ldrh	r3, [r3]
 2933 0062 C3F30B03 		ubfx	r3, r3, #0, #12
 2934 0066 9AB2     		uxth	r2, r3
 2935 0068 3F4B     		ldr	r3, .L163+8
 2936 006a 1A80     		strh	r2, [r3]	@ movhi
1084:main.c        **** 		}while((iWrite != iRead) && (i != cCharsReceived));
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 72


 2937              		.loc 1 1084 0 discriminator 2
 2938 006c 3E4B     		ldr	r3, .L163+8
 2939 006e 1A88     		ldrh	r2, [r3]
 2940 0070 3F4B     		ldr	r3, .L163+16
 2941 0072 1B88     		ldrh	r3, [r3]
 2942 0074 9A42     		cmp	r2, r3
 2943 0076 05D0     		beq	.L154
 2944              		.loc 1 1084 0 is_stmt 0 discriminator 1
 2945 0078 3A4B     		ldr	r3, .L163+4
 2946 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2947 007c 9BB2     		uxth	r3, r3
 2948 007e FA88     		ldrh	r2, [r7, #6]
 2949 0080 9A42     		cmp	r2, r3
 2950 0082 DBD1     		bne	.L155
 2951              	.L154:
1085:main.c        **** 		
1086:main.c        **** 		// scan the command buffer for commands
1087:main.c        **** 		i = iRead;
 2952              		.loc 1 1087 0 is_stmt 1
 2953 0084 3A4B     		ldr	r3, .L163+16
 2954 0086 1B88     		ldrh	r3, [r3]	@ movhi
 2955 0088 FB80     		strh	r3, [r7, #6]	@ movhi
 2956              	.L158:
1088:main.c        **** 		do
1089:main.c        **** 		{
1090:main.c        **** 			// if we see a carriage return or a line feed
1091:main.c        **** 			if((szCommandsBuffer[i] == '\n') || (szCommandsBuffer[i] == '\r'))
 2957              		.loc 1 1091 0
 2958 008a FB88     		ldrh	r3, [r7, #6]
 2959 008c 374A     		ldr	r2, .L163+12
 2960 008e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2961 0090 0A2B     		cmp	r3, #10
 2962 0092 04D0     		beq	.L156
 2963              		.loc 1 1091 0 is_stmt 0 discriminator 1
 2964 0094 FB88     		ldrh	r3, [r7, #6]
 2965 0096 354A     		ldr	r2, .L163+12
 2966 0098 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2967 009a 0D2B     		cmp	r3, #13
 2968 009c 09D1     		bne	.L157
 2969              	.L156:
1092:main.c        **** 			{
1093:main.c        **** 				cCommandsReady++; // indicate the buffer contains commands to be dealt with
 2970              		.loc 1 1093 0 is_stmt 1
 2971 009e 354B     		ldr	r3, .L163+20
 2972 00a0 1B88     		ldrh	r3, [r3]
 2973 00a2 0133     		adds	r3, r3, #1
 2974 00a4 9AB2     		uxth	r2, r3
 2975 00a6 334B     		ldr	r3, .L163+20
 2976 00a8 1A80     		strh	r2, [r3]	@ movhi
1094:main.c        **** 				szCommandsBuffer[i] = 0; // null terminate the string
 2977              		.loc 1 1094 0
 2978 00aa FB88     		ldrh	r3, [r7, #6]
 2979 00ac 2F4A     		ldr	r2, .L163+12
 2980 00ae 0021     		movs	r1, #0
 2981 00b0 D154     		strb	r1, [r2, r3]
 2982              	.L157:
1095:main.c        **** 			}
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 73


1096:main.c        **** 			i++;
 2983              		.loc 1 1096 0
 2984 00b2 FB88     		ldrh	r3, [r7, #6]
 2985 00b4 0133     		adds	r3, r3, #1
 2986 00b6 FB80     		strh	r3, [r7, #6]	@ movhi
1097:main.c        **** 			i = i % CIRCULAR_BUFFER_SIZE;
 2987              		.loc 1 1097 0
 2988 00b8 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2989 00ba C3F30B03 		ubfx	r3, r3, #0, #12
 2990 00be FB80     		strh	r3, [r7, #6]	@ movhi
1098:main.c        **** 		}while(i != iWrite);
 2991              		.loc 1 1098 0
 2992 00c0 294B     		ldr	r3, .L163+8
 2993 00c2 1B88     		ldrh	r3, [r3]
 2994 00c4 FA88     		ldrh	r2, [r7, #6]
 2995 00c6 9A42     		cmp	r2, r3
 2996 00c8 DFD1     		bne	.L158
 2997              	.L151:
1099:main.c        **** 	}
1100:main.c        **** 	
1101:main.c        **** 	i = 0;
 2998              		.loc 1 1101 0
 2999 00ca 0023     		movs	r3, #0
 3000 00cc FB80     		strh	r3, [r7, #6]	@ movhi
1102:main.c        **** 	if(cCommandsReady > 0 && bCommandReady == 0)
 3001              		.loc 1 1102 0
 3002 00ce 294B     		ldr	r3, .L163+20
 3003 00d0 1B88     		ldrh	r3, [r3]
 3004 00d2 002B     		cmp	r3, #0
 3005 00d4 40D0     		beq	.L162
 3006              		.loc 1 1102 0 is_stmt 0 discriminator 1
 3007 00d6 284B     		ldr	r3, .L163+24
 3008 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3009 00da 002B     		cmp	r3, #0
 3010 00dc 3CD1     		bne	.L162
1103:main.c        **** 	{
1104:main.c        **** 		while(szCommandsBuffer[iRead] != 0)
 3011              		.loc 1 1104 0 is_stmt 1
 3012 00de 17E0     		b	.L160
 3013              	.L161:
1105:main.c        **** 		{
1106:main.c        **** 			szCommand[i] = szCommandsBuffer[iRead];
 3014              		.loc 1 1106 0
 3015 00e0 FB88     		ldrh	r3, [r7, #6]
 3016 00e2 234A     		ldr	r2, .L163+16
 3017 00e4 1288     		ldrh	r2, [r2]
 3018 00e6 1146     		mov	r1, r2
 3019 00e8 204A     		ldr	r2, .L163+12
 3020 00ea 515C     		ldrb	r1, [r2, r1]	@ zero_extendqisi2
 3021 00ec 234A     		ldr	r2, .L163+28
 3022 00ee D154     		strb	r1, [r2, r3]
1107:main.c        **** 			i++;
 3023              		.loc 1 1107 0
 3024 00f0 FB88     		ldrh	r3, [r7, #6]
 3025 00f2 0133     		adds	r3, r3, #1
 3026 00f4 FB80     		strh	r3, [r7, #6]	@ movhi
1108:main.c        **** 			iRead++;
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 74


 3027              		.loc 1 1108 0
 3028 00f6 1E4B     		ldr	r3, .L163+16
 3029 00f8 1B88     		ldrh	r3, [r3]
 3030 00fa 0133     		adds	r3, r3, #1
 3031 00fc 9AB2     		uxth	r2, r3
 3032 00fe 1C4B     		ldr	r3, .L163+16
 3033 0100 1A80     		strh	r2, [r3]	@ movhi
1109:main.c        **** 			iRead = iRead % CIRCULAR_BUFFER_SIZE;
 3034              		.loc 1 1109 0
 3035 0102 1B4B     		ldr	r3, .L163+16
 3036 0104 1B88     		ldrh	r3, [r3]
 3037 0106 C3F30B03 		ubfx	r3, r3, #0, #12
 3038 010a 9AB2     		uxth	r2, r3
 3039 010c 184B     		ldr	r3, .L163+16
 3040 010e 1A80     		strh	r2, [r3]	@ movhi
 3041              	.L160:
1104:main.c        **** 		{
 3042              		.loc 1 1104 0
 3043 0110 174B     		ldr	r3, .L163+16
 3044 0112 1B88     		ldrh	r3, [r3]
 3045 0114 1A46     		mov	r2, r3
 3046 0116 154B     		ldr	r3, .L163+12
 3047 0118 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 3048 011a 002B     		cmp	r3, #0
 3049 011c E0D1     		bne	.L161
1110:main.c        **** 		}
1111:main.c        **** 		
1112:main.c        **** 		szCommand[i] = 0;
 3050              		.loc 1 1112 0
 3051 011e FB88     		ldrh	r3, [r7, #6]
 3052 0120 164A     		ldr	r2, .L163+28
 3053 0122 0021     		movs	r1, #0
 3054 0124 D154     		strb	r1, [r2, r3]
1113:main.c        **** 		iRead++;
 3055              		.loc 1 1113 0
 3056 0126 124B     		ldr	r3, .L163+16
 3057 0128 1B88     		ldrh	r3, [r3]
 3058 012a 0133     		adds	r3, r3, #1
 3059 012c 9AB2     		uxth	r2, r3
 3060 012e 104B     		ldr	r3, .L163+16
 3061 0130 1A80     		strh	r2, [r3]	@ movhi
1114:main.c        **** 		iRead = iRead % CIRCULAR_BUFFER_SIZE;
 3062              		.loc 1 1114 0
 3063 0132 0F4B     		ldr	r3, .L163+16
 3064 0134 1B88     		ldrh	r3, [r3]
 3065 0136 C3F30B03 		ubfx	r3, r3, #0, #12
 3066 013a 9AB2     		uxth	r2, r3
 3067 013c 0C4B     		ldr	r3, .L163+16
 3068 013e 1A80     		strh	r2, [r3]	@ movhi
1115:main.c        **** 		cCommandsReady--;
 3069              		.loc 1 1115 0
 3070 0140 0C4B     		ldr	r3, .L163+20
 3071 0142 1B88     		ldrh	r3, [r3]
 3072 0144 013B     		subs	r3, r3, #1
 3073 0146 9AB2     		uxth	r2, r3
 3074 0148 0A4B     		ldr	r3, .L163+20
 3075 014a 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 75


1116:main.c        **** 		if(i == 0)
 3076              		.loc 1 1116 0
 3077 014c FB88     		ldrh	r3, [r7, #6]
 3078 014e 002B     		cmp	r3, #0
 3079 0150 02D0     		beq	.L162
1117:main.c        **** 		{
1118:main.c        **** 			// this is a zero length command, nothing to do
1119:main.c        **** 		}
1120:main.c        **** 		else
1121:main.c        **** 		{
1122:main.c        **** 			// the command was at least 1 character, report it
1123:main.c        **** 			bCommandReady = 1;
 3080              		.loc 1 1123 0
 3081 0152 094B     		ldr	r3, .L163+24
 3082 0154 0122     		movs	r2, #1
 3083 0156 1A70     		strb	r2, [r3]
 3084              	.L162:
1124:main.c        **** 		}
1125:main.c        **** 	}
1126:main.c        **** }
 3085              		.loc 1 1126 0
 3086 0158 00BF     		nop
 3087 015a 0837     		adds	r7, r7, #8
 3088              		.cfi_def_cfa_offset 8
 3089 015c BD46     		mov	sp, r7
 3090              		.cfi_def_cfa_register 13
 3091              		@ sp needed
 3092 015e 80BD     		pop	{r7, pc}
 3093              	.L164:
 3094              		.align	2
 3095              	.L163:
 3096 0160 00000000 		.word	szTempBuffer
 3097 0164 00000000 		.word	cCharsReceived
 3098 0168 00000000 		.word	iWrite
 3099 016c 00000000 		.word	szCommandsBuffer
 3100 0170 00000000 		.word	iRead
 3101 0174 00000000 		.word	cCommandsReady
 3102 0178 00000000 		.word	bCommandReady
 3103 017c 00000000 		.word	szCommand
 3104              		.cfi_endproc
 3105              	.LFE68:
 3106              		.size	CommandCheck, .-CommandCheck
 3107              		.section	.text.PutString,"ax",%progbits
 3108              		.align	2
 3109              		.global	PutString
 3110              		.thumb
 3111              		.thumb_func
 3112              		.type	PutString, %function
 3113              	PutString:
 3114              	.LFB69:
1127:main.c        **** 
1128:main.c        **** void PutString(char * string)
1129:main.c        **** {
 3115              		.loc 1 1129 0
 3116              		.cfi_startproc
 3117              		@ args = 0, pretend = 0, frame = 8
 3118              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 76


 3119 0000 80B5     		push	{r7, lr}
 3120              		.cfi_def_cfa_offset 8
 3121              		.cfi_offset 7, -8
 3122              		.cfi_offset 14, -4
 3123 0002 82B0     		sub	sp, sp, #8
 3124              		.cfi_def_cfa_offset 16
 3125 0004 00AF     		add	r7, sp, #0
 3126              		.cfi_def_cfa_register 7
 3127 0006 7860     		str	r0, [r7, #4]
1130:main.c        **** 	while(USBUART_CDCIsReady() == 0){};
 3128              		.loc 1 1130 0
 3129 0008 00BF     		nop
 3130              	.L166:
 3131              		.loc 1 1130 0 is_stmt 0 discriminator 1
 3132 000a FFF7FEFF 		bl	USBUART_CDCIsReady
 3133 000e 0346     		mov	r3, r0
 3134 0010 002B     		cmp	r3, #0
 3135 0012 FAD0     		beq	.L166
1131:main.c        **** 	USBUART_PutString(string);
 3136              		.loc 1 1131 0 is_stmt 1
 3137 0014 7868     		ldr	r0, [r7, #4]
 3138 0016 FFF7FEFF 		bl	USBUART_PutString
1132:main.c        **** }
 3139              		.loc 1 1132 0
 3140 001a 00BF     		nop
 3141 001c 0837     		adds	r7, r7, #8
 3142              		.cfi_def_cfa_offset 8
 3143 001e BD46     		mov	sp, r7
 3144              		.cfi_def_cfa_register 13
 3145              		@ sp needed
 3146 0020 80BD     		pop	{r7, pc}
 3147              		.cfi_endproc
 3148              	.LFE69:
 3149              		.size	PutString, .-PutString
 3150 0022 00BF     		.section	.text.PutChar,"ax",%progbits
 3151              		.align	2
 3152              		.global	PutChar
 3153              		.thumb
 3154              		.thumb_func
 3155              		.type	PutChar, %function
 3156              	PutChar:
 3157              	.LFB70:
1133:main.c        **** 
1134:main.c        **** void PutChar(char Data)
1135:main.c        **** {
 3158              		.loc 1 1135 0
 3159              		.cfi_startproc
 3160              		@ args = 0, pretend = 0, frame = 8
 3161              		@ frame_needed = 1, uses_anonymous_args = 0
 3162 0000 80B5     		push	{r7, lr}
 3163              		.cfi_def_cfa_offset 8
 3164              		.cfi_offset 7, -8
 3165              		.cfi_offset 14, -4
 3166 0002 82B0     		sub	sp, sp, #8
 3167              		.cfi_def_cfa_offset 16
 3168 0004 00AF     		add	r7, sp, #0
 3169              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 77


 3170 0006 0346     		mov	r3, r0
 3171 0008 FB71     		strb	r3, [r7, #7]
1136:main.c        **** 	while(USBUART_CDCIsReady() == 0){};
 3172              		.loc 1 1136 0
 3173 000a 00BF     		nop
 3174              	.L168:
 3175              		.loc 1 1136 0 is_stmt 0 discriminator 1
 3176 000c FFF7FEFF 		bl	USBUART_CDCIsReady
 3177 0010 0346     		mov	r3, r0
 3178 0012 002B     		cmp	r3, #0
 3179 0014 FAD0     		beq	.L168
1137:main.c        **** 	USBUART_PutChar(Data);
 3180              		.loc 1 1137 0 is_stmt 1
 3181 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3182 0018 1846     		mov	r0, r3
 3183 001a FFF7FEFF 		bl	USBUART_PutChar
1138:main.c        **** }
 3184              		.loc 1 1138 0
 3185 001e 00BF     		nop
 3186 0020 0837     		adds	r7, r7, #8
 3187              		.cfi_def_cfa_offset 8
 3188 0022 BD46     		mov	sp, r7
 3189              		.cfi_def_cfa_register 13
 3190              		@ sp needed
 3191 0024 80BD     		pop	{r7, pc}
 3192              		.cfi_endproc
 3193              	.LFE70:
 3194              		.size	PutChar, .-PutChar
 3195 0026 00BF     		.text
 3196              	.Letext0:
 3197              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3198              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3199              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3200              		.file 5 "Generated_Source\\PSoC5/CYDMAC.H"
 3201              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 3202              		.section	.debug_info,"",%progbits
 3203              	.Ldebug_info0:
 3204 0000 40050000 		.4byte	0x540
 3205 0004 0400     		.2byte	0x4
 3206 0006 00000000 		.4byte	.Ldebug_abbrev0
 3207 000a 04       		.byte	0x4
 3208 000b 01       		.uleb128 0x1
 3209 000c 4B000000 		.4byte	.LASF74
 3210 0010 0C       		.byte	0xc
 3211 0011 7E030000 		.4byte	.LASF75
 3212 0015 52010000 		.4byte	.LASF76
 3213 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3214 001d 00000000 		.4byte	0
 3215 0021 00000000 		.4byte	.Ldebug_line0
 3216 0025 02       		.uleb128 0x2
 3217 0026 01       		.byte	0x1
 3218 0027 06       		.byte	0x6
 3219 0028 C6020000 		.4byte	.LASF0
 3220 002c 02       		.uleb128 0x2
 3221 002d 01       		.byte	0x1
 3222 002e 08       		.byte	0x8
 3223 002f 95020000 		.4byte	.LASF1
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 78


 3224 0033 02       		.uleb128 0x2
 3225 0034 02       		.byte	0x2
 3226 0035 05       		.byte	0x5
 3227 0036 38000000 		.4byte	.LASF2
 3228 003a 02       		.uleb128 0x2
 3229 003b 02       		.byte	0x2
 3230 003c 07       		.byte	0x7
 3231 003d 1C030000 		.4byte	.LASF3
 3232 0041 03       		.uleb128 0x3
 3233 0042 BF030000 		.4byte	.LASF9
 3234 0046 02       		.byte	0x2
 3235 0047 3F       		.byte	0x3f
 3236 0048 4C000000 		.4byte	0x4c
 3237 004c 02       		.uleb128 0x2
 3238 004d 04       		.byte	0x4
 3239 004e 05       		.byte	0x5
 3240 004f 26020000 		.4byte	.LASF4
 3241 0053 02       		.uleb128 0x2
 3242 0054 04       		.byte	0x4
 3243 0055 07       		.byte	0x7
 3244 0056 8A030000 		.4byte	.LASF5
 3245 005a 02       		.uleb128 0x2
 3246 005b 08       		.byte	0x8
 3247 005c 05       		.byte	0x5
 3248 005d 09020000 		.4byte	.LASF6
 3249 0061 02       		.uleb128 0x2
 3250 0062 08       		.byte	0x8
 3251 0063 07       		.byte	0x7
 3252 0064 D2020000 		.4byte	.LASF7
 3253 0068 04       		.uleb128 0x4
 3254 0069 04       		.byte	0x4
 3255 006a 05       		.byte	0x5
 3256 006b 696E7400 		.ascii	"int\000"
 3257 006f 02       		.uleb128 0x2
 3258 0070 04       		.byte	0x4
 3259 0071 07       		.byte	0x7
 3260 0072 E9020000 		.4byte	.LASF8
 3261 0076 03       		.uleb128 0x3
 3262 0077 40030000 		.4byte	.LASF10
 3263 007b 03       		.byte	0x3
 3264 007c 2C       		.byte	0x2c
 3265 007d 41000000 		.4byte	0x41
 3266 0081 05       		.uleb128 0x5
 3267 0082 29010000 		.4byte	.LASF11
 3268 0086 04       		.byte	0x4
 3269 0087 E901     		.2byte	0x1e9
 3270 0089 2C000000 		.4byte	0x2c
 3271 008d 05       		.uleb128 0x5
 3272 008e 03010000 		.4byte	.LASF12
 3273 0092 04       		.byte	0x4
 3274 0093 EA01     		.2byte	0x1ea
 3275 0095 3A000000 		.4byte	0x3a
 3276 0099 05       		.uleb128 0x5
 3277 009a 77030000 		.4byte	.LASF13
 3278 009e 04       		.byte	0x4
 3279 009f EB01     		.2byte	0x1eb
 3280 00a1 53000000 		.4byte	0x53
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 79


 3281 00a5 05       		.uleb128 0x5
 3282 00a6 9C030000 		.4byte	.LASF14
 3283 00aa 04       		.byte	0x4
 3284 00ab EE01     		.2byte	0x1ee
 3285 00ad 4C000000 		.4byte	0x4c
 3286 00b1 02       		.uleb128 0x2
 3287 00b2 04       		.byte	0x4
 3288 00b3 04       		.byte	0x4
 3289 00b4 F0010000 		.4byte	.LASF15
 3290 00b8 02       		.uleb128 0x2
 3291 00b9 08       		.byte	0x8
 3292 00ba 04       		.byte	0x4
 3293 00bb A2030000 		.4byte	.LASF16
 3294 00bf 02       		.uleb128 0x2
 3295 00c0 01       		.byte	0x1
 3296 00c1 08       		.byte	0x8
 3297 00c2 36030000 		.4byte	.LASF17
 3298 00c6 05       		.uleb128 0x5
 3299 00c7 85030000 		.4byte	.LASF18
 3300 00cb 04       		.byte	0x4
 3301 00cc 9302     		.2byte	0x293
 3302 00ce D2000000 		.4byte	0xd2
 3303 00d2 06       		.uleb128 0x6
 3304 00d3 81000000 		.4byte	0x81
 3305 00d7 05       		.uleb128 0x5
 3306 00d8 32000000 		.4byte	.LASF19
 3307 00dc 04       		.byte	0x4
 3308 00dd 9402     		.2byte	0x294
 3309 00df E3000000 		.4byte	0xe3
 3310 00e3 06       		.uleb128 0x6
 3311 00e4 8D000000 		.4byte	0x8d
 3312 00e8 02       		.uleb128 0x2
 3313 00e9 08       		.byte	0x8
 3314 00ea 04       		.byte	0x4
 3315 00eb 81020000 		.4byte	.LASF20
 3316 00ef 02       		.uleb128 0x2
 3317 00f0 04       		.byte	0x4
 3318 00f1 07       		.byte	0x7
 3319 00f2 42000000 		.4byte	.LASF21
 3320 00f6 07       		.uleb128 0x7
 3321 00f7 04       		.byte	0x4
 3322 00f8 BF000000 		.4byte	0xbf
 3323 00fc 08       		.uleb128 0x8
 3324 00fd D2000000 		.4byte	0xd2
 3325 0101 0C010000 		.4byte	0x10c
 3326 0105 09       		.uleb128 0x9
 3327 0106 EF000000 		.4byte	0xef
 3328 010a 03       		.byte	0x3
 3329 010b 00       		.byte	0
 3330 010c 0A       		.uleb128 0xa
 3331 010d 00000000 		.4byte	.LASF77
 3332 0111 08       		.byte	0x8
 3333 0112 05       		.byte	0x5
 3334 0113 59       		.byte	0x59
 3335 0114 31010000 		.4byte	0x131
 3336 0118 0B       		.uleb128 0xb
 3337 0119 54443000 		.ascii	"TD0\000"
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 80


 3338 011d 05       		.byte	0x5
 3339 011e 5B       		.byte	0x5b
 3340 011f 31010000 		.4byte	0x131
 3341 0123 00       		.byte	0
 3342 0124 0B       		.uleb128 0xb
 3343 0125 54443100 		.ascii	"TD1\000"
 3344 0129 05       		.byte	0x5
 3345 012a 5C       		.byte	0x5c
 3346 012b 36010000 		.4byte	0x136
 3347 012f 04       		.byte	0x4
 3348 0130 00       		.byte	0
 3349 0131 06       		.uleb128 0x6
 3350 0132 FC000000 		.4byte	0xfc
 3351 0136 06       		.uleb128 0x6
 3352 0137 FC000000 		.4byte	0xfc
 3353 013b 03       		.uleb128 0x3
 3354 013c 11030000 		.4byte	.LASF22
 3355 0140 05       		.byte	0x5
 3356 0141 5E       		.byte	0x5e
 3357 0142 0C010000 		.4byte	0x10c
 3358 0146 0C       		.uleb128 0xc
 3359 0147 3B030000 		.4byte	.LASF36
 3360 014b 01       		.byte	0x1
 3361 014c 82       		.byte	0x82
 3362 014d 68000000 		.4byte	0x68
 3363 0151 00000000 		.4byte	.LFB64
 3364 0155 18120000 		.4byte	.LFE64-.LFB64
 3365 0159 01       		.uleb128 0x1
 3366 015a 9C       		.byte	0x9c
 3367 015b 06020000 		.4byte	0x206
 3368 015f 0D       		.uleb128 0xd
 3369 0160 2F030000 		.4byte	.LASF23
 3370 0164 01       		.byte	0x1
 3371 0165 84       		.byte	0x84
 3372 0166 81000000 		.4byte	0x81
 3373 016a 02       		.uleb128 0x2
 3374 016b 91       		.byte	0x91
 3375 016c 51       		.sleb128 -47
 3376 016d 0D       		.uleb128 0xd
 3377 016e F6010000 		.4byte	.LASF24
 3378 0172 01       		.byte	0x1
 3379 0173 85       		.byte	0x85
 3380 0174 8D000000 		.4byte	0x8d
 3381 0178 02       		.uleb128 0x2
 3382 0179 91       		.byte	0x91
 3383 017a 4E       		.sleb128 -50
 3384 017b 0E       		.uleb128 0xe
 3385 017c 70737A00 		.ascii	"psz\000"
 3386 0180 01       		.byte	0x1
 3387 0181 86       		.byte	0x86
 3388 0182 F6000000 		.4byte	0xf6
 3389 0186 02       		.uleb128 0x2
 3390 0187 91       		.byte	0x91
 3391 0188 60       		.sleb128 -32
 3392 0189 0D       		.uleb128 0xd
 3393 018a A3020000 		.4byte	.LASF25
 3394 018e 01       		.byte	0x1
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 81


 3395 018f 87       		.byte	0x87
 3396 0190 8D000000 		.4byte	0x8d
 3397 0194 02       		.uleb128 0x2
 3398 0195 91       		.byte	0x91
 3399 0196 4C       		.sleb128 -52
 3400 0197 0D       		.uleb128 0xd
 3401 0198 5C040000 		.4byte	.LASF26
 3402 019c 01       		.byte	0x1
 3403 019d 87       		.byte	0x87
 3404 019e 8D000000 		.4byte	0x8d
 3405 01a2 02       		.uleb128 0x2
 3406 01a3 91       		.byte	0x91
 3407 01a4 6E       		.sleb128 -18
 3408 01a5 0E       		.uleb128 0xe
 3409 01a6 6900     		.ascii	"i\000"
 3410 01a8 01       		.byte	0x1
 3411 01a9 87       		.byte	0x87
 3412 01aa 8D000000 		.4byte	0x8d
 3413 01ae 02       		.uleb128 0x2
 3414 01af 91       		.byte	0x91
 3415 01b0 6C       		.sleb128 -20
 3416 01b1 0D       		.uleb128 0xd
 3417 01b2 3D020000 		.4byte	.LASF27
 3418 01b6 01       		.byte	0x1
 3419 01b7 87       		.byte	0x87
 3420 01b8 8D000000 		.4byte	0x8d
 3421 01bc 02       		.uleb128 0x2
 3422 01bd 91       		.byte	0x91
 3423 01be 52       		.sleb128 -46
 3424 01bf 0D       		.uleb128 0xd
 3425 01c0 F9000000 		.4byte	.LASF28
 3426 01c4 01       		.byte	0x1
 3427 01c5 88       		.byte	0x88
 3428 01c6 99000000 		.4byte	0x99
 3429 01ca 02       		.uleb128 0x2
 3430 01cb 91       		.byte	0x91
 3431 01cc 68       		.sleb128 -24
 3432 01cd 0D       		.uleb128 0xd
 3433 01ce 0A010000 		.4byte	.LASF29
 3434 01d2 01       		.byte	0x1
 3435 01d3 89       		.byte	0x89
 3436 01d4 99000000 		.4byte	0x99
 3437 01d8 02       		.uleb128 0x2
 3438 01d9 91       		.byte	0x91
 3439 01da 5C       		.sleb128 -36
 3440 01db 0D       		.uleb128 0xd
 3441 01dc D0010000 		.4byte	.LASF30
 3442 01e0 01       		.byte	0x1
 3443 01e1 8A       		.byte	0x8a
 3444 01e2 99000000 		.4byte	0x99
 3445 01e6 02       		.uleb128 0x2
 3446 01e7 91       		.byte	0x91
 3447 01e8 58       		.sleb128 -40
 3448 01e9 0D       		.uleb128 0xd
 3449 01ea 04020000 		.4byte	.LASF31
 3450 01ee 01       		.byte	0x1
 3451 01ef 8B       		.byte	0x8b
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 82


 3452 01f0 B1000000 		.4byte	0xb1
 3453 01f4 02       		.uleb128 0x2
 3454 01f5 91       		.byte	0x91
 3455 01f6 54       		.sleb128 -44
 3456 01f7 0D       		.uleb128 0xd
 3457 01f8 C6010000 		.4byte	.LASF32
 3458 01fc 01       		.byte	0x1
 3459 01fd 8C       		.byte	0x8c
 3460 01fe B1000000 		.4byte	0xb1
 3461 0202 02       		.uleb128 0x2
 3462 0203 91       		.byte	0x91
 3463 0204 64       		.sleb128 -28
 3464 0205 00       		.byte	0
 3465 0206 0F       		.uleb128 0xf
 3466 0207 42010000 		.4byte	.LASF33
 3467 020b 01       		.byte	0x1
 3468 020c 9B03     		.2byte	0x39b
 3469 020e 00000000 		.4byte	.LFB65
 3470 0212 58010000 		.4byte	.LFE65-.LFB65
 3471 0216 01       		.uleb128 0x1
 3472 0217 9C       		.byte	0x9c
 3473 0218 0F       		.uleb128 0xf
 3474 0219 D6010000 		.4byte	.LASF34
 3475 021d 01       		.byte	0x1
 3476 021e ED03     		.2byte	0x3ed
 3477 0220 00000000 		.4byte	.LFB66
 3478 0224 30010000 		.4byte	.LFE66-.LFB66
 3479 0228 01       		.uleb128 0x1
 3480 0229 9C       		.byte	0x9c
 3481 022a 10       		.uleb128 0x10
 3482 022b 2F010000 		.4byte	.LASF78
 3483 022f 01       		.byte	0x1
 3484 0230 0A04     		.2byte	0x40a
 3485 0232 8D000000 		.4byte	0x8d
 3486 0236 00000000 		.4byte	.LFB67
 3487 023a 60000000 		.4byte	.LFE67-.LFB67
 3488 023e 01       		.uleb128 0x1
 3489 023f 9C       		.byte	0x9c
 3490 0240 63020000 		.4byte	0x263
 3491 0244 11       		.uleb128 0x11
 3492 0245 B6030000 		.4byte	.LASF40
 3493 0249 01       		.byte	0x1
 3494 024a 0A04     		.2byte	0x40a
 3495 024c 81000000 		.4byte	0x81
 3496 0250 02       		.uleb128 0x2
 3497 0251 91       		.byte	0x91
 3498 0252 6F       		.sleb128 -17
 3499 0253 12       		.uleb128 0x12
 3500 0254 12010000 		.4byte	.LASF35
 3501 0258 01       		.byte	0x1
 3502 0259 0C04     		.2byte	0x40c
 3503 025b 8D000000 		.4byte	0x8d
 3504 025f 02       		.uleb128 0x2
 3505 0260 91       		.byte	0x91
 3506 0261 76       		.sleb128 -10
 3507 0262 00       		.byte	0
 3508 0263 13       		.uleb128 0x13
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 83


 3509 0264 A8020000 		.4byte	.LASF37
 3510 0268 01       		.byte	0x1
 3511 0269 1C04     		.2byte	0x41c
 3512 026b 00000000 		.4byte	.LFB68
 3513 026f 80010000 		.4byte	.LFE68-.LFB68
 3514 0273 01       		.uleb128 0x1
 3515 0274 9C       		.byte	0x9c
 3516 0275 96020000 		.4byte	0x296
 3517 0279 14       		.uleb128 0x14
 3518 027a 6900     		.ascii	"i\000"
 3519 027c 01       		.byte	0x1
 3520 027d 1E04     		.2byte	0x41e
 3521 027f 8D000000 		.4byte	0x8d
 3522 0283 02       		.uleb128 0x2
 3523 0284 91       		.byte	0x91
 3524 0285 76       		.sleb128 -10
 3525 0286 12       		.uleb128 0x12
 3526 0287 00040000 		.4byte	.LASF38
 3527 028b 01       		.byte	0x1
 3528 028c 1E04     		.2byte	0x41e
 3529 028e 8D000000 		.4byte	0x8d
 3530 0292 02       		.uleb128 0x2
 3531 0293 91       		.byte	0x91
 3532 0294 74       		.sleb128 -12
 3533 0295 00       		.byte	0
 3534 0296 13       		.uleb128 0x13
 3535 0297 F6030000 		.4byte	.LASF39
 3536 029b 01       		.byte	0x1
 3537 029c 6804     		.2byte	0x468
 3538 029e 00000000 		.4byte	.LFB69
 3539 02a2 22000000 		.4byte	.LFE69-.LFB69
 3540 02a6 01       		.uleb128 0x1
 3541 02a7 9C       		.byte	0x9c
 3542 02a8 BC020000 		.4byte	0x2bc
 3543 02ac 11       		.uleb128 0x11
 3544 02ad 36020000 		.4byte	.LASF41
 3545 02b1 01       		.byte	0x1
 3546 02b2 6804     		.2byte	0x468
 3547 02b4 F6000000 		.4byte	0xf6
 3548 02b8 02       		.uleb128 0x2
 3549 02b9 91       		.byte	0x91
 3550 02ba 74       		.sleb128 -12
 3551 02bb 00       		.byte	0
 3552 02bc 13       		.uleb128 0x13
 3553 02bd 8D020000 		.4byte	.LASF42
 3554 02c1 01       		.byte	0x1
 3555 02c2 6E04     		.2byte	0x46e
 3556 02c4 00000000 		.4byte	.LFB70
 3557 02c8 26000000 		.4byte	.LFE70-.LFB70
 3558 02cc 01       		.uleb128 0x1
 3559 02cd 9C       		.byte	0x9c
 3560 02ce E2020000 		.4byte	0x2e2
 3561 02d2 11       		.uleb128 0x11
 3562 02d3 42020000 		.4byte	.LASF43
 3563 02d7 01       		.byte	0x1
 3564 02d8 6E04     		.2byte	0x46e
 3565 02da BF000000 		.4byte	0xbf
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 84


 3566 02de 02       		.uleb128 0x2
 3567 02df 91       		.byte	0x91
 3568 02e0 77       		.sleb128 -9
 3569 02e1 00       		.byte	0
 3570 02e2 15       		.uleb128 0x15
 3571 02e3 0E040000 		.4byte	.LASF44
 3572 02e7 06       		.byte	0x6
 3573 02e8 1207     		.2byte	0x712
 3574 02ea EE020000 		.4byte	0x2ee
 3575 02ee 06       		.uleb128 0x6
 3576 02ef 76000000 		.4byte	0x76
 3577 02f3 16       		.uleb128 0x16
 3578 02f4 6E020000 		.4byte	.LASF45
 3579 02f8 01       		.byte	0x1
 3580 02f9 47       		.byte	0x47
 3581 02fa 81000000 		.4byte	0x81
 3582 02fe 05       		.uleb128 0x5
 3583 02ff 03       		.byte	0x3
 3584 0300 00000000 		.4byte	DMA_Channel_1_Chan
 3585 0304 08       		.uleb128 0x8
 3586 0305 81000000 		.4byte	0x81
 3587 0309 14030000 		.4byte	0x314
 3588 030d 09       		.uleb128 0x9
 3589 030e EF000000 		.4byte	0xef
 3590 0312 00       		.byte	0
 3591 0313 00       		.byte	0
 3592 0314 16       		.uleb128 0x16
 3593 0315 4B040000 		.4byte	.LASF46
 3594 0319 01       		.byte	0x1
 3595 031a 48       		.byte	0x48
 3596 031b 04030000 		.4byte	0x304
 3597 031f 05       		.uleb128 0x5
 3598 0320 03       		.byte	0x3
 3599 0321 00000000 		.4byte	DMA_Channel_1_TD
 3600 0325 16       		.uleb128 0x16
 3601 0326 E6000000 		.4byte	.LASF47
 3602 032a 01       		.byte	0x1
 3603 032b 4C       		.byte	0x4c
 3604 032c 81000000 		.4byte	0x81
 3605 0330 05       		.uleb128 0x5
 3606 0331 03       		.byte	0x3
 3607 0332 00000000 		.4byte	DMA_Channel_2_Chan
 3608 0336 16       		.uleb128 0x16
 3609 0337 12000000 		.4byte	.LASF48
 3610 033b 01       		.byte	0x1
 3611 033c 4D       		.byte	0x4d
 3612 033d 04030000 		.4byte	0x304
 3613 0341 05       		.uleb128 0x5
 3614 0342 03       		.byte	0x3
 3615 0343 00000000 		.4byte	DMA_Channel_2_TD
 3616 0347 08       		.uleb128 0x8
 3617 0348 8D000000 		.4byte	0x8d
 3618 034c 58030000 		.4byte	0x358
 3619 0350 17       		.uleb128 0x17
 3620 0351 EF000000 		.4byte	0xef
 3621 0355 FF03     		.2byte	0x3ff
 3622 0357 00       		.byte	0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 85


 3623 0358 16       		.uleb128 0x16
 3624 0359 F6020000 		.4byte	.LASF49
 3625 035d 01       		.byte	0x1
 3626 035e 50       		.byte	0x50
 3627 035f 47030000 		.4byte	0x347
 3628 0363 05       		.uleb128 0x5
 3629 0364 03       		.byte	0x3
 3630 0365 00000000 		.4byte	Channel_1_Data
 3631 0369 16       		.uleb128 0x16
 3632 036a 3C040000 		.4byte	.LASF50
 3633 036e 01       		.byte	0x1
 3634 036f 51       		.byte	0x51
 3635 0370 47030000 		.4byte	0x347
 3636 0374 05       		.uleb128 0x5
 3637 0375 03       		.byte	0x3
 3638 0376 00000000 		.4byte	Channel_2_Data
 3639 037a 08       		.uleb128 0x8
 3640 037b BF000000 		.4byte	0xbf
 3641 037f 8A030000 		.4byte	0x38a
 3642 0383 09       		.uleb128 0x9
 3643 0384 EF000000 		.4byte	0xef
 3644 0388 3F       		.byte	0x3f
 3645 0389 00       		.byte	0
 3646 038a 16       		.uleb128 0x16
 3647 038b D9000000 		.4byte	.LASF51
 3648 038f 01       		.byte	0x1
 3649 0390 55       		.byte	0x55
 3650 0391 7A030000 		.4byte	0x37a
 3651 0395 05       		.uleb128 0x5
 3652 0396 03       		.byte	0x3
 3653 0397 00000000 		.4byte	szTempBuffer
 3654 039b 16       		.uleb128 0x16
 3655 039c E1010000 		.4byte	.LASF52
 3656 03a0 01       		.byte	0x1
 3657 03a1 56       		.byte	0x56
 3658 03a2 81000000 		.4byte	0x81
 3659 03a6 05       		.uleb128 0x5
 3660 03a7 03       		.byte	0x3
 3661 03a8 00000000 		.4byte	cCharsReceived
 3662 03ac 08       		.uleb128 0x8
 3663 03ad BF000000 		.4byte	0xbf
 3664 03b1 BD030000 		.4byte	0x3bd
 3665 03b5 17       		.uleb128 0x17
 3666 03b6 EF000000 		.4byte	0xef
 3667 03ba FF0F     		.2byte	0xfff
 3668 03bc 00       		.byte	0
 3669 03bd 16       		.uleb128 0x16
 3670 03be B5020000 		.4byte	.LASF53
 3671 03c2 01       		.byte	0x1
 3672 03c3 59       		.byte	0x59
 3673 03c4 AC030000 		.4byte	0x3ac
 3674 03c8 05       		.uleb128 0x5
 3675 03c9 03       		.byte	0x3
 3676 03ca 00000000 		.4byte	szCommandsBuffer
 3677 03ce 16       		.uleb128 0x16
 3678 03cf 5E030000 		.4byte	.LASF54
 3679 03d3 01       		.byte	0x1
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 86


 3680 03d4 5A       		.byte	0x5a
 3681 03d5 8D000000 		.4byte	0x8d
 3682 03d9 05       		.uleb128 0x5
 3683 03da 03       		.byte	0x3
 3684 03db 00000000 		.4byte	iRead
 3685 03df 16       		.uleb128 0x16
 3686 03e0 2F020000 		.4byte	.LASF55
 3687 03e4 01       		.byte	0x1
 3688 03e5 5A       		.byte	0x5a
 3689 03e6 8D000000 		.4byte	0x8d
 3690 03ea 05       		.uleb128 0x5
 3691 03eb 03       		.byte	0x3
 3692 03ec 00000000 		.4byte	iWrite
 3693 03f0 16       		.uleb128 0x16
 3694 03f1 A9010000 		.4byte	.LASF56
 3695 03f5 01       		.byte	0x1
 3696 03f6 5B       		.byte	0x5b
 3697 03f7 8D000000 		.4byte	0x8d
 3698 03fb 05       		.uleb128 0x5
 3699 03fc 03       		.byte	0x3
 3700 03fd 00000000 		.4byte	cCommandsReady
 3701 0401 16       		.uleb128 0x16
 3702 0402 C9030000 		.4byte	.LASF57
 3703 0406 01       		.byte	0x1
 3704 0407 5D       		.byte	0x5d
 3705 0408 7A030000 		.4byte	0x37a
 3706 040c 05       		.uleb128 0x5
 3707 040d 03       		.byte	0x3
 3708 040e 00000000 		.4byte	szCommand
 3709 0412 16       		.uleb128 0x16
 3710 0413 B8010000 		.4byte	.LASF58
 3711 0417 01       		.byte	0x1
 3712 0418 5E       		.byte	0x5e
 3713 0419 81000000 		.4byte	0x81
 3714 041d 05       		.uleb128 0x5
 3715 041e 03       		.byte	0x3
 3716 041f 00000000 		.4byte	bCommandReady
 3717 0423 16       		.uleb128 0x16
 3718 0424 D3030000 		.4byte	.LASF59
 3719 0428 01       		.byte	0x1
 3720 0429 61       		.byte	0x61
 3721 042a 81000000 		.4byte	0x81
 3722 042e 05       		.uleb128 0x5
 3723 042f 03       		.byte	0x3
 3724 0430 00000000 		.4byte	preamp_a
 3725 0434 16       		.uleb128 0x16
 3726 0435 DC030000 		.4byte	.LASF60
 3727 0439 01       		.byte	0x1
 3728 043a 61       		.byte	0x61
 3729 043b 81000000 		.4byte	0x81
 3730 043f 05       		.uleb128 0x5
 3731 0440 03       		.byte	0x3
 3732 0441 00000000 		.4byte	preamp_b
 3733 0445 16       		.uleb128 0x16
 3734 0446 23000000 		.4byte	.LASF61
 3735 044a 01       		.byte	0x1
 3736 044b 61       		.byte	0x61
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 87


 3737 044c 81000000 		.4byte	0x81
 3738 0450 05       		.uleb128 0x5
 3739 0451 03       		.byte	0x3
 3740 0452 00000000 		.4byte	trigger_source
 3741 0456 16       		.uleb128 0x16
 3742 0457 05030000 		.4byte	.LASF62
 3743 045b 01       		.byte	0x1
 3744 045c 61       		.byte	0x61
 3745 045d 81000000 		.4byte	0x81
 3746 0461 05       		.uleb128 0x5
 3747 0462 03       		.byte	0x3
 3748 0463 00000000 		.4byte	preamp_trig
 3749 0467 08       		.uleb128 0x8
 3750 0468 81000000 		.4byte	0x81
 3751 046c 77040000 		.4byte	0x477
 3752 0470 09       		.uleb128 0x9
 3753 0471 EF000000 		.4byte	0xef
 3754 0475 3F       		.byte	0x3f
 3755 0476 00       		.byte	0
 3756 0477 16       		.uleb128 0x16
 3757 0478 47020000 		.4byte	.LASF63
 3758 047c 01       		.byte	0x1
 3759 047d 66       		.byte	0x66
 3760 047e 67040000 		.4byte	0x467
 3761 0482 05       		.uleb128 0x5
 3762 0483 03       		.byte	0x3
 3763 0484 00000000 		.4byte	USB_Out_Buffer
 3764 0488 08       		.uleb128 0x8
 3765 0489 81000000 		.4byte	0x81
 3766 048d 99040000 		.4byte	0x499
 3767 0491 17       		.uleb128 0x17
 3768 0492 EF000000 		.4byte	0xef
 3769 0496 FF07     		.2byte	0x7ff
 3770 0498 00       		.byte	0
 3771 0499 16       		.uleb128 0x16
 3772 049a E5030000 		.4byte	.LASF64
 3773 049e 01       		.byte	0x1
 3774 049f 6A       		.byte	0x6a
 3775 04a0 88040000 		.4byte	0x488
 3776 04a4 05       		.uleb128 0x5
 3777 04a5 03       		.byte	0x3
 3778 04a6 00000000 		.4byte	WaveformA_Buffer
 3779 04aa 16       		.uleb128 0x16
 3780 04ab 1B040000 		.4byte	.LASF65
 3781 04af 01       		.byte	0x1
 3782 04b0 6B       		.byte	0x6b
 3783 04b1 88040000 		.4byte	0x488
 3784 04b5 05       		.uleb128 0x5
 3785 04b6 03       		.byte	0x3
 3786 04b7 00000000 		.4byte	WaveformA_Temp_Buffer
 3787 04bb 16       		.uleb128 0x16
 3788 04bc 31040000 		.4byte	.LASF66
 3789 04c0 01       		.byte	0x1
 3790 04c1 6C       		.byte	0x6c
 3791 04c2 81000000 		.4byte	0x81
 3792 04c6 05       		.uleb128 0x5
 3793 04c7 03       		.byte	0x3
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 88


 3794 04c8 00000000 		.4byte	wavea_gain
 3795 04cc 16       		.uleb128 0x16
 3796 04cd 56020000 		.4byte	.LASF67
 3797 04d1 01       		.byte	0x1
 3798 04d2 6D       		.byte	0x6d
 3799 04d3 81000000 		.4byte	0x81
 3800 04d7 05       		.uleb128 0x5
 3801 04d8 03       		.byte	0x3
 3802 04d9 00000000 		.4byte	wavea_offset
 3803 04dd 16       		.uleb128 0x16
 3804 04de 18010000 		.4byte	.LASF68
 3805 04e2 01       		.byte	0x1
 3806 04e3 6E       		.byte	0x6e
 3807 04e4 88040000 		.4byte	0x488
 3808 04e8 05       		.uleb128 0x5
 3809 04e9 03       		.byte	0x3
 3810 04ea 00000000 		.4byte	WaveformB_Buffer
 3811 04ee 16       		.uleb128 0x16
 3812 04ef 48030000 		.4byte	.LASF69
 3813 04f3 01       		.byte	0x1
 3814 04f4 6F       		.byte	0x6f
 3815 04f5 88040000 		.4byte	0x488
 3816 04f9 05       		.uleb128 0x5
 3817 04fa 03       		.byte	0x3
 3818 04fb 00000000 		.4byte	WaveformB_Temp_Buffer
 3819 04ff 16       		.uleb128 0x16
 3820 0500 63020000 		.4byte	.LASF70
 3821 0504 01       		.byte	0x1
 3822 0505 70       		.byte	0x70
 3823 0506 81000000 		.4byte	0x81
 3824 050a 05       		.uleb128 0x5
 3825 050b 03       		.byte	0x3
 3826 050c 00000000 		.4byte	waveb_gain
 3827 0510 16       		.uleb128 0x16
 3828 0511 A9030000 		.4byte	.LASF71
 3829 0515 01       		.byte	0x1
 3830 0516 71       		.byte	0x71
 3831 0517 81000000 		.4byte	0x81
 3832 051b 05       		.uleb128 0x5
 3833 051c 03       		.byte	0x3
 3834 051d 00000000 		.4byte	waveb_offset
 3835 0521 16       		.uleb128 0x16
 3836 0522 17020000 		.4byte	.LASF72
 3837 0526 01       		.byte	0x1
 3838 0527 75       		.byte	0x75
 3839 0528 81000000 		.4byte	0x81
 3840 052c 05       		.uleb128 0x5
 3841 052d 03       		.byte	0x3
 3842 052e 00000000 		.4byte	Noise_Adjusted
 3843 0532 16       		.uleb128 0x16
 3844 0533 64030000 		.4byte	.LASF73
 3845 0537 01       		.byte	0x1
 3846 0538 7A       		.byte	0x7a
 3847 0539 81000000 		.4byte	0x81
 3848 053d 05       		.uleb128 0x5
 3849 053e 03       		.byte	0x3
 3850 053f 00000000 		.4byte	Digital_AutoUpdate
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 89


 3851 0543 00       		.byte	0
 3852              		.section	.debug_abbrev,"",%progbits
 3853              	.Ldebug_abbrev0:
 3854 0000 01       		.uleb128 0x1
 3855 0001 11       		.uleb128 0x11
 3856 0002 01       		.byte	0x1
 3857 0003 25       		.uleb128 0x25
 3858 0004 0E       		.uleb128 0xe
 3859 0005 13       		.uleb128 0x13
 3860 0006 0B       		.uleb128 0xb
 3861 0007 03       		.uleb128 0x3
 3862 0008 0E       		.uleb128 0xe
 3863 0009 1B       		.uleb128 0x1b
 3864 000a 0E       		.uleb128 0xe
 3865 000b 55       		.uleb128 0x55
 3866 000c 17       		.uleb128 0x17
 3867 000d 11       		.uleb128 0x11
 3868 000e 01       		.uleb128 0x1
 3869 000f 10       		.uleb128 0x10
 3870 0010 17       		.uleb128 0x17
 3871 0011 00       		.byte	0
 3872 0012 00       		.byte	0
 3873 0013 02       		.uleb128 0x2
 3874 0014 24       		.uleb128 0x24
 3875 0015 00       		.byte	0
 3876 0016 0B       		.uleb128 0xb
 3877 0017 0B       		.uleb128 0xb
 3878 0018 3E       		.uleb128 0x3e
 3879 0019 0B       		.uleb128 0xb
 3880 001a 03       		.uleb128 0x3
 3881 001b 0E       		.uleb128 0xe
 3882 001c 00       		.byte	0
 3883 001d 00       		.byte	0
 3884 001e 03       		.uleb128 0x3
 3885 001f 16       		.uleb128 0x16
 3886 0020 00       		.byte	0
 3887 0021 03       		.uleb128 0x3
 3888 0022 0E       		.uleb128 0xe
 3889 0023 3A       		.uleb128 0x3a
 3890 0024 0B       		.uleb128 0xb
 3891 0025 3B       		.uleb128 0x3b
 3892 0026 0B       		.uleb128 0xb
 3893 0027 49       		.uleb128 0x49
 3894 0028 13       		.uleb128 0x13
 3895 0029 00       		.byte	0
 3896 002a 00       		.byte	0
 3897 002b 04       		.uleb128 0x4
 3898 002c 24       		.uleb128 0x24
 3899 002d 00       		.byte	0
 3900 002e 0B       		.uleb128 0xb
 3901 002f 0B       		.uleb128 0xb
 3902 0030 3E       		.uleb128 0x3e
 3903 0031 0B       		.uleb128 0xb
 3904 0032 03       		.uleb128 0x3
 3905 0033 08       		.uleb128 0x8
 3906 0034 00       		.byte	0
 3907 0035 00       		.byte	0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 90


 3908 0036 05       		.uleb128 0x5
 3909 0037 16       		.uleb128 0x16
 3910 0038 00       		.byte	0
 3911 0039 03       		.uleb128 0x3
 3912 003a 0E       		.uleb128 0xe
 3913 003b 3A       		.uleb128 0x3a
 3914 003c 0B       		.uleb128 0xb
 3915 003d 3B       		.uleb128 0x3b
 3916 003e 05       		.uleb128 0x5
 3917 003f 49       		.uleb128 0x49
 3918 0040 13       		.uleb128 0x13
 3919 0041 00       		.byte	0
 3920 0042 00       		.byte	0
 3921 0043 06       		.uleb128 0x6
 3922 0044 35       		.uleb128 0x35
 3923 0045 00       		.byte	0
 3924 0046 49       		.uleb128 0x49
 3925 0047 13       		.uleb128 0x13
 3926 0048 00       		.byte	0
 3927 0049 00       		.byte	0
 3928 004a 07       		.uleb128 0x7
 3929 004b 0F       		.uleb128 0xf
 3930 004c 00       		.byte	0
 3931 004d 0B       		.uleb128 0xb
 3932 004e 0B       		.uleb128 0xb
 3933 004f 49       		.uleb128 0x49
 3934 0050 13       		.uleb128 0x13
 3935 0051 00       		.byte	0
 3936 0052 00       		.byte	0
 3937 0053 08       		.uleb128 0x8
 3938 0054 01       		.uleb128 0x1
 3939 0055 01       		.byte	0x1
 3940 0056 49       		.uleb128 0x49
 3941 0057 13       		.uleb128 0x13
 3942 0058 01       		.uleb128 0x1
 3943 0059 13       		.uleb128 0x13
 3944 005a 00       		.byte	0
 3945 005b 00       		.byte	0
 3946 005c 09       		.uleb128 0x9
 3947 005d 21       		.uleb128 0x21
 3948 005e 00       		.byte	0
 3949 005f 49       		.uleb128 0x49
 3950 0060 13       		.uleb128 0x13
 3951 0061 2F       		.uleb128 0x2f
 3952 0062 0B       		.uleb128 0xb
 3953 0063 00       		.byte	0
 3954 0064 00       		.byte	0
 3955 0065 0A       		.uleb128 0xa
 3956 0066 13       		.uleb128 0x13
 3957 0067 01       		.byte	0x1
 3958 0068 03       		.uleb128 0x3
 3959 0069 0E       		.uleb128 0xe
 3960 006a 0B       		.uleb128 0xb
 3961 006b 0B       		.uleb128 0xb
 3962 006c 3A       		.uleb128 0x3a
 3963 006d 0B       		.uleb128 0xb
 3964 006e 3B       		.uleb128 0x3b
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 91


 3965 006f 0B       		.uleb128 0xb
 3966 0070 01       		.uleb128 0x1
 3967 0071 13       		.uleb128 0x13
 3968 0072 00       		.byte	0
 3969 0073 00       		.byte	0
 3970 0074 0B       		.uleb128 0xb
 3971 0075 0D       		.uleb128 0xd
 3972 0076 00       		.byte	0
 3973 0077 03       		.uleb128 0x3
 3974 0078 08       		.uleb128 0x8
 3975 0079 3A       		.uleb128 0x3a
 3976 007a 0B       		.uleb128 0xb
 3977 007b 3B       		.uleb128 0x3b
 3978 007c 0B       		.uleb128 0xb
 3979 007d 49       		.uleb128 0x49
 3980 007e 13       		.uleb128 0x13
 3981 007f 38       		.uleb128 0x38
 3982 0080 0B       		.uleb128 0xb
 3983 0081 00       		.byte	0
 3984 0082 00       		.byte	0
 3985 0083 0C       		.uleb128 0xc
 3986 0084 2E       		.uleb128 0x2e
 3987 0085 01       		.byte	0x1
 3988 0086 3F       		.uleb128 0x3f
 3989 0087 19       		.uleb128 0x19
 3990 0088 03       		.uleb128 0x3
 3991 0089 0E       		.uleb128 0xe
 3992 008a 3A       		.uleb128 0x3a
 3993 008b 0B       		.uleb128 0xb
 3994 008c 3B       		.uleb128 0x3b
 3995 008d 0B       		.uleb128 0xb
 3996 008e 49       		.uleb128 0x49
 3997 008f 13       		.uleb128 0x13
 3998 0090 11       		.uleb128 0x11
 3999 0091 01       		.uleb128 0x1
 4000 0092 12       		.uleb128 0x12
 4001 0093 06       		.uleb128 0x6
 4002 0094 40       		.uleb128 0x40
 4003 0095 18       		.uleb128 0x18
 4004 0096 9642     		.uleb128 0x2116
 4005 0098 19       		.uleb128 0x19
 4006 0099 01       		.uleb128 0x1
 4007 009a 13       		.uleb128 0x13
 4008 009b 00       		.byte	0
 4009 009c 00       		.byte	0
 4010 009d 0D       		.uleb128 0xd
 4011 009e 34       		.uleb128 0x34
 4012 009f 00       		.byte	0
 4013 00a0 03       		.uleb128 0x3
 4014 00a1 0E       		.uleb128 0xe
 4015 00a2 3A       		.uleb128 0x3a
 4016 00a3 0B       		.uleb128 0xb
 4017 00a4 3B       		.uleb128 0x3b
 4018 00a5 0B       		.uleb128 0xb
 4019 00a6 49       		.uleb128 0x49
 4020 00a7 13       		.uleb128 0x13
 4021 00a8 02       		.uleb128 0x2
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 92


 4022 00a9 18       		.uleb128 0x18
 4023 00aa 00       		.byte	0
 4024 00ab 00       		.byte	0
 4025 00ac 0E       		.uleb128 0xe
 4026 00ad 34       		.uleb128 0x34
 4027 00ae 00       		.byte	0
 4028 00af 03       		.uleb128 0x3
 4029 00b0 08       		.uleb128 0x8
 4030 00b1 3A       		.uleb128 0x3a
 4031 00b2 0B       		.uleb128 0xb
 4032 00b3 3B       		.uleb128 0x3b
 4033 00b4 0B       		.uleb128 0xb
 4034 00b5 49       		.uleb128 0x49
 4035 00b6 13       		.uleb128 0x13
 4036 00b7 02       		.uleb128 0x2
 4037 00b8 18       		.uleb128 0x18
 4038 00b9 00       		.byte	0
 4039 00ba 00       		.byte	0
 4040 00bb 0F       		.uleb128 0xf
 4041 00bc 2E       		.uleb128 0x2e
 4042 00bd 00       		.byte	0
 4043 00be 3F       		.uleb128 0x3f
 4044 00bf 19       		.uleb128 0x19
 4045 00c0 03       		.uleb128 0x3
 4046 00c1 0E       		.uleb128 0xe
 4047 00c2 3A       		.uleb128 0x3a
 4048 00c3 0B       		.uleb128 0xb
 4049 00c4 3B       		.uleb128 0x3b
 4050 00c5 05       		.uleb128 0x5
 4051 00c6 27       		.uleb128 0x27
 4052 00c7 19       		.uleb128 0x19
 4053 00c8 11       		.uleb128 0x11
 4054 00c9 01       		.uleb128 0x1
 4055 00ca 12       		.uleb128 0x12
 4056 00cb 06       		.uleb128 0x6
 4057 00cc 40       		.uleb128 0x40
 4058 00cd 18       		.uleb128 0x18
 4059 00ce 9642     		.uleb128 0x2116
 4060 00d0 19       		.uleb128 0x19
 4061 00d1 00       		.byte	0
 4062 00d2 00       		.byte	0
 4063 00d3 10       		.uleb128 0x10
 4064 00d4 2E       		.uleb128 0x2e
 4065 00d5 01       		.byte	0x1
 4066 00d6 3F       		.uleb128 0x3f
 4067 00d7 19       		.uleb128 0x19
 4068 00d8 03       		.uleb128 0x3
 4069 00d9 0E       		.uleb128 0xe
 4070 00da 3A       		.uleb128 0x3a
 4071 00db 0B       		.uleb128 0xb
 4072 00dc 3B       		.uleb128 0x3b
 4073 00dd 05       		.uleb128 0x5
 4074 00de 27       		.uleb128 0x27
 4075 00df 19       		.uleb128 0x19
 4076 00e0 49       		.uleb128 0x49
 4077 00e1 13       		.uleb128 0x13
 4078 00e2 11       		.uleb128 0x11
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 93


 4079 00e3 01       		.uleb128 0x1
 4080 00e4 12       		.uleb128 0x12
 4081 00e5 06       		.uleb128 0x6
 4082 00e6 40       		.uleb128 0x40
 4083 00e7 18       		.uleb128 0x18
 4084 00e8 9742     		.uleb128 0x2117
 4085 00ea 19       		.uleb128 0x19
 4086 00eb 01       		.uleb128 0x1
 4087 00ec 13       		.uleb128 0x13
 4088 00ed 00       		.byte	0
 4089 00ee 00       		.byte	0
 4090 00ef 11       		.uleb128 0x11
 4091 00f0 05       		.uleb128 0x5
 4092 00f1 00       		.byte	0
 4093 00f2 03       		.uleb128 0x3
 4094 00f3 0E       		.uleb128 0xe
 4095 00f4 3A       		.uleb128 0x3a
 4096 00f5 0B       		.uleb128 0xb
 4097 00f6 3B       		.uleb128 0x3b
 4098 00f7 05       		.uleb128 0x5
 4099 00f8 49       		.uleb128 0x49
 4100 00f9 13       		.uleb128 0x13
 4101 00fa 02       		.uleb128 0x2
 4102 00fb 18       		.uleb128 0x18
 4103 00fc 00       		.byte	0
 4104 00fd 00       		.byte	0
 4105 00fe 12       		.uleb128 0x12
 4106 00ff 34       		.uleb128 0x34
 4107 0100 00       		.byte	0
 4108 0101 03       		.uleb128 0x3
 4109 0102 0E       		.uleb128 0xe
 4110 0103 3A       		.uleb128 0x3a
 4111 0104 0B       		.uleb128 0xb
 4112 0105 3B       		.uleb128 0x3b
 4113 0106 05       		.uleb128 0x5
 4114 0107 49       		.uleb128 0x49
 4115 0108 13       		.uleb128 0x13
 4116 0109 02       		.uleb128 0x2
 4117 010a 18       		.uleb128 0x18
 4118 010b 00       		.byte	0
 4119 010c 00       		.byte	0
 4120 010d 13       		.uleb128 0x13
 4121 010e 2E       		.uleb128 0x2e
 4122 010f 01       		.byte	0x1
 4123 0110 3F       		.uleb128 0x3f
 4124 0111 19       		.uleb128 0x19
 4125 0112 03       		.uleb128 0x3
 4126 0113 0E       		.uleb128 0xe
 4127 0114 3A       		.uleb128 0x3a
 4128 0115 0B       		.uleb128 0xb
 4129 0116 3B       		.uleb128 0x3b
 4130 0117 05       		.uleb128 0x5
 4131 0118 27       		.uleb128 0x27
 4132 0119 19       		.uleb128 0x19
 4133 011a 11       		.uleb128 0x11
 4134 011b 01       		.uleb128 0x1
 4135 011c 12       		.uleb128 0x12
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 94


 4136 011d 06       		.uleb128 0x6
 4137 011e 40       		.uleb128 0x40
 4138 011f 18       		.uleb128 0x18
 4139 0120 9642     		.uleb128 0x2116
 4140 0122 19       		.uleb128 0x19
 4141 0123 01       		.uleb128 0x1
 4142 0124 13       		.uleb128 0x13
 4143 0125 00       		.byte	0
 4144 0126 00       		.byte	0
 4145 0127 14       		.uleb128 0x14
 4146 0128 34       		.uleb128 0x34
 4147 0129 00       		.byte	0
 4148 012a 03       		.uleb128 0x3
 4149 012b 08       		.uleb128 0x8
 4150 012c 3A       		.uleb128 0x3a
 4151 012d 0B       		.uleb128 0xb
 4152 012e 3B       		.uleb128 0x3b
 4153 012f 05       		.uleb128 0x5
 4154 0130 49       		.uleb128 0x49
 4155 0131 13       		.uleb128 0x13
 4156 0132 02       		.uleb128 0x2
 4157 0133 18       		.uleb128 0x18
 4158 0134 00       		.byte	0
 4159 0135 00       		.byte	0
 4160 0136 15       		.uleb128 0x15
 4161 0137 34       		.uleb128 0x34
 4162 0138 00       		.byte	0
 4163 0139 03       		.uleb128 0x3
 4164 013a 0E       		.uleb128 0xe
 4165 013b 3A       		.uleb128 0x3a
 4166 013c 0B       		.uleb128 0xb
 4167 013d 3B       		.uleb128 0x3b
 4168 013e 05       		.uleb128 0x5
 4169 013f 49       		.uleb128 0x49
 4170 0140 13       		.uleb128 0x13
 4171 0141 3F       		.uleb128 0x3f
 4172 0142 19       		.uleb128 0x19
 4173 0143 3C       		.uleb128 0x3c
 4174 0144 19       		.uleb128 0x19
 4175 0145 00       		.byte	0
 4176 0146 00       		.byte	0
 4177 0147 16       		.uleb128 0x16
 4178 0148 34       		.uleb128 0x34
 4179 0149 00       		.byte	0
 4180 014a 03       		.uleb128 0x3
 4181 014b 0E       		.uleb128 0xe
 4182 014c 3A       		.uleb128 0x3a
 4183 014d 0B       		.uleb128 0xb
 4184 014e 3B       		.uleb128 0x3b
 4185 014f 0B       		.uleb128 0xb
 4186 0150 49       		.uleb128 0x49
 4187 0151 13       		.uleb128 0x13
 4188 0152 3F       		.uleb128 0x3f
 4189 0153 19       		.uleb128 0x19
 4190 0154 02       		.uleb128 0x2
 4191 0155 18       		.uleb128 0x18
 4192 0156 00       		.byte	0
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 95


 4193 0157 00       		.byte	0
 4194 0158 17       		.uleb128 0x17
 4195 0159 21       		.uleb128 0x21
 4196 015a 00       		.byte	0
 4197 015b 49       		.uleb128 0x49
 4198 015c 13       		.uleb128 0x13
 4199 015d 2F       		.uleb128 0x2f
 4200 015e 05       		.uleb128 0x5
 4201 015f 00       		.byte	0
 4202 0160 00       		.byte	0
 4203 0161 00       		.byte	0
 4204              		.section	.debug_aranges,"",%progbits
 4205 0000 4C000000 		.4byte	0x4c
 4206 0004 0200     		.2byte	0x2
 4207 0006 00000000 		.4byte	.Ldebug_info0
 4208 000a 04       		.byte	0x4
 4209 000b 00       		.byte	0
 4210 000c 0000     		.2byte	0
 4211 000e 0000     		.2byte	0
 4212 0010 00000000 		.4byte	.LFB64
 4213 0014 18120000 		.4byte	.LFE64-.LFB64
 4214 0018 00000000 		.4byte	.LFB65
 4215 001c 58010000 		.4byte	.LFE65-.LFB65
 4216 0020 00000000 		.4byte	.LFB66
 4217 0024 30010000 		.4byte	.LFE66-.LFB66
 4218 0028 00000000 		.4byte	.LFB67
 4219 002c 60000000 		.4byte	.LFE67-.LFB67
 4220 0030 00000000 		.4byte	.LFB68
 4221 0034 80010000 		.4byte	.LFE68-.LFB68
 4222 0038 00000000 		.4byte	.LFB69
 4223 003c 22000000 		.4byte	.LFE69-.LFB69
 4224 0040 00000000 		.4byte	.LFB70
 4225 0044 26000000 		.4byte	.LFE70-.LFB70
 4226 0048 00000000 		.4byte	0
 4227 004c 00000000 		.4byte	0
 4228              		.section	.debug_ranges,"",%progbits
 4229              	.Ldebug_ranges0:
 4230 0000 00000000 		.4byte	.LFB64
 4231 0004 18120000 		.4byte	.LFE64
 4232 0008 00000000 		.4byte	.LFB65
 4233 000c 58010000 		.4byte	.LFE65
 4234 0010 00000000 		.4byte	.LFB66
 4235 0014 30010000 		.4byte	.LFE66
 4236 0018 00000000 		.4byte	.LFB67
 4237 001c 60000000 		.4byte	.LFE67
 4238 0020 00000000 		.4byte	.LFB68
 4239 0024 80010000 		.4byte	.LFE68
 4240 0028 00000000 		.4byte	.LFB69
 4241 002c 22000000 		.4byte	.LFE69
 4242 0030 00000000 		.4byte	.LFB70
 4243 0034 26000000 		.4byte	.LFE70
 4244 0038 00000000 		.4byte	0
 4245 003c 00000000 		.4byte	0
 4246              		.section	.debug_line,"",%progbits
 4247              	.Ldebug_line0:
 4248 0000 7E040000 		.section	.debug_str,"MS",%progbits,1
 4248      02005801 
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 96


 4248      00000201 
 4248      FB0E0D00 
 4248      01010101 
 4249              	.LASF77:
 4250 0000 646D6163 		.ascii	"dmac_tdmem_struct\000"
 4250      5F74646D 
 4250      656D5F73 
 4250      74727563 
 4250      7400
 4251              	.LASF48:
 4252 0012 444D415F 		.ascii	"DMA_Channel_2_TD\000"
 4252      4368616E 
 4252      6E656C5F 
 4252      325F5444 
 4252      00
 4253              	.LASF61:
 4254 0023 74726967 		.ascii	"trigger_source\000"
 4254      6765725F 
 4254      736F7572 
 4254      636500
 4255              	.LASF19:
 4256 0032 72656731 		.ascii	"reg16\000"
 4256      3600
 4257              	.LASF2:
 4258 0038 73686F72 		.ascii	"short int\000"
 4258      7420696E 
 4258      7400
 4259              	.LASF21:
 4260 0042 73697A65 		.ascii	"sizetype\000"
 4260      74797065 
 4260      00
 4261              	.LASF74:
 4262 004b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4262      43313120 
 4262      352E342E 
 4262      31203230 
 4262      31363036 
 4263 007e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4263      20726576 
 4263      6973696F 
 4263      6E203233 
 4263      37373135 
 4264 00b1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4264      66756E63 
 4264      74696F6E 
 4264      2D736563 
 4264      74696F6E 
 4265              	.LASF51:
 4266 00d9 737A5465 		.ascii	"szTempBuffer\000"
 4266      6D704275 
 4266      66666572 
 4266      00
 4267              	.LASF47:
 4268 00e6 444D415F 		.ascii	"DMA_Channel_2_Chan\000"
 4268      4368616E 
 4268      6E656C5F 
 4268      325F4368 
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 97


 4268      616E00
 4269              	.LASF28:
 4270 00f9 70686173 		.ascii	"phase_int\000"
 4270      655F696E 
 4270      7400
 4271              	.LASF12:
 4272 0103 75696E74 		.ascii	"uint16\000"
 4272      313600
 4273              	.LASF29:
 4274 010a 70776D5F 		.ascii	"pwm_div\000"
 4274      64697600 
 4275              	.LASF35:
 4276 0112 696E6465 		.ascii	"index\000"
 4276      7800
 4277              	.LASF68:
 4278 0118 57617665 		.ascii	"WaveformB_Buffer\000"
 4278      666F726D 
 4278      425F4275 
 4278      66666572 
 4278      00
 4279              	.LASF11:
 4280 0129 75696E74 		.ascii	"uint8\000"
 4280      3800
 4281              	.LASF78:
 4282 012f 4765744C 		.ascii	"GetLastSampleIndex\000"
 4282      61737453 
 4282      616D706C 
 4282      65496E64 
 4282      657800
 4283              	.LASF33:
 4284 0142 48617264 		.ascii	"Hardware_Config\000"
 4284      77617265 
 4284      5F436F6E 
 4284      66696700 
 4285              	.LASF76:
 4286 0152 433A5C55 		.ascii	"C:\\Users\\merce\\Documents\\scope\\CyScope\\CY8CKI"
 4286      73657273 
 4286      5C6D6572 
 4286      63655C44 
 4286      6F63756D 
 4287 017f 542D3034 		.ascii	"T-044\\ScopeKitProg\\Scope_CY8KIT-044.cydsn\000"
 4287      345C5363 
 4287      6F70654B 
 4287      69745072 
 4287      6F675C53 
 4288              	.LASF56:
 4289 01a9 63436F6D 		.ascii	"cCommandsReady\000"
 4289      6D616E64 
 4289      73526561 
 4289      647900
 4290              	.LASF58:
 4291 01b8 62436F6D 		.ascii	"bCommandReady\000"
 4291      6D616E64 
 4291      52656164 
 4291      7900
 4292              	.LASF32:
 4293 01c6 77617665 		.ascii	"wave_temp\000"
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 98


 4293      5F74656D 
 4293      7000
 4294              	.LASF30:
 4295 01d0 75616464 		.ascii	"uaddr\000"
 4295      7200
 4296              	.LASF34:
 4297 01d6 444D415F 		.ascii	"DMA_Config\000"
 4297      436F6E66 
 4297      696700
 4298              	.LASF52:
 4299 01e1 63436861 		.ascii	"cCharsReceived\000"
 4299      72735265 
 4299      63656976 
 4299      656400
 4300              	.LASF15:
 4301 01f0 666C6F61 		.ascii	"float\000"
 4301      7400
 4302              	.LASF24:
 4303 01f6 656E6469 		.ascii	"ending_offset\000"
 4303      6E675F6F 
 4303      66667365 
 4303      7400
 4304              	.LASF31:
 4305 0204 66726571 		.ascii	"freq\000"
 4305      00
 4306              	.LASF6:
 4307 0209 6C6F6E67 		.ascii	"long long int\000"
 4307      206C6F6E 
 4307      6720696E 
 4307      7400
 4308              	.LASF72:
 4309 0217 4E6F6973 		.ascii	"Noise_Adjusted\000"
 4309      655F4164 
 4309      6A757374 
 4309      656400
 4310              	.LASF4:
 4311 0226 6C6F6E67 		.ascii	"long int\000"
 4311      20696E74 
 4311      00
 4312              	.LASF55:
 4313 022f 69577269 		.ascii	"iWrite\000"
 4313      746500
 4314              	.LASF41:
 4315 0236 73747269 		.ascii	"string\000"
 4315      6E6700
 4316              	.LASF27:
 4317 023d 756C656E 		.ascii	"ulen\000"
 4317      00
 4318              	.LASF43:
 4319 0242 44617461 		.ascii	"Data\000"
 4319      00
 4320              	.LASF63:
 4321 0247 5553425F 		.ascii	"USB_Out_Buffer\000"
 4321      4F75745F 
 4321      42756666 
 4321      657200
 4322              	.LASF67:
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 99


 4323 0256 77617665 		.ascii	"wavea_offset\000"
 4323      615F6F66 
 4323      66736574 
 4323      00
 4324              	.LASF70:
 4325 0263 77617665 		.ascii	"waveb_gain\000"
 4325      625F6761 
 4325      696E00
 4326              	.LASF45:
 4327 026e 444D415F 		.ascii	"DMA_Channel_1_Chan\000"
 4327      4368616E 
 4327      6E656C5F 
 4327      315F4368 
 4327      616E00
 4328              	.LASF20:
 4329 0281 6C6F6E67 		.ascii	"long double\000"
 4329      20646F75 
 4329      626C6500 
 4330              	.LASF42:
 4331 028d 50757443 		.ascii	"PutChar\000"
 4331      68617200 
 4332              	.LASF1:
 4333 0295 756E7369 		.ascii	"unsigned char\000"
 4333      676E6564 
 4333      20636861 
 4333      7200
 4334              	.LASF25:
 4335 02a3 61766172 		.ascii	"avar\000"
 4335      00
 4336              	.LASF37:
 4337 02a8 436F6D6D 		.ascii	"CommandCheck\000"
 4337      616E6443 
 4337      6865636B 
 4337      00
 4338              	.LASF53:
 4339 02b5 737A436F 		.ascii	"szCommandsBuffer\000"
 4339      6D6D616E 
 4339      64734275 
 4339      66666572 
 4339      00
 4340              	.LASF0:
 4341 02c6 7369676E 		.ascii	"signed char\000"
 4341      65642063 
 4341      68617200 
 4342              	.LASF7:
 4343 02d2 6C6F6E67 		.ascii	"long long unsigned int\000"
 4343      206C6F6E 
 4343      6720756E 
 4343      7369676E 
 4343      65642069 
 4344              	.LASF8:
 4345 02e9 756E7369 		.ascii	"unsigned int\000"
 4345      676E6564 
 4345      20696E74 
 4345      00
 4346              	.LASF49:
 4347 02f6 4368616E 		.ascii	"Channel_1_Data\000"
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 100


 4347      6E656C5F 
 4347      315F4461 
 4347      746100
 4348              	.LASF62:
 4349 0305 70726561 		.ascii	"preamp_trig\000"
 4349      6D705F74 
 4349      72696700 
 4350              	.LASF22:
 4351 0311 646D6163 		.ascii	"dmac_tdmem\000"
 4351      5F74646D 
 4351      656D00
 4352              	.LASF3:
 4353 031c 73686F72 		.ascii	"short unsigned int\000"
 4353      7420756E 
 4353      7369676E 
 4353      65642069 
 4353      6E7400
 4354              	.LASF23:
 4355 032f 73746174 		.ascii	"status\000"
 4355      757300
 4356              	.LASF17:
 4357 0336 63686172 		.ascii	"char\000"
 4357      00
 4358              	.LASF36:
 4359 033b 6D61696E 		.ascii	"main\000"
 4359      00
 4360              	.LASF10:
 4361 0340 696E7433 		.ascii	"int32_t\000"
 4361      325F7400 
 4362              	.LASF69:
 4363 0348 57617665 		.ascii	"WaveformB_Temp_Buffer\000"
 4363      666F726D 
 4363      425F5465 
 4363      6D705F42 
 4363      75666665 
 4364              	.LASF54:
 4365 035e 69526561 		.ascii	"iRead\000"
 4365      6400
 4366              	.LASF73:
 4367 0364 44696769 		.ascii	"Digital_AutoUpdate\000"
 4367      74616C5F 
 4367      4175746F 
 4367      55706461 
 4367      746500
 4368              	.LASF13:
 4369 0377 75696E74 		.ascii	"uint32\000"
 4369      333200
 4370              	.LASF75:
 4371 037e 6D61696E 		.ascii	"main.c\000"
 4371      2E6300
 4372              	.LASF18:
 4373 0385 72656738 		.ascii	"reg8\000"
 4373      00
 4374              	.LASF5:
 4375 038a 6C6F6E67 		.ascii	"long unsigned int\000"
 4375      20756E73 
 4375      69676E65 
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 101


 4375      6420696E 
 4375      7400
 4376              	.LASF14:
 4377 039c 696E7433 		.ascii	"int32\000"
 4377      3200
 4378              	.LASF16:
 4379 03a2 646F7562 		.ascii	"double\000"
 4379      6C6500
 4380              	.LASF71:
 4381 03a9 77617665 		.ascii	"waveb_offset\000"
 4381      625F6F66 
 4381      66736574 
 4381      00
 4382              	.LASF40:
 4383 03b6 63684861 		.ascii	"chHandle\000"
 4383      6E646C65 
 4383      00
 4384              	.LASF9:
 4385 03bf 5F5F696E 		.ascii	"__int32_t\000"
 4385      7433325F 
 4385      7400
 4386              	.LASF57:
 4387 03c9 737A436F 		.ascii	"szCommand\000"
 4387      6D6D616E 
 4387      6400
 4388              	.LASF59:
 4389 03d3 70726561 		.ascii	"preamp_a\000"
 4389      6D705F61 
 4389      00
 4390              	.LASF60:
 4391 03dc 70726561 		.ascii	"preamp_b\000"
 4391      6D705F62 
 4391      00
 4392              	.LASF64:
 4393 03e5 57617665 		.ascii	"WaveformA_Buffer\000"
 4393      666F726D 
 4393      415F4275 
 4393      66666572 
 4393      00
 4394              	.LASF39:
 4395 03f6 50757453 		.ascii	"PutString\000"
 4395      7472696E 
 4395      6700
 4396              	.LASF38:
 4397 0400 52656365 		.ascii	"ReceivedBytes\000"
 4397      69766564 
 4397      42797465 
 4397      7300
 4398              	.LASF44:
 4399 040e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4399      52784275 
 4399      66666572 
 4399      00
 4400              	.LASF65:
 4401 041b 57617665 		.ascii	"WaveformA_Temp_Buffer\000"
 4401      666F726D 
 4401      415F5465 
ARM GAS  C:\Users\merce\AppData\Local\Temp\cceaDERD.s 			page 102


 4401      6D705F42 
 4401      75666665 
 4402              	.LASF66:
 4403 0431 77617665 		.ascii	"wavea_gain\000"
 4403      615F6761 
 4403      696E00
 4404              	.LASF50:
 4405 043c 4368616E 		.ascii	"Channel_2_Data\000"
 4405      6E656C5F 
 4405      325F4461 
 4405      746100
 4406              	.LASF46:
 4407 044b 444D415F 		.ascii	"DMA_Channel_1_TD\000"
 4407      4368616E 
 4407      6E656C5F 
 4407      315F5444 
 4407      00
 4408              	.LASF26:
 4409 045c 62766172 		.ascii	"bvar\000"
 4409      00
 4410              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
