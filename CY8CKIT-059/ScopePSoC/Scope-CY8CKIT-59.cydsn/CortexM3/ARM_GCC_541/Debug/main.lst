ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	DMA_Channel_1_Chan,1,1
  20              		.comm	DMA_Channel_1_TD,1,4
  21              		.comm	DMA_Channel_2_Chan,1,1
  22              		.comm	DMA_Channel_2_TD,1,4
  23              		.comm	Channel_1_Data,2048,4
  24              		.comm	Channel_2_Data,2048,4
  25              		.comm	szTempBuffer,64,4
  26              		.comm	cCharsReceived,1,1
  27              		.comm	szCommandsBuffer,4096,4
  28              		.comm	iRead,2,2
  29              		.comm	iWrite,2,2
  30              		.comm	cCommandsReady,2,2
  31              		.comm	szCommand,64,4
  32              		.comm	bCommandReady,1,1
  33              		.comm	preamp_a,1,1
  34              		.comm	preamp_b,1,1
  35              		.comm	trigger_source,1,1
  36              		.comm	preamp_trig,1,1
  37              		.comm	USB_Out_Buffer,64,4
  38              		.comm	WaveformA_Buffer,2048,4
  39              		.comm	WaveformA_Temp_Buffer,2048,4
  40              		.global	wavea_gain
  41              		.bss
  42              		.type	wavea_gain, %object
  43              		.size	wavea_gain, 1
  44              	wavea_gain:
  45 0000 00       		.space	1
  46              		.global	wavea_offset
  47              		.type	wavea_offset, %object
  48              		.size	wavea_offset, 1
  49              	wavea_offset:
  50 0001 00       		.space	1
  51              		.comm	WaveformB_Buffer,2048,4
  52              		.comm	WaveformB_Temp_Buffer,2048,4
  53              		.global	waveb_gain
  54              		.type	waveb_gain, %object
  55              		.size	waveb_gain, 1
  56              	waveb_gain:
  57 0002 00       		.space	1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 2


  58              		.global	waveb_offset
  59              		.type	waveb_offset, %object
  60              		.size	waveb_offset, 1
  61              	waveb_offset:
  62 0003 00       		.space	1
  63              		.comm	Noise_Adjusted,1,1
  64              		.comm	Digital_Input_Status_Last,1,1
  65              		.comm	Digital_AutoUpdate,1,1
  66              		.global	__aeabi_ui2f
  67              		.global	__aeabi_fmul
  68              		.global	__aeabi_f2d
  69              		.global	__aeabi_ddiv
  70              		.global	__aeabi_dadd
  71              		.global	__aeabi_d2f
  72              		.global	__aeabi_fcmpgt
  73              		.global	__aeabi_f2uiz
  74              		.section	.rodata
  75              		.align	2
  76              	.LC0:
  77 0000 2000     		.ascii	" \000"
  78 0002 0000     		.align	2
  79              	.LC1:
  80 0004 2A437953 		.ascii	"*CyScope V1.59\012\015\000"
  80      636F7065 
  80      2056312E 
  80      35390A0D 
  80      00
  81 0015 000000   		.align	2
  82              	.LC2:
  83 0018 25687500 		.ascii	"%hu\000"
  84              		.global	__aeabi_dmul
  85              		.global	__aeabi_fdiv
  86              		.global	__aeabi_i2d
  87              		.global	__aeabi_d2uiz
  88              		.align	2
  89              	.LC3:
  90 001c 4572726F 		.ascii	"Error: Unrecognized Scope Command\012\015\000"
  90      723A2055 
  90      6E726563 
  90      6F676E69 
  90      7A656420 
  91              		.align	2
  92              	.LC4:
  93 0040 4572726F 		.ascii	"Error: Unknown Command\012\015\000"
  93      723A2055 
  93      6E6B6E6F 
  93      776E2043 
  93      6F6D6D61 
  94              		.section	.text.main,"ax",%progbits
  95              		.align	2
  96              		.global	main
  97              		.thumb
  98              		.thumb_func
  99              		.type	main, %function
 100              	main:
 101              	.LFB64:
 102              		.file 1 "main.c"
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 3


   1:main.c        **** /* ========================================
   2:main.c        ****  *
   3:main.c        ****  *
   4:main.c        ****  * ========================================
   5:main.c        **** */
   6:main.c        **** #include <device.h>
   7:main.c        **** #include <string.h>
   8:main.c        **** #include <stdio.h>
   9:main.c        **** 
  10:main.c        **** void DMA_Config(void);
  11:main.c        **** void Hardware_Config(void);
  12:main.c        **** uint16 GetLastSampleIndex(uint8 chHandle);
  13:main.c        **** void CommandCheck(void);
  14:main.c        **** void PutString(char * string);  // actually checks to see if the CDC device is ready before sending
  15:main.c        **** void PutChar(char Data);
  16:main.c        **** 
  17:main.c        **** // 2047 is the max buffer size in samples
  18:main.c        **** #define BUFFER_SIZE 1024
  19:main.c        **** 
  20:main.c        **** // trigger setup control register definitions
  21:main.c        **** #define FALLING_EDGE_TRIGGERED 0x01
  22:main.c        **** #define RISING_EDGE_TRIGGERED 0x02
  23:main.c        **** #define EITHER_EDGE_TRIGGERED 0x04
  24:main.c        **** #define EXTERNAL_TRIGGERED 0x08
  25:main.c        **** 
  26:main.c        **** #define TRIGGER_MASK 0x0F
  27:main.c        **** 
  28:main.c        **** #define MANUAL_TRIGGER 0x10
  29:main.c        **** #define TRIGGER_ARM 0x40
  30:main.c        **** #define RESET_PWM 0x80
  31:main.c        **** 
  32:main.c        **** // analog mux channel selection defines
  33:main.c        **** #define SCOPE_CHANNEL_1 0
  34:main.c        **** #define SCOPE_CHANNEL_2 1
  35:main.c        **** #define SCOPE_CHANNEL_3 0
  36:main.c        **** #define SCOPE_CHANNEL_4 1
  37:main.c        **** 
  38:main.c        **** // status register defines
  39:main.c        **** #define COMP_LEVEL 0x01
  40:main.c        **** #define TRIGGERED 0x02
  41:main.c        **** #define CAPTURE_COMPLETE 0x04
  42:main.c        **** 
  43:main.c        **** // Wave_Control control register definitions
  44:main.c        **** #define WAVEA_SELECT_MASK 0x01
  45:main.c        **** #define WAVE_SELECT_WAVE 0x00
  46:main.c        **** #define WAVEA_SELECT_NOISE 0x01
  47:main.c        **** #define WAVEB_SELECT_MASK 0x04
  48:main.c        **** #define WAVEB_SELECT_NOISE 0x04
  49:main.c        **** 
  50:main.c        **** /* DMA Configuration for DMA_Channel_1 */
  51:main.c        **** #define DMA_Channel_1_BYTES_PER_BURST 2
  52:main.c        **** #define DMA_Channel_1_REQUEST_PER_BURST 1
  53:main.c        **** #define DMA_Channel_1_SRC_BASE (CYDEV_PERIPH_BASE)
  54:main.c        **** #define DMA_Channel_1_DST_BASE (CYDEV_SRAM_BASE)
  55:main.c        **** 
  56:main.c        **** /* DMA Configuration for DMA_Channel_2 */
  57:main.c        **** #define DMA_Channel_2_BYTES_PER_BURST 2
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 4


  58:main.c        **** #define DMA_Channel_2_REQUEST_PER_BURST 1
  59:main.c        **** #define DMA_Channel_2_SRC_BASE (CYDEV_PERIPH_BASE)
  60:main.c        **** #define DMA_Channel_2_DST_BASE (CYDEV_SRAM_BASE)
  61:main.c        **** 
  62:main.c        **** /* Variable declarations for DMA_Channel_1 */
  63:main.c        **** /* Move these variable declarations to the top of the function */
  64:main.c        **** uint8 DMA_Channel_1_Chan;
  65:main.c        **** uint8 DMA_Channel_1_TD[1];
  66:main.c        **** 
  67:main.c        **** /* Variable declarations for DMA_Channel_2 */
  68:main.c        **** /* Move these variable declarations to the top of the function */
  69:main.c        **** uint8 DMA_Channel_2_Chan;
  70:main.c        **** uint8 DMA_Channel_2_TD[1];
  71:main.c        **** 
  72:main.c        **** // RAM data arrays for storing the sampled data
  73:main.c        **** uint16 Channel_1_Data[BUFFER_SIZE];
  74:main.c        **** uint16 Channel_2_Data[BUFFER_SIZE];
  75:main.c        **** 
  76:main.c        **** // USB UART variables
  77:main.c        **** #define COMMAND_BUFFER_SIZE 64
  78:main.c        **** char szTempBuffer[COMMAND_BUFFER_SIZE];
  79:main.c        **** uint8 cCharsReceived;
  80:main.c        **** 
  81:main.c        **** #define CIRCULAR_BUFFER_SIZE 4096
  82:main.c        **** char szCommandsBuffer[CIRCULAR_BUFFER_SIZE]; // need to make this many times bigger to deal with th
  83:main.c        **** uint16 iRead, iWrite;
  84:main.c        **** uint16 cCommandsReady;
  85:main.c        **** 
  86:main.c        **** char szCommand[COMMAND_BUFFER_SIZE];
  87:main.c        **** uint8 bCommandReady;
  88:main.c        **** 
  89:main.c        **** // scope status variable
  90:main.c        **** uint8 preamp_a, preamp_b, trigger_source, preamp_trig;
  91:main.c        **** 
  92:main.c        **** // for dumping data out (its 64 bytes, but if you want anything less, it has to be a multiple of 4)
  93:main.c        **** // also a good idea to make it a multiple of the ADC buffer size, defined above
  94:main.c        **** #define USBUART_BUFFER_SIZE 64
  95:main.c        **** uint8 USB_Out_Buffer[USBUART_BUFFER_SIZE];
  96:main.c        **** 
  97:main.c        **** // Waveform generator variables
  98:main.c        **** #define WAVEFORM_BUFFER_SIZE 2048
  99:main.c        **** uint8 WaveformA_Buffer[WAVEFORM_BUFFER_SIZE];
 100:main.c        **** uint8 WaveformA_Temp_Buffer[WAVEFORM_BUFFER_SIZE];
 101:main.c        **** uint8 wavea_gain = 0;
 102:main.c        **** uint8 wavea_offset = 0;
 103:main.c        **** uint8 WaveformB_Buffer[WAVEFORM_BUFFER_SIZE];
 104:main.c        **** uint8 WaveformB_Temp_Buffer[WAVEFORM_BUFFER_SIZE];
 105:main.c        **** uint8 waveb_gain = 0;
 106:main.c        **** uint8 waveb_offset = 0;
 107:main.c        **** 
 108:main.c        **** //GJL
 109:main.c        **** // Buffer for noise output after applying amplitude and offset
 110:main.c        **** uint8 Noise_Adjusted;
 111:main.c        **** 
 112:main.c        **** // digital input last state variable
 113:main.c        **** uint8 Digital_Input_Status_Last;
 114:main.c        **** uint8 Digital_AutoUpdate;
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 5


 115:main.c        **** 
 116:main.c        **** // For the SAR ADC to run at 18MHz, it *must* have a 50% duty cycle. 
 117:main.c        **** // There are 3 frequencies from the PLL that satisfy
 118:main.c        **** // generating an 18 Mhz clock from integer divides off the PLL: 36 Mhz
 119:main.c        **** // 54 Mhz and 72 Mhz.  Of these three choices, 54 Mhz requires a divide of
 120:main.c        **** // 3 which does not produce a 50% duty cycle.
 121:main.c        **** 
 122:main.c        **** int main()
 123:main.c        **** {
 103              		.loc 1 123 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 40
 106              		@ frame_needed = 1, uses_anonymous_args = 0
 107 0000 B0B5     		push	{r4, r5, r7, lr}
 108              		.cfi_def_cfa_offset 16
 109              		.cfi_offset 4, -16
 110              		.cfi_offset 5, -12
 111              		.cfi_offset 7, -8
 112              		.cfi_offset 14, -4
 113 0002 8AB0     		sub	sp, sp, #40
 114              		.cfi_def_cfa_offset 56
 115 0004 00AF     		add	r7, sp, #0
 116              		.cfi_def_cfa_register 7
 124:main.c        **** 	uint8 status;
 125:main.c        **** 	uint16 ending_offset;
 126:main.c        **** 	char * psz;
 127:main.c        **** 	uint16 avar, bvar, i, ulen;
 128:main.c        **** 	uint32 phase_int;
 129:main.c        ****     uint32 pwm_div;
 130:main.c        ****     uint32 uaddr;
 131:main.c        **** 	float freq;
 132:main.c        ****     float wave_temp;
 133:main.c        ****  
 134:main.c        ****     Hardware_Config();
 117              		.loc 1 134 0
 118 0006 FFF7FEFF 		bl	Hardware_Config
 135:main.c        ****     DMA_Config();
 119              		.loc 1 135 0
 120 000a FFF7FEFF 		bl	DMA_Config
 121              	.L117:
 136:main.c        **** 
 137:main.c        ****     for(;;)
 138:main.c        ****     {
 139:main.c        **** 	
 140:main.c        **** 		CommandCheck();
 122              		.loc 1 140 0
 123 000e FFF7FEFF 		bl	CommandCheck
 141:main.c        **** 		
 142:main.c        ****  		//Adjust amplitude and offset for noise output
 143:main.c        **** 		wave_temp = (uint8) *PRS_SEED_PTR;
 124              		.loc 1 143 0
 125 0012 AD4B     		ldr	r3, .L125+8
 126 0014 1B88     		ldrh	r3, [r3]	@ movhi
 127 0016 9BB2     		uxth	r3, r3
 128 0018 DBB2     		uxtb	r3, r3
 129 001a 1846     		mov	r0, r3
 130 001c FFF7FEFF 		bl	__aeabi_ui2f
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 6


 131 0020 0346     		mov	r3, r0
 132 0022 FB61     		str	r3, [r7, #28]	@ float
 144:main.c        **** 		wave_temp = (((float) wave_temp) * ((float)wavea_gain)/255.0) + ((float)wavea_offset);
 133              		.loc 1 144 0
 134 0024 A94B     		ldr	r3, .L125+12
 135 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 136 0028 1846     		mov	r0, r3
 137 002a FFF7FEFF 		bl	__aeabi_ui2f
 138 002e 0346     		mov	r3, r0
 139 0030 F969     		ldr	r1, [r7, #28]	@ float
 140 0032 1846     		mov	r0, r3
 141 0034 FFF7FEFF 		bl	__aeabi_fmul
 142 0038 0346     		mov	r3, r0
 143 003a 1846     		mov	r0, r3
 144 003c FFF7FEFF 		bl	__aeabi_f2d
 145 0040 9FA3     		adr	r3, .L125
 146 0042 D3E90023 		ldrd	r2, [r3]
 147 0046 FFF7FEFF 		bl	__aeabi_ddiv
 148 004a 0346     		mov	r3, r0
 149 004c 0C46     		mov	r4, r1
 150 004e 2546     		mov	r5, r4
 151 0050 1C46     		mov	r4, r3
 152 0052 9F4B     		ldr	r3, .L125+16
 153 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 154 0056 1846     		mov	r0, r3
 155 0058 FFF7FEFF 		bl	__aeabi_ui2f
 156 005c 0346     		mov	r3, r0
 157 005e 1846     		mov	r0, r3
 158 0060 FFF7FEFF 		bl	__aeabi_f2d
 159 0064 0246     		mov	r2, r0
 160 0066 0B46     		mov	r3, r1
 161 0068 2046     		mov	r0, r4
 162 006a 2946     		mov	r1, r5
 163 006c FFF7FEFF 		bl	__aeabi_dadd
 164 0070 0346     		mov	r3, r0
 165 0072 0C46     		mov	r4, r1
 166 0074 1846     		mov	r0, r3
 167 0076 2146     		mov	r1, r4
 168 0078 FFF7FEFF 		bl	__aeabi_d2f
 169 007c 0346     		mov	r3, r0
 170 007e FB61     		str	r3, [r7, #28]	@ float
 145:main.c        **** 		if(wave_temp > 255.0)
 171              		.loc 1 145 0
 172 0080 9449     		ldr	r1, .L125+20
 173 0082 F869     		ldr	r0, [r7, #28]	@ float
 174 0084 FFF7FEFF 		bl	__aeabi_fcmpgt
 175 0088 0346     		mov	r3, r0
 176 008a 002B     		cmp	r3, #0
 177 008c 01D0     		beq	.L2
 146:main.c        **** 		{
 147:main.c        **** 			wave_temp = 255.0;
 178              		.loc 1 147 0
 179 008e 914B     		ldr	r3, .L125+20
 180 0090 FB61     		str	r3, [r7, #28]	@ float
 181              	.L2:
 148:main.c        **** 		}
 149:main.c        **** 		Noise_Adjusted = (uint8) wave_temp;
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 7


 182              		.loc 1 149 0
 183 0092 F869     		ldr	r0, [r7, #28]	@ float
 184 0094 FFF7FEFF 		bl	__aeabi_f2uiz
 185 0098 0346     		mov	r3, r0
 186 009a DAB2     		uxtb	r2, r3
 187 009c 8E4B     		ldr	r3, .L125+24
 188 009e 1A70     		strb	r2, [r3]
 150:main.c        **** 
 151:main.c        **** 		if(bCommandReady != 0)
 189              		.loc 1 151 0
 190 00a0 8E4B     		ldr	r3, .L125+28
 191 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 192 00a4 002B     		cmp	r3, #0
 193 00a6 01F09980 		beq	.L4
 152:main.c        **** 		{
 153:main.c        **** 			psz = strtok(szCommand, " ");
 194              		.loc 1 153 0
 195 00aa 8D49     		ldr	r1, .L125+32
 196 00ac 8D48     		ldr	r0, .L125+36
 197 00ae FFF7FEFF 		bl	strtok
 198 00b2 B861     		str	r0, [r7, #24]
 154:main.c        **** 			if(*psz == 'i')
 199              		.loc 1 154 0
 200 00b4 BB69     		ldr	r3, [r7, #24]
 201 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 202 00b8 692B     		cmp	r3, #105
 203 00ba 04D1     		bne	.L5
 155:main.c        **** 			{
 156:main.c        **** 				// it all started here.  NOTE!  \n\r THE ORDER MATTERS!
 157:main.c        **** 				PutString("*CyScope V1.59\n\r");
 204              		.loc 1 157 0
 205 00bc 8A48     		ldr	r0, .L125+40
 206 00be FFF7FEFF 		bl	PutString
 207 00c2 01F088B8 		b	.L6
 208              	.L5:
 158:main.c        **** 			}
 159:main.c        **** 			else if(*psz == 'D')
 209              		.loc 1 159 0
 210 00c6 BB69     		ldr	r3, [r7, #24]
 211 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 212 00ca 442B     		cmp	r3, #68
 213 00cc 40F0AF80 		bne	.L7
 160:main.c        **** 			{
 161:main.c        **** 				// Digital I/O commands
 162:main.c        **** 				
 163:main.c        **** 				psz = strtok(0, " ");
 214              		.loc 1 163 0
 215 00d0 8349     		ldr	r1, .L125+32
 216 00d2 0020     		movs	r0, #0
 217 00d4 FFF7FEFF 		bl	strtok
 218 00d8 B861     		str	r0, [r7, #24]
 164:main.c        **** 				if(*psz == 'O')
 219              		.loc 1 164 0
 220 00da BB69     		ldr	r3, [r7, #24]
 221 00dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 222 00de 4F2B     		cmp	r3, #79
 223 00e0 11D1     		bne	.L8
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 8


 165:main.c        **** 				{
 166:main.c        **** 					// Digital output
 167:main.c        **** 					// D O N, where N is the output byte value as an ascii 8 bit number
 168:main.c        **** 					psz = strtok(0, " ");
 224              		.loc 1 168 0
 225 00e2 7F49     		ldr	r1, .L125+32
 226 00e4 0020     		movs	r0, #0
 227 00e6 FFF7FEFF 		bl	strtok
 228 00ea B861     		str	r0, [r7, #24]
 169:main.c        **** 					sscanf(psz,"%hu", &avar);
 229              		.loc 1 169 0
 230 00ec 3B1D     		adds	r3, r7, #4
 231 00ee 1A46     		mov	r2, r3
 232 00f0 7E49     		ldr	r1, .L125+44
 233 00f2 B869     		ldr	r0, [r7, #24]
 234 00f4 FFF7FEFF 		bl	sscanf
 170:main.c        **** 					
 171:main.c        **** 					Digital_Out_Control_Write((uint8) avar);
 235              		.loc 1 171 0
 236 00f8 BB88     		ldrh	r3, [r7, #4]
 237 00fa DBB2     		uxtb	r3, r3
 238 00fc 1846     		mov	r0, r3
 239 00fe FFF7FEFF 		bl	Digital_Out_Control_Write
 240 0102 01F068B8 		b	.L6
 241              	.L8:
 172:main.c        **** 				}
 173:main.c        **** 				else if(*psz == 'I')
 242              		.loc 1 173 0
 243 0106 BB69     		ldr	r3, [r7, #24]
 244 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 245 010a 492B     		cmp	r3, #73
 246 010c 0AD1     		bne	.L9
 174:main.c        **** 				{
 175:main.c        **** 					// reads digital inputs
 176:main.c        **** 					// returns Ix where x is an 8 bit (binary) value representing the status
 177:main.c        **** 					// of the digital input pins
 178:main.c        **** 					
 179:main.c        **** 					PutChar('I');
 247              		.loc 1 179 0
 248 010e 4920     		movs	r0, #73
 249 0110 FFF7FEFF 		bl	PutChar
 180:main.c        **** 					PutChar((uint8) Digital_Input_Status_Read());
 250              		.loc 1 180 0
 251 0114 FFF7FEFF 		bl	Digital_Input_Status_Read
 252 0118 0346     		mov	r3, r0
 253 011a 1846     		mov	r0, r3
 254 011c FFF7FEFF 		bl	PutChar
 255 0120 01F059B8 		b	.L6
 256              	.L9:
 181:main.c        **** 				}
 182:main.c        **** 				else if(*psz == 'A')
 257              		.loc 1 182 0
 258 0124 BB69     		ldr	r3, [r7, #24]
 259 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 260 0128 412B     		cmp	r3, #65
 261 012a 0DD1     		bne	.L10
 183:main.c        **** 				{
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 9


 184:main.c        **** 					Digital_AutoUpdate = 1;
 262              		.loc 1 184 0
 263 012c 704B     		ldr	r3, .L125+48
 264 012e 0122     		movs	r2, #1
 265 0130 1A70     		strb	r2, [r3]
 185:main.c        ****                     PutChar('I');
 266              		.loc 1 185 0
 267 0132 4920     		movs	r0, #73
 268 0134 FFF7FEFF 		bl	PutChar
 186:main.c        **** 					PutChar((uint8) Digital_Input_Status_Read());
 269              		.loc 1 186 0
 270 0138 FFF7FEFF 		bl	Digital_Input_Status_Read
 271 013c 0346     		mov	r3, r0
 272 013e 1846     		mov	r0, r3
 273 0140 FFF7FEFF 		bl	PutChar
 274 0144 01F047B8 		b	.L6
 275              	.L10:
 187:main.c        **** 				}
 188:main.c        **** 				else if(*psz == 'a')
 276              		.loc 1 188 0
 277 0148 BB69     		ldr	r3, [r7, #24]
 278 014a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 279 014c 612B     		cmp	r3, #97
 280 014e 04D1     		bne	.L11
 189:main.c        **** 				{
 190:main.c        **** 					Digital_AutoUpdate = 0;
 281              		.loc 1 190 0
 282 0150 674B     		ldr	r3, .L125+48
 283 0152 0022     		movs	r2, #0
 284 0154 1A70     		strb	r2, [r3]
 285 0156 01F03EB8 		b	.L6
 286              	.L11:
 191:main.c        **** 				}
 192:main.c        **** 				else if(*psz == 'F')
 287              		.loc 1 192 0
 288 015a BB69     		ldr	r3, [r7, #24]
 289 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 290 015e 462B     		cmp	r3, #70
 291 0160 27D1     		bne	.L12
 193:main.c        **** 				{
 194:main.c        **** 					// set PWM output frequency
 195:main.c        **** 			    	// D F F_HIGH F_LOW where F_HIGH and F_LOW represent a 16 bit number
 196:main.c        ****                     psz = strtok(0, " ");
 292              		.loc 1 196 0
 293 0162 5F49     		ldr	r1, .L125+32
 294 0164 0020     		movs	r0, #0
 295 0166 FFF7FEFF 		bl	strtok
 296 016a B861     		str	r0, [r7, #24]
 197:main.c        **** 					sscanf(psz,"%hu", &avar);
 297              		.loc 1 197 0
 298 016c 3B1D     		adds	r3, r7, #4
 299 016e 1A46     		mov	r2, r3
 300 0170 5E49     		ldr	r1, .L125+44
 301 0172 B869     		ldr	r0, [r7, #24]
 302 0174 FFF7FEFF 		bl	sscanf
 198:main.c        **** 					pwm_div = ((uint32) avar)*256;
 303              		.loc 1 198 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 10


 304 0178 BB88     		ldrh	r3, [r7, #4]
 305 017a 1B02     		lsls	r3, r3, #8
 306 017c 7B61     		str	r3, [r7, #20]
 199:main.c        **** 					
 200:main.c        **** 					psz = strtok(0, " ");
 307              		.loc 1 200 0
 308 017e 5849     		ldr	r1, .L125+32
 309 0180 0020     		movs	r0, #0
 310 0182 FFF7FEFF 		bl	strtok
 311 0186 B861     		str	r0, [r7, #24]
 201:main.c        **** 					sscanf(psz,"%hu", &avar);
 312              		.loc 1 201 0
 313 0188 3B1D     		adds	r3, r7, #4
 314 018a 1A46     		mov	r2, r3
 315 018c 5749     		ldr	r1, .L125+44
 316 018e B869     		ldr	r0, [r7, #24]
 317 0190 FFF7FEFF 		bl	sscanf
 202:main.c        **** 					pwm_div += ((uint32) avar);
 318              		.loc 1 202 0
 319 0194 BB88     		ldrh	r3, [r7, #4]
 320 0196 1A46     		mov	r2, r3
 321 0198 7B69     		ldr	r3, [r7, #20]
 322 019a 1344     		add	r3, r3, r2
 323 019c 7B61     		str	r3, [r7, #20]
 203:main.c        **** 					PWM_Clock_SetDividerValue(pwm_div);
 324              		.loc 1 203 0
 325 019e 7B69     		ldr	r3, [r7, #20]
 326 01a0 9BB2     		uxth	r3, r3
 327 01a2 013B     		subs	r3, r3, #1
 328 01a4 9BB2     		uxth	r3, r3
 329 01a6 0121     		movs	r1, #1
 330 01a8 1846     		mov	r0, r3
 331 01aa FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 332 01ae 01F012B8 		b	.L6
 333              	.L12:
 204:main.c        **** 				}
 205:main.c        **** 				else if(*psz == 'D')
 334              		.loc 1 205 0
 335 01b2 BB69     		ldr	r3, [r7, #24]
 336 01b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 337 01b6 442B     		cmp	r3, #68
 338 01b8 1BD1     		bne	.L13
 206:main.c        **** 				{
 207:main.c        **** 					// Set PWM Duty cycle
 208:main.c        **** 					// D D N where N is an 8 bit ascii value representing the duty cycle
 209:main.c        **** 					// from 0 to 255
 210:main.c        **** 					psz = strtok(0, " ");
 339              		.loc 1 210 0
 340 01ba 4949     		ldr	r1, .L125+32
 341 01bc 0020     		movs	r0, #0
 342 01be FFF7FEFF 		bl	strtok
 343 01c2 B861     		str	r0, [r7, #24]
 211:main.c        **** 					sscanf(psz,"%hu", &avar);
 344              		.loc 1 211 0
 345 01c4 3B1D     		adds	r3, r7, #4
 346 01c6 1A46     		mov	r2, r3
 347 01c8 4849     		ldr	r1, .L125+44
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 11


 348 01ca B869     		ldr	r0, [r7, #24]
 349 01cc FFF7FEFF 		bl	sscanf
 212:main.c        **** 					// GJL: Limit upper compare value to 249 since period is 249
 213:main.c        ****                     if(avar > 249)
 350              		.loc 1 213 0
 351 01d0 BB88     		ldrh	r3, [r7, #4]
 352 01d2 F92B     		cmp	r3, #249
 353 01d4 01D9     		bls	.L14
 214:main.c        ****                     {
 215:main.c        ****                         avar = 249;
 354              		.loc 1 215 0
 355 01d6 F923     		movs	r3, #249
 356 01d8 BB80     		strh	r3, [r7, #4]	@ movhi
 357              	.L14:
 216:main.c        ****                     }
 217:main.c        **** 					Digital_PWM_WriteCompare1((uint8) avar);
 358              		.loc 1 217 0
 359 01da BB88     		ldrh	r3, [r7, #4]
 360 01dc DBB2     		uxtb	r3, r3
 361 01de 1846     		mov	r0, r3
 362 01e0 FFF7FEFF 		bl	Digital_PWM_WriteCompare1
 218:main.c        **** 					Digital_PWM_WriteCompare2((uint8) avar);
 363              		.loc 1 218 0
 364 01e4 BB88     		ldrh	r3, [r7, #4]
 365 01e6 DBB2     		uxtb	r3, r3
 366 01e8 1846     		mov	r0, r3
 367 01ea FFF7FEFF 		bl	Digital_PWM_WriteCompare2
 368 01ee 00F0F2BF 		b	.L6
 369              	.L13:
 219:main.c        **** 				}
 220:main.c        **** 				else if(*psz == '!')
 370              		.loc 1 220 0
 371 01f2 BB69     		ldr	r3, [r7, #24]
 372 01f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 373 01f6 212B     		cmp	r3, #33
 374 01f8 40F0ED87 		bne	.L6
 221:main.c        **** 				{
 222:main.c        **** 					// interrupt line configuration.  not implemented yet
 223:main.c        **** 					// sends back a '!' character when the interrupt condition is met
 224:main.c        **** 					// D ! M where M is the mode:
 225:main.c        **** 					// M = D : Disable
 226:main.c        **** 					// M = R : Rising Edge
 227:main.c        **** 					// M = F : Falling Edge
 228:main.c        **** 					// M = H : High Level
 229:main.c        **** 					// M = L : Low Level
 230:main.c        **** 					psz = strtok(0, " ");
 375              		.loc 1 230 0
 376 01fc 3849     		ldr	r1, .L125+32
 377 01fe 0020     		movs	r0, #0
 378 0200 FFF7FEFF 		bl	strtok
 379 0204 B861     		str	r0, [r7, #24]
 231:main.c        **** 					
 232:main.c        **** 					if(*psz == 'D')
 380              		.loc 1 232 0
 381 0206 BB69     		ldr	r3, [r7, #24]
 382 0208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 383 020a 442B     		cmp	r3, #68
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 12


 384 020c 00F0E387 		beq	.L6
 233:main.c        **** 					{
 234:main.c        **** 					}
 235:main.c        **** 					else if(*psz == 'R')
 385              		.loc 1 235 0
 386 0210 BB69     		ldr	r3, [r7, #24]
 387 0212 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 388 0214 522B     		cmp	r3, #82
 389 0216 00F0DE87 		beq	.L6
 236:main.c        **** 					{
 237:main.c        **** 					}
 238:main.c        **** 					else if(*psz == 'F')
 390              		.loc 1 238 0
 391 021a BB69     		ldr	r3, [r7, #24]
 392 021c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 393 021e 462B     		cmp	r3, #70
 394 0220 00F0D987 		beq	.L6
 239:main.c        **** 					{
 240:main.c        **** 					}
 241:main.c        **** 					else if(*psz == 'H')
 395              		.loc 1 241 0
 396 0224 BB69     		ldr	r3, [r7, #24]
 397 0226 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 398 0228 482B     		cmp	r3, #72
 399 022a 00F0D4BF 		b	.L6
 400              	.L7:
 242:main.c        **** 					{
 243:main.c        **** 					}
 244:main.c        **** 					else if(*psz == 'L')
 245:main.c        **** 					{
 246:main.c        **** 					}
 247:main.c        **** 					
 248:main.c        **** 					// if trigger condition is met, send back the '!' character
 249:main.c        **** 					//PutChar('!');
 250:main.c        **** 				}
 251:main.c        **** 			}
 252:main.c        **** 			else if(*psz == 'W')
 401              		.loc 1 252 0
 402 022e BB69     		ldr	r3, [r7, #24]
 403 0230 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 404 0232 572B     		cmp	r3, #87
 405 0234 40F0CC84 		bne	.L15
 253:main.c        **** 			{
 254:main.c        **** 				// waveform generator commands
 255:main.c        **** 				
 256:main.c        **** 				psz = strtok(0, " ");
 406              		.loc 1 256 0
 407 0238 2949     		ldr	r1, .L125+32
 408 023a 0020     		movs	r0, #0
 409 023c FFF7FEFF 		bl	strtok
 410 0240 B861     		str	r0, [r7, #24]
 257:main.c        **** 				if(*psz == 'S') // Upper Case for AWG A
 411              		.loc 1 257 0
 412 0242 BB69     		ldr	r3, [r7, #24]
 413 0244 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 414 0246 532B     		cmp	r3, #83
 415 0248 31D1     		bne	.L16
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 13


 258:main.c        **** 				{
 259:main.c        **** 					// sample data into the buffer
 260:main.c        **** 					// command is W S H_ADDR L_ADDR DATA
 261:main.c        **** 					// ADDR is the 2 8 bit bytes for address 0 - 255
 262:main.c        **** 					// DATA is the waveform amplitude 0 - 255
 263:main.c        **** 					psz = strtok(0, " ");
 416              		.loc 1 263 0
 417 024a 2549     		ldr	r1, .L125+32
 418 024c 0020     		movs	r0, #0
 419 024e FFF7FEFF 		bl	strtok
 420 0252 B861     		str	r0, [r7, #24]
 264:main.c        **** 					sscanf(psz,"%hu", &avar);
 421              		.loc 1 264 0
 422 0254 3B1D     		adds	r3, r7, #4
 423 0256 1A46     		mov	r2, r3
 424 0258 2449     		ldr	r1, .L125+44
 425 025a B869     		ldr	r0, [r7, #24]
 426 025c FFF7FEFF 		bl	sscanf
 265:main.c        ****                     uaddr = ((uint32) avar)*256;
 427              		.loc 1 265 0
 428 0260 BB88     		ldrh	r3, [r7, #4]
 429 0262 1B02     		lsls	r3, r3, #8
 430 0264 3B61     		str	r3, [r7, #16]
 266:main.c        **** 					//bvar = avar;  // something is wacky with sscanf.  if I dont move the data into bvar, 
 267:main.c        ****                     // then on the next call to sscanf, even
 268:main.c        **** 					// if I use another variable, avar gets reset to zero!
 269:main.c        **** 					psz = strtok(0, " ");
 431              		.loc 1 269 0
 432 0266 1E49     		ldr	r1, .L125+32
 433 0268 0020     		movs	r0, #0
 434 026a FFF7FEFF 		bl	strtok
 435 026e B861     		str	r0, [r7, #24]
 270:main.c        **** 					sscanf(psz,"%hu", &avar);
 436              		.loc 1 270 0
 437 0270 3B1D     		adds	r3, r7, #4
 438 0272 1A46     		mov	r2, r3
 439 0274 1D49     		ldr	r1, .L125+44
 440 0276 B869     		ldr	r0, [r7, #24]
 441 0278 FFF7FEFF 		bl	sscanf
 271:main.c        ****                     uaddr = uaddr + avar;
 442              		.loc 1 271 0
 443 027c BB88     		ldrh	r3, [r7, #4]
 444 027e 1A46     		mov	r2, r3
 445 0280 3B69     		ldr	r3, [r7, #16]
 446 0282 1344     		add	r3, r3, r2
 447 0284 3B61     		str	r3, [r7, #16]
 272:main.c        ****                     //got the address
 273:main.c        **** 					psz = strtok(0, " ");
 448              		.loc 1 273 0
 449 0286 1649     		ldr	r1, .L125+32
 450 0288 0020     		movs	r0, #0
 451 028a FFF7FEFF 		bl	strtok
 452 028e B861     		str	r0, [r7, #24]
 274:main.c        **** 					sscanf(psz,"%hu", &avar);
 453              		.loc 1 274 0
 454 0290 3B1D     		adds	r3, r7, #4
 455 0292 1A46     		mov	r2, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 14


 456 0294 1549     		ldr	r1, .L125+44
 457 0296 B869     		ldr	r0, [r7, #24]
 458 0298 FFF7FEFF 		bl	sscanf
 275:main.c        **** 					// got the data
 276:main.c        **** 					// store it in the buffer
 277:main.c        **** 					WaveformA_Temp_Buffer[uaddr] = avar;
 459              		.loc 1 277 0
 460 029c BB88     		ldrh	r3, [r7, #4]
 461 029e D9B2     		uxtb	r1, r3
 462 02a0 144A     		ldr	r2, .L125+52
 463 02a2 3B69     		ldr	r3, [r7, #16]
 464 02a4 1344     		add	r3, r3, r2
 465 02a6 0A46     		mov	r2, r1
 466 02a8 1A70     		strb	r2, [r3]
 467 02aa 00F094BF 		b	.L6
 468              	.L16:
 278:main.c        **** 				}
 279:main.c        **** 				else if(*psz == 'P') // Upper Case for AWG A
 469              		.loc 1 279 0
 470 02ae BB69     		ldr	r3, [r7, #24]
 471 02b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 472 02b2 502B     		cmp	r3, #80
 473 02b4 6FD1     		bne	.L18
 280:main.c        **** 				{
 281:main.c        **** 					// program the waveform by copying it into the array that the waveform generator uses
 282:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 474              		.loc 1 282 0
 475 02b6 0023     		movs	r3, #0
 476 02b8 BB84     		strh	r3, [r7, #36]	@ movhi
 477 02ba 66E0     		b	.L19
 478              	.L126:
 479 02bc AFF30080 		.align	3
 480              	.L125:
 481 02c0 00000000 		.word	0
 482 02c4 00E06F40 		.word	1081073664
 483 02c8 04650040 		.word	1073767684
 484 02cc 00000000 		.word	wavea_gain
 485 02d0 00000000 		.word	wavea_offset
 486 02d4 00007F43 		.word	1132396544
 487 02d8 00000000 		.word	Noise_Adjusted
 488 02dc 00000000 		.word	bCommandReady
 489 02e0 00000000 		.word	.LC0
 490 02e4 00000000 		.word	szCommand
 491 02e8 04000000 		.word	.LC1
 492 02ec 18000000 		.word	.LC2
 493 02f0 00000000 		.word	Digital_AutoUpdate
 494 02f4 00000000 		.word	WaveformA_Temp_Buffer
 495              	.L22:
 283:main.c        **** 					{
 284:main.c        **** 						// GJL - add offset and max checking
 285:main.c        ****                         wave_temp = (((float) WaveformA_Temp_Buffer[i]) * ((float)wavea_gain)/255.0
 496              		.loc 1 285 0
 497 02f8 BB8C     		ldrh	r3, [r7, #36]
 498 02fa A54A     		ldr	r2, .L127+8
 499 02fc D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 500 02fe 1846     		mov	r0, r3
 501 0300 FFF7FEFF 		bl	__aeabi_ui2f
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 15


 502 0304 0446     		mov	r4, r0
 503 0306 A34B     		ldr	r3, .L127+12
 504 0308 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 505 030a 1846     		mov	r0, r3
 506 030c FFF7FEFF 		bl	__aeabi_ui2f
 507 0310 0346     		mov	r3, r0
 508 0312 1946     		mov	r1, r3
 509 0314 2046     		mov	r0, r4
 510 0316 FFF7FEFF 		bl	__aeabi_fmul
 511 031a 0346     		mov	r3, r0
 512 031c 1846     		mov	r0, r3
 513 031e FFF7FEFF 		bl	__aeabi_f2d
 514 0322 99A3     		adr	r3, .L127
 515 0324 D3E90023 		ldrd	r2, [r3]
 516 0328 FFF7FEFF 		bl	__aeabi_ddiv
 517 032c 0346     		mov	r3, r0
 518 032e 0C46     		mov	r4, r1
 519 0330 2546     		mov	r5, r4
 520 0332 1C46     		mov	r4, r3
 521 0334 984B     		ldr	r3, .L127+16
 522 0336 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 523 0338 1846     		mov	r0, r3
 524 033a FFF7FEFF 		bl	__aeabi_ui2f
 525 033e 0346     		mov	r3, r0
 526 0340 1846     		mov	r0, r3
 527 0342 FFF7FEFF 		bl	__aeabi_f2d
 528 0346 0246     		mov	r2, r0
 529 0348 0B46     		mov	r3, r1
 530 034a 2046     		mov	r0, r4
 531 034c 2946     		mov	r1, r5
 532 034e FFF7FEFF 		bl	__aeabi_dadd
 533 0352 0346     		mov	r3, r0
 534 0354 0C46     		mov	r4, r1
 535 0356 1846     		mov	r0, r3
 536 0358 2146     		mov	r1, r4
 537 035a FFF7FEFF 		bl	__aeabi_d2f
 538 035e 0346     		mov	r3, r0
 539 0360 FB61     		str	r3, [r7, #28]	@ float
 286:main.c        ****                         if(wave_temp > 255.0)
 540              		.loc 1 286 0
 541 0362 8E49     		ldr	r1, .L127+20
 542 0364 F869     		ldr	r0, [r7, #28]	@ float
 543 0366 FFF7FEFF 		bl	__aeabi_fcmpgt
 544 036a 0346     		mov	r3, r0
 545 036c 002B     		cmp	r3, #0
 546 036e 01D0     		beq	.L20
 287:main.c        ****                         {
 288:main.c        ****                             wave_temp = 255.0;
 547              		.loc 1 288 0
 548 0370 8A4B     		ldr	r3, .L127+20
 549 0372 FB61     		str	r3, [r7, #28]	@ float
 550              	.L20:
 289:main.c        ****                         }
 290:main.c        ****                         WaveformA_Buffer[i] = (uint8) wave_temp;
 551              		.loc 1 290 0 discriminator 2
 552 0374 BC8C     		ldrh	r4, [r7, #36]
 553 0376 F869     		ldr	r0, [r7, #28]	@ float
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 16


 554 0378 FFF7FEFF 		bl	__aeabi_f2uiz
 555 037c 0346     		mov	r3, r0
 556 037e DAB2     		uxtb	r2, r3
 557 0380 874B     		ldr	r3, .L127+24
 558 0382 1A55     		strb	r2, [r3, r4]
 282:main.c        **** 					{
 559              		.loc 1 282 0 discriminator 2
 560 0384 BB8C     		ldrh	r3, [r7, #36]
 561 0386 0133     		adds	r3, r3, #1
 562 0388 BB84     		strh	r3, [r7, #36]	@ movhi
 563              	.L19:
 282:main.c        **** 					{
 564              		.loc 1 282 0 is_stmt 0 discriminator 1
 565 038a BB8C     		ldrh	r3, [r7, #36]
 566 038c B3F5006F 		cmp	r3, #2048
 567 0390 B2D3     		bcc	.L22
 568 0392 00F020BF 		b	.L6
 569              	.L18:
 291:main.c        **** 					}   
 292:main.c        **** 				}
 293:main.c        **** 				else if(*psz == 'A') // Upper Case for AWG A
 570              		.loc 1 293 0 is_stmt 1
 571 0396 BB69     		ldr	r3, [r7, #24]
 572 0398 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 573 039a 412B     		cmp	r3, #65
 574 039c 60D1     		bne	.L23
 294:main.c        **** 				{
 295:main.c        **** 					// set the waveform amplitude
 296:main.c        **** 					// W A A0, where A0 is the a bit amplitude, 0 = 0%, 255 = 100%
 297:main.c        **** 					// program the waveform amplitude by copying it into the array that the waveform generator use
 298:main.c        **** 					// but scale it during the copy
 299:main.c        **** 					
 300:main.c        **** 					psz = strtok(0, " ");
 575              		.loc 1 300 0
 576 039e 8149     		ldr	r1, .L127+28
 577 03a0 0020     		movs	r0, #0
 578 03a2 FFF7FEFF 		bl	strtok
 579 03a6 B861     		str	r0, [r7, #24]
 301:main.c        **** 					sscanf(psz,"%hu", &avar);
 580              		.loc 1 301 0
 581 03a8 3B1D     		adds	r3, r7, #4
 582 03aa 1A46     		mov	r2, r3
 583 03ac 7E49     		ldr	r1, .L127+32
 584 03ae B869     		ldr	r0, [r7, #24]
 585 03b0 FFF7FEFF 		bl	sscanf
 302:main.c        **** 					
 303:main.c        **** 					wavea_gain = avar;
 586              		.loc 1 303 0
 587 03b4 BB88     		ldrh	r3, [r7, #4]
 588 03b6 DAB2     		uxtb	r2, r3
 589 03b8 764B     		ldr	r3, .L127+12
 590 03ba 1A70     		strb	r2, [r3]
 304:main.c        **** 					
 305:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 591              		.loc 1 305 0
 592 03bc 0023     		movs	r3, #0
 593 03be BB84     		strh	r3, [r7, #36]	@ movhi
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 17


 594 03c0 48E0     		b	.L24
 595              	.L27:
 306:main.c        **** 					{
 307:main.c        **** 						// GJL - add offset and max checking
 308:main.c        ****                         wave_temp = (((float) WaveformA_Temp_Buffer[i]) * ((float)wavea_gain)/255.0
 596              		.loc 1 308 0
 597 03c2 BB8C     		ldrh	r3, [r7, #36]
 598 03c4 724A     		ldr	r2, .L127+8
 599 03c6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 600 03c8 1846     		mov	r0, r3
 601 03ca FFF7FEFF 		bl	__aeabi_ui2f
 602 03ce 0446     		mov	r4, r0
 603 03d0 704B     		ldr	r3, .L127+12
 604 03d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 605 03d4 1846     		mov	r0, r3
 606 03d6 FFF7FEFF 		bl	__aeabi_ui2f
 607 03da 0346     		mov	r3, r0
 608 03dc 1946     		mov	r1, r3
 609 03de 2046     		mov	r0, r4
 610 03e0 FFF7FEFF 		bl	__aeabi_fmul
 611 03e4 0346     		mov	r3, r0
 612 03e6 1846     		mov	r0, r3
 613 03e8 FFF7FEFF 		bl	__aeabi_f2d
 614 03ec 66A3     		adr	r3, .L127
 615 03ee D3E90023 		ldrd	r2, [r3]
 616 03f2 FFF7FEFF 		bl	__aeabi_ddiv
 617 03f6 0346     		mov	r3, r0
 618 03f8 0C46     		mov	r4, r1
 619 03fa 2546     		mov	r5, r4
 620 03fc 1C46     		mov	r4, r3
 621 03fe 664B     		ldr	r3, .L127+16
 622 0400 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 623 0402 1846     		mov	r0, r3
 624 0404 FFF7FEFF 		bl	__aeabi_ui2f
 625 0408 0346     		mov	r3, r0
 626 040a 1846     		mov	r0, r3
 627 040c FFF7FEFF 		bl	__aeabi_f2d
 628 0410 0246     		mov	r2, r0
 629 0412 0B46     		mov	r3, r1
 630 0414 2046     		mov	r0, r4
 631 0416 2946     		mov	r1, r5
 632 0418 FFF7FEFF 		bl	__aeabi_dadd
 633 041c 0346     		mov	r3, r0
 634 041e 0C46     		mov	r4, r1
 635 0420 1846     		mov	r0, r3
 636 0422 2146     		mov	r1, r4
 637 0424 FFF7FEFF 		bl	__aeabi_d2f
 638 0428 0346     		mov	r3, r0
 639 042a FB61     		str	r3, [r7, #28]	@ float
 309:main.c        ****                         if(wave_temp > 255.0)
 640              		.loc 1 309 0
 641 042c 5B49     		ldr	r1, .L127+20
 642 042e F869     		ldr	r0, [r7, #28]	@ float
 643 0430 FFF7FEFF 		bl	__aeabi_fcmpgt
 644 0434 0346     		mov	r3, r0
 645 0436 002B     		cmp	r3, #0
 646 0438 01D0     		beq	.L25
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 18


 310:main.c        ****                         {
 311:main.c        ****                             wave_temp = 255.0;
 647              		.loc 1 311 0
 648 043a 584B     		ldr	r3, .L127+20
 649 043c FB61     		str	r3, [r7, #28]	@ float
 650              	.L25:
 312:main.c        ****                         }
 313:main.c        ****                         WaveformA_Buffer[i] = (uint8) wave_temp;
 651              		.loc 1 313 0 discriminator 2
 652 043e BC8C     		ldrh	r4, [r7, #36]
 653 0440 F869     		ldr	r0, [r7, #28]	@ float
 654 0442 FFF7FEFF 		bl	__aeabi_f2uiz
 655 0446 0346     		mov	r3, r0
 656 0448 DAB2     		uxtb	r2, r3
 657 044a 554B     		ldr	r3, .L127+24
 658 044c 1A55     		strb	r2, [r3, r4]
 305:main.c        **** 					{
 659              		.loc 1 305 0 discriminator 2
 660 044e BB8C     		ldrh	r3, [r7, #36]
 661 0450 0133     		adds	r3, r3, #1
 662 0452 BB84     		strh	r3, [r7, #36]	@ movhi
 663              	.L24:
 305:main.c        **** 					{
 664              		.loc 1 305 0 is_stmt 0 discriminator 1
 665 0454 BB8C     		ldrh	r3, [r7, #36]
 666 0456 B3F5006F 		cmp	r3, #2048
 667 045a B2D3     		bcc	.L27
 668 045c 00F0BBBE 		b	.L6
 669              	.L23:
 314:main.c        **** 					}              
 315:main.c        ****                     
 316:main.c        **** 				}
 317:main.c        **** 				// Add offset functionality
 318:main.c        ****                 else if(*psz == 'O') // Upper Case for AWG A
 670              		.loc 1 318 0 is_stmt 1
 671 0460 BB69     		ldr	r3, [r7, #24]
 672 0462 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 673 0464 4F2B     		cmp	r3, #79
 674 0466 60D1     		bne	.L28
 319:main.c        ****                 {
 320:main.c        ****                     // set waveform offset
 321:main.c        ****                     // W O O0 where O0 is the offset - 0 = 0%, 255 = 100%
 322:main.c        ****                     // program teh offset by copying it into the array that the waveform generator 
 323:main.c        ****                     // but adjust the values upwards during the copy
 324:main.c        ****                     
 325:main.c        ****                     psz = strtok(0, " ");
 675              		.loc 1 325 0
 676 0468 4E49     		ldr	r1, .L127+28
 677 046a 0020     		movs	r0, #0
 678 046c FFF7FEFF 		bl	strtok
 679 0470 B861     		str	r0, [r7, #24]
 326:main.c        **** 					sscanf(psz,"%hu", &avar);
 680              		.loc 1 326 0
 681 0472 3B1D     		adds	r3, r7, #4
 682 0474 1A46     		mov	r2, r3
 683 0476 4C49     		ldr	r1, .L127+32
 684 0478 B869     		ldr	r0, [r7, #24]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 19


 685 047a FFF7FEFF 		bl	sscanf
 327:main.c        **** 					
 328:main.c        **** 					wavea_offset = avar;
 686              		.loc 1 328 0
 687 047e BB88     		ldrh	r3, [r7, #4]
 688 0480 DAB2     		uxtb	r2, r3
 689 0482 454B     		ldr	r3, .L127+16
 690 0484 1A70     		strb	r2, [r3]
 329:main.c        **** 					
 330:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 691              		.loc 1 330 0
 692 0486 0023     		movs	r3, #0
 693 0488 BB84     		strh	r3, [r7, #36]	@ movhi
 694 048a 48E0     		b	.L29
 695              	.L32:
 331:main.c        **** 					{
 332:main.c        **** 						// GJL temp - add offset
 333:main.c        ****                         wave_temp = (((float) WaveformA_Temp_Buffer[i]) * ((float)wavea_gain)/255.0
 696              		.loc 1 333 0
 697 048c BB8C     		ldrh	r3, [r7, #36]
 698 048e 404A     		ldr	r2, .L127+8
 699 0490 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 700 0492 1846     		mov	r0, r3
 701 0494 FFF7FEFF 		bl	__aeabi_ui2f
 702 0498 0446     		mov	r4, r0
 703 049a 3E4B     		ldr	r3, .L127+12
 704 049c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 705 049e 1846     		mov	r0, r3
 706 04a0 FFF7FEFF 		bl	__aeabi_ui2f
 707 04a4 0346     		mov	r3, r0
 708 04a6 1946     		mov	r1, r3
 709 04a8 2046     		mov	r0, r4
 710 04aa FFF7FEFF 		bl	__aeabi_fmul
 711 04ae 0346     		mov	r3, r0
 712 04b0 1846     		mov	r0, r3
 713 04b2 FFF7FEFF 		bl	__aeabi_f2d
 714 04b6 34A3     		adr	r3, .L127
 715 04b8 D3E90023 		ldrd	r2, [r3]
 716 04bc FFF7FEFF 		bl	__aeabi_ddiv
 717 04c0 0346     		mov	r3, r0
 718 04c2 0C46     		mov	r4, r1
 719 04c4 2546     		mov	r5, r4
 720 04c6 1C46     		mov	r4, r3
 721 04c8 334B     		ldr	r3, .L127+16
 722 04ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 723 04cc 1846     		mov	r0, r3
 724 04ce FFF7FEFF 		bl	__aeabi_ui2f
 725 04d2 0346     		mov	r3, r0
 726 04d4 1846     		mov	r0, r3
 727 04d6 FFF7FEFF 		bl	__aeabi_f2d
 728 04da 0246     		mov	r2, r0
 729 04dc 0B46     		mov	r3, r1
 730 04de 2046     		mov	r0, r4
 731 04e0 2946     		mov	r1, r5
 732 04e2 FFF7FEFF 		bl	__aeabi_dadd
 733 04e6 0346     		mov	r3, r0
 734 04e8 0C46     		mov	r4, r1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 20


 735 04ea 1846     		mov	r0, r3
 736 04ec 2146     		mov	r1, r4
 737 04ee FFF7FEFF 		bl	__aeabi_d2f
 738 04f2 0346     		mov	r3, r0
 739 04f4 FB61     		str	r3, [r7, #28]	@ float
 334:main.c        ****                         if(wave_temp > 255.0)
 740              		.loc 1 334 0
 741 04f6 2949     		ldr	r1, .L127+20
 742 04f8 F869     		ldr	r0, [r7, #28]	@ float
 743 04fa FFF7FEFF 		bl	__aeabi_fcmpgt
 744 04fe 0346     		mov	r3, r0
 745 0500 002B     		cmp	r3, #0
 746 0502 01D0     		beq	.L30
 335:main.c        ****                         {
 336:main.c        ****                             wave_temp = 255.0;
 747              		.loc 1 336 0
 748 0504 254B     		ldr	r3, .L127+20
 749 0506 FB61     		str	r3, [r7, #28]	@ float
 750              	.L30:
 337:main.c        ****                         }
 338:main.c        ****                         WaveformA_Buffer[i] = (uint8) wave_temp;
 751              		.loc 1 338 0 discriminator 2
 752 0508 BC8C     		ldrh	r4, [r7, #36]
 753 050a F869     		ldr	r0, [r7, #28]	@ float
 754 050c FFF7FEFF 		bl	__aeabi_f2uiz
 755 0510 0346     		mov	r3, r0
 756 0512 DAB2     		uxtb	r2, r3
 757 0514 224B     		ldr	r3, .L127+24
 758 0516 1A55     		strb	r2, [r3, r4]
 330:main.c        **** 					{
 759              		.loc 1 330 0 discriminator 2
 760 0518 BB8C     		ldrh	r3, [r7, #36]
 761 051a 0133     		adds	r3, r3, #1
 762 051c BB84     		strh	r3, [r7, #36]	@ movhi
 763              	.L29:
 330:main.c        **** 					{
 764              		.loc 1 330 0 is_stmt 0 discriminator 1
 765 051e BB8C     		ldrh	r3, [r7, #36]
 766 0520 B3F5006F 		cmp	r3, #2048
 767 0524 B2D3     		bcc	.L32
 768 0526 00F056BE 		b	.L6
 769              	.L28:
 339:main.c        **** 					}              
 340:main.c        ****                 }
 341:main.c        ****                 else if(*psz == 'W') // Upper Case for AWG A
 770              		.loc 1 341 0 is_stmt 1
 771 052a BB69     		ldr	r3, [r7, #24]
 772 052c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 773 052e 572B     		cmp	r3, #87
 774 0530 10D1     		bne	.L33
 342:main.c        **** 				{
 343:main.c        **** 					// select the waveform output
 344:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEA_SELECT_MASK);
 775              		.loc 1 344 0
 776 0532 FFF7FEFF 		bl	Wave_Control_Read
 777 0536 0346     		mov	r3, r0
 778 0538 23F00103 		bic	r3, r3, #1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 21


 779 053c DBB2     		uxtb	r3, r3
 780 053e 1846     		mov	r0, r3
 781 0540 FFF7FEFF 		bl	Wave_Control_Write
 345:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 782              		.loc 1 345 0
 783 0544 FFF7FEFF 		bl	Wave_Control_Read
 784 0548 0346     		mov	r3, r0
 785 054a 1846     		mov	r0, r3
 786 054c FFF7FEFF 		bl	Wave_Control_Write
 787 0550 00F041BE 		b	.L6
 788              	.L33:
 346:main.c        **** 				}
 347:main.c        **** 				else if(*psz == 'N') // Upper Case for AWG A
 789              		.loc 1 347 0
 790 0554 BB69     		ldr	r3, [r7, #24]
 791 0556 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 792 0558 4E2B     		cmp	r3, #78
 793 055a 27D1     		bne	.L34
 348:main.c        **** 				{
 349:main.c        **** 					// select the noise output
 350:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEA_SELECT_MASK);
 794              		.loc 1 350 0
 795 055c FFF7FEFF 		bl	Wave_Control_Read
 796 0560 0346     		mov	r3, r0
 797 0562 23F00103 		bic	r3, r3, #1
 798 0566 DBB2     		uxtb	r3, r3
 799 0568 1846     		mov	r0, r3
 800 056a FFF7FEFF 		bl	Wave_Control_Write
 351:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVEA_SELECT_NOISE);
 801              		.loc 1 351 0
 802 056e FFF7FEFF 		bl	Wave_Control_Read
 803 0572 0346     		mov	r3, r0
 804 0574 43F00103 		orr	r3, r3, #1
 805 0578 DBB2     		uxtb	r3, r3
 806 057a 1846     		mov	r0, r3
 807 057c FFF7FEFF 		bl	Wave_Control_Write
 808 0580 00F029BE 		b	.L6
 809              	.L128:
 810 0584 AFF30080 		.align	3
 811              	.L127:
 812 0588 00000000 		.word	0
 813 058c 00E06F40 		.word	1081073664
 814 0590 00000000 		.word	WaveformA_Temp_Buffer
 815 0594 00000000 		.word	wavea_gain
 816 0598 00000000 		.word	wavea_offset
 817 059c 00007F43 		.word	1132396544
 818 05a0 00000000 		.word	WaveformA_Buffer
 819 05a4 00000000 		.word	.LC0
 820 05a8 18000000 		.word	.LC2
 821              	.L34:
 352:main.c        **** 				}
 353:main.c        **** 				else if(*psz == 'F') // Upper Case for AWG A
 822              		.loc 1 353 0
 823 05ac BB69     		ldr	r3, [r7, #24]
 824 05ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 825 05b0 462B     		cmp	r3, #70
 826 05b2 7BD1     		bne	.L35
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 22


 354:main.c        **** 				{
 355:main.c        **** 					// set the frequency output of the waveform generator
 356:main.c        **** 					// best thing to have here is an actual DDS in the hardware
 357:main.c        **** 					// but to get this working, I'm just going to fake it by setting
 358:main.c        **** 					// the clock divider.  It wont work for everything, but it should be
 359:main.c        **** 					// passable.  The command is W F F3 F2 F1 F0 where Fn are 8 bit ascii
 360:main.c        **** 					// numbers that are combined into a 32 bit phase accumulator value
 361:main.c        **** 					// phase value = desired output frequency / 0.09313225746 Hz
 362:main.c        **** 					
 363:main.c        **** 					psz = strtok(0, " ");
 827              		.loc 1 363 0
 828 05b4 B049     		ldr	r1, .L129+16
 829 05b6 0020     		movs	r0, #0
 830 05b8 FFF7FEFF 		bl	strtok
 831 05bc B861     		str	r0, [r7, #24]
 364:main.c        **** 					sscanf(psz,"%hu", &avar);
 832              		.loc 1 364 0
 833 05be 3B1D     		adds	r3, r7, #4
 834 05c0 1A46     		mov	r2, r3
 835 05c2 AE49     		ldr	r1, .L129+20
 836 05c4 B869     		ldr	r0, [r7, #24]
 837 05c6 FFF7FEFF 		bl	sscanf
 365:main.c        **** 					phase_int = ((uint32) avar)*16777216;
 838              		.loc 1 365 0
 839 05ca BB88     		ldrh	r3, [r7, #4]
 840 05cc 1B06     		lsls	r3, r3, #24
 841 05ce 3B62     		str	r3, [r7, #32]
 366:main.c        **** 					
 367:main.c        **** 					psz = strtok(0, " ");
 842              		.loc 1 367 0
 843 05d0 A949     		ldr	r1, .L129+16
 844 05d2 0020     		movs	r0, #0
 845 05d4 FFF7FEFF 		bl	strtok
 846 05d8 B861     		str	r0, [r7, #24]
 368:main.c        **** 					sscanf(psz,"%hu", &avar);
 847              		.loc 1 368 0
 848 05da 3B1D     		adds	r3, r7, #4
 849 05dc 1A46     		mov	r2, r3
 850 05de A749     		ldr	r1, .L129+20
 851 05e0 B869     		ldr	r0, [r7, #24]
 852 05e2 FFF7FEFF 		bl	sscanf
 369:main.c        **** 					phase_int += ((uint32) avar)*65536;
 853              		.loc 1 369 0
 854 05e6 BB88     		ldrh	r3, [r7, #4]
 855 05e8 1B04     		lsls	r3, r3, #16
 856 05ea 3A6A     		ldr	r2, [r7, #32]
 857 05ec 1344     		add	r3, r3, r2
 858 05ee 3B62     		str	r3, [r7, #32]
 370:main.c        **** 					
 371:main.c        **** 					psz = strtok(0, " ");
 859              		.loc 1 371 0
 860 05f0 A149     		ldr	r1, .L129+16
 861 05f2 0020     		movs	r0, #0
 862 05f4 FFF7FEFF 		bl	strtok
 863 05f8 B861     		str	r0, [r7, #24]
 372:main.c        **** 					sscanf(psz,"%hu", &avar);
 864              		.loc 1 372 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 23


 865 05fa 3B1D     		adds	r3, r7, #4
 866 05fc 1A46     		mov	r2, r3
 867 05fe 9F49     		ldr	r1, .L129+20
 868 0600 B869     		ldr	r0, [r7, #24]
 869 0602 FFF7FEFF 		bl	sscanf
 373:main.c        **** 					phase_int += ((uint32) avar)*256;
 870              		.loc 1 373 0
 871 0606 BB88     		ldrh	r3, [r7, #4]
 872 0608 1B02     		lsls	r3, r3, #8
 873 060a 3A6A     		ldr	r2, [r7, #32]
 874 060c 1344     		add	r3, r3, r2
 875 060e 3B62     		str	r3, [r7, #32]
 374:main.c        **** 					
 375:main.c        **** 					psz = strtok(0, " ");
 876              		.loc 1 375 0
 877 0610 9949     		ldr	r1, .L129+16
 878 0612 0020     		movs	r0, #0
 879 0614 FFF7FEFF 		bl	strtok
 880 0618 B861     		str	r0, [r7, #24]
 376:main.c        **** 					sscanf(psz,"%hu", &avar);
 881              		.loc 1 376 0
 882 061a 3B1D     		adds	r3, r7, #4
 883 061c 1A46     		mov	r2, r3
 884 061e 9749     		ldr	r1, .L129+20
 885 0620 B869     		ldr	r0, [r7, #24]
 886 0622 FFF7FEFF 		bl	sscanf
 377:main.c        **** 					phase_int += ((uint32) avar);
 887              		.loc 1 377 0
 888 0626 BB88     		ldrh	r3, [r7, #4]
 889 0628 1A46     		mov	r2, r3
 890 062a 3B6A     		ldr	r3, [r7, #32]
 891 062c 1344     		add	r3, r3, r2
 892 062e 3B62     		str	r3, [r7, #32]
 378:main.c        **** 					
 379:main.c        **** 					freq = ((float) phase_int)*.09313225746;
 893              		.loc 1 379 0
 894 0630 386A     		ldr	r0, [r7, #32]
 895 0632 FFF7FEFF 		bl	__aeabi_ui2f
 896 0636 0346     		mov	r3, r0
 897 0638 1846     		mov	r0, r3
 898 063a FFF7FEFF 		bl	__aeabi_f2d
 899 063e 8AA3     		adr	r3, .L129
 900 0640 D3E90023 		ldrd	r2, [r3]
 901 0644 FFF7FEFF 		bl	__aeabi_dmul
 902 0648 0346     		mov	r3, r0
 903 064a 0C46     		mov	r4, r1
 904 064c 1846     		mov	r0, r3
 905 064e 2146     		mov	r1, r4
 906 0650 FFF7FEFF 		bl	__aeabi_d2f
 907 0654 0346     		mov	r3, r0
 908 0656 FB60     		str	r3, [r7, #12]	@ float
 380:main.c        **** 					
 381:main.c        **** 					// calculate the clock divider
 382:main.c        **** 					phase_int = (int32) (36000000.0/((float) WAVEFORM_BUFFER_SIZE))/freq;
 909              		.loc 1 382 0
 910 0658 F968     		ldr	r1, [r7, #12]	@ float
 911 065a 8948     		ldr	r0, .L129+24
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 24


 912 065c FFF7FEFF 		bl	__aeabi_fdiv
 913 0660 0346     		mov	r3, r0
 914 0662 1846     		mov	r0, r3
 915 0664 FFF7FEFF 		bl	__aeabi_f2uiz
 916 0668 0346     		mov	r3, r0
 917 066a 3B62     		str	r3, [r7, #32]
 383:main.c        **** 					
 384:main.c        **** 					if(phase_int >= 65535)
 918              		.loc 1 384 0
 919 066c 3B6A     		ldr	r3, [r7, #32]
 920 066e 4FF6FE72 		movw	r2, #65534
 921 0672 9342     		cmp	r3, r2
 922 0674 03D9     		bls	.L36
 385:main.c        **** 					{
 386:main.c        **** 						phase_int = 65535;
 923              		.loc 1 386 0
 924 0676 4FF6FF73 		movw	r3, #65535
 925 067a 3B62     		str	r3, [r7, #32]
 926 067c 04E0     		b	.L37
 927              	.L36:
 387:main.c        **** 					}
 388:main.c        **** 					else if(phase_int <= 15) // anything less than this and the DMA doesn't have time to execute
 928              		.loc 1 388 0
 929 067e 3B6A     		ldr	r3, [r7, #32]
 930 0680 0F2B     		cmp	r3, #15
 931 0682 01D8     		bhi	.L37
 389:main.c        **** 					{
 390:main.c        **** 						phase_int = 15;
 932              		.loc 1 390 0
 933 0684 0F23     		movs	r3, #15
 934 0686 3B62     		str	r3, [r7, #32]
 935              	.L37:
 391:main.c        **** 					}
 392:main.c        **** 					
 393:main.c        **** 					WaveA_Clock_SetDividerValue((uint16) phase_int);
 936              		.loc 1 393 0
 937 0688 3B6A     		ldr	r3, [r7, #32]
 938 068a 9BB2     		uxth	r3, r3
 939 068c 013B     		subs	r3, r3, #1
 940 068e 9BB2     		uxth	r3, r3
 941 0690 0121     		movs	r1, #1
 942 0692 1846     		mov	r0, r3
 943 0694 FFF7FEFF 		bl	WaveA_Clock_SetDividerRegister
 394:main.c        ****                     NoiseA_Clock_SetDividerValue((uint16) phase_int);
 944              		.loc 1 394 0
 945 0698 3B6A     		ldr	r3, [r7, #32]
 946 069a 9BB2     		uxth	r3, r3
 947 069c 013B     		subs	r3, r3, #1
 948 069e 9BB2     		uxth	r3, r3
 949 06a0 0121     		movs	r1, #1
 950 06a2 1846     		mov	r0, r3
 951 06a4 FFF7FEFF 		bl	NoiseA_Clock_SetDividerRegister
 952 06a8 00F095BD 		b	.L6
 953              	.L35:
 395:main.c        **** 					
 396:main.c        **** 				}
 397:main.c        ****                 else if(*psz == 'L') // Set AWG Buffer Length Upper Case for AWG A
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 25


 954              		.loc 1 397 0
 955 06ac BB69     		ldr	r3, [r7, #24]
 956 06ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 957 06b0 4C2B     		cmp	r3, #76
 958 06b2 23D1     		bne	.L38
 398:main.c        ****                 {
 399:main.c        ****                     psz = strtok(0, " ");
 959              		.loc 1 399 0
 960 06b4 7049     		ldr	r1, .L129+16
 961 06b6 0020     		movs	r0, #0
 962 06b8 FFF7FEFF 		bl	strtok
 963 06bc B861     		str	r0, [r7, #24]
 400:main.c        **** 					sscanf(psz,"%hu", &avar); // Upper Byte
 964              		.loc 1 400 0
 965 06be 3B1D     		adds	r3, r7, #4
 966 06c0 1A46     		mov	r2, r3
 967 06c2 6E49     		ldr	r1, .L129+20
 968 06c4 B869     		ldr	r0, [r7, #24]
 969 06c6 FFF7FEFF 		bl	sscanf
 401:main.c        ****                     ulen = ((uint32) avar)*256;
 970              		.loc 1 401 0
 971 06ca BB88     		ldrh	r3, [r7, #4]
 972 06cc 1B02     		lsls	r3, r3, #8
 973 06ce 7B81     		strh	r3, [r7, #10]	@ movhi
 402:main.c        **** 					//
 403:main.c        **** 					psz = strtok(0, " ");
 974              		.loc 1 403 0
 975 06d0 6949     		ldr	r1, .L129+16
 976 06d2 0020     		movs	r0, #0
 977 06d4 FFF7FEFF 		bl	strtok
 978 06d8 B861     		str	r0, [r7, #24]
 404:main.c        **** 					sscanf(psz,"%hu", &avar); // Lower Byte
 979              		.loc 1 404 0
 980 06da 3B1D     		adds	r3, r7, #4
 981 06dc 1A46     		mov	r2, r3
 982 06de 6749     		ldr	r1, .L129+20
 983 06e0 B869     		ldr	r0, [r7, #24]
 984 06e2 FFF7FEFF 		bl	sscanf
 405:main.c        ****                     ulen = ulen + avar;
 985              		.loc 1 405 0
 986 06e6 BA88     		ldrh	r2, [r7, #4]
 987 06e8 7B89     		ldrh	r3, [r7, #10]	@ movhi
 988 06ea 1344     		add	r3, r3, r2
 989 06ec 7B81     		strh	r3, [r7, #10]	@ movhi
 406:main.c        ****                     //got the Length
 407:main.c        ****                     WaveA_DAC_Wave1Setup(&WaveformA_Buffer[0], ulen);
 990              		.loc 1 407 0
 991 06ee 7B89     		ldrh	r3, [r7, #10]
 992 06f0 1946     		mov	r1, r3
 993 06f2 6448     		ldr	r0, .L129+28
 994 06f4 FFF7FEFF 		bl	WaveA_DAC_Wave1Setup
 995 06f8 00F06DBD 		b	.L6
 996              	.L38:
 408:main.c        ****                 }
 409:main.c        ****                 else if(*psz == 'l') // Set AWG Buffer Length Lower Case for AWG B
 997              		.loc 1 409 0
 998 06fc BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 26


 999 06fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1000 0700 6C2B     		cmp	r3, #108
 1001 0702 23D1     		bne	.L39
 410:main.c        ****                 {
 411:main.c        ****                     psz = strtok(0, " ");
 1002              		.loc 1 411 0
 1003 0704 5C49     		ldr	r1, .L129+16
 1004 0706 0020     		movs	r0, #0
 1005 0708 FFF7FEFF 		bl	strtok
 1006 070c B861     		str	r0, [r7, #24]
 412:main.c        **** 					sscanf(psz,"%hu", &avar); // Upper Byte
 1007              		.loc 1 412 0
 1008 070e 3B1D     		adds	r3, r7, #4
 1009 0710 1A46     		mov	r2, r3
 1010 0712 5A49     		ldr	r1, .L129+20
 1011 0714 B869     		ldr	r0, [r7, #24]
 1012 0716 FFF7FEFF 		bl	sscanf
 413:main.c        ****                     ulen = ((uint32) avar)*256;
 1013              		.loc 1 413 0
 1014 071a BB88     		ldrh	r3, [r7, #4]
 1015 071c 1B02     		lsls	r3, r3, #8
 1016 071e 7B81     		strh	r3, [r7, #10]	@ movhi
 414:main.c        **** 					//
 415:main.c        **** 					psz = strtok(0, " ");
 1017              		.loc 1 415 0
 1018 0720 5549     		ldr	r1, .L129+16
 1019 0722 0020     		movs	r0, #0
 1020 0724 FFF7FEFF 		bl	strtok
 1021 0728 B861     		str	r0, [r7, #24]
 416:main.c        **** 					sscanf(psz,"%hu", &avar); // Lower Byte
 1022              		.loc 1 416 0
 1023 072a 3B1D     		adds	r3, r7, #4
 1024 072c 1A46     		mov	r2, r3
 1025 072e 5349     		ldr	r1, .L129+20
 1026 0730 B869     		ldr	r0, [r7, #24]
 1027 0732 FFF7FEFF 		bl	sscanf
 417:main.c        ****                     ulen = ulen + avar;
 1028              		.loc 1 417 0
 1029 0736 BA88     		ldrh	r2, [r7, #4]
 1030 0738 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1031 073a 1344     		add	r3, r3, r2
 1032 073c 7B81     		strh	r3, [r7, #10]	@ movhi
 418:main.c        ****                     //got the Length
 419:main.c        ****                     WaveB_DAC_Wave1Setup(&WaveformB_Buffer[0], ulen);
 1033              		.loc 1 419 0
 1034 073e 7B89     		ldrh	r3, [r7, #10]
 1035 0740 1946     		mov	r1, r3
 1036 0742 5148     		ldr	r0, .L129+32
 1037 0744 FFF7FEFF 		bl	WaveB_DAC_Wave1Setup
 1038 0748 00F045BD 		b	.L6
 1039              	.L39:
 420:main.c        ****                 }
 421:main.c        **** 				else if(*psz == 's') // Lower Case for AWG B
 1040              		.loc 1 421 0
 1041 074c BB69     		ldr	r3, [r7, #24]
 1042 074e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1043 0750 732B     		cmp	r3, #115
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 27


 1044 0752 31D1     		bne	.L40
 422:main.c        **** 				{
 423:main.c        **** 					// sample data into the buffer
 424:main.c        **** 					// command is W s H_ADDR L_ADDR DATA
 425:main.c        **** 					// ADDR is the 16 bits
 426:main.c        **** 					// DATA is the waveform amplitude 0 - 255
 427:main.c        **** 					psz = strtok(0, " ");
 1045              		.loc 1 427 0
 1046 0754 4849     		ldr	r1, .L129+16
 1047 0756 0020     		movs	r0, #0
 1048 0758 FFF7FEFF 		bl	strtok
 1049 075c B861     		str	r0, [r7, #24]
 428:main.c        **** 					sscanf(psz,"%hu", &avar);
 1050              		.loc 1 428 0
 1051 075e 3B1D     		adds	r3, r7, #4
 1052 0760 1A46     		mov	r2, r3
 1053 0762 4649     		ldr	r1, .L129+20
 1054 0764 B869     		ldr	r0, [r7, #24]
 1055 0766 FFF7FEFF 		bl	sscanf
 429:main.c        ****                     uaddr = ((uint32) avar)*256;
 1056              		.loc 1 429 0
 1057 076a BB88     		ldrh	r3, [r7, #4]
 1058 076c 1B02     		lsls	r3, r3, #8
 1059 076e 3B61     		str	r3, [r7, #16]
 430:main.c        **** 					//bvar = avar;  // something is wacky with sscanf.  if I dont move the data into bvar, then on
 431:main.c        **** 					// if I use another variable, avar gets reset to zero!
 432:main.c        **** 					psz = strtok(0, " ");
 1060              		.loc 1 432 0
 1061 0770 4149     		ldr	r1, .L129+16
 1062 0772 0020     		movs	r0, #0
 1063 0774 FFF7FEFF 		bl	strtok
 1064 0778 B861     		str	r0, [r7, #24]
 433:main.c        **** 					sscanf(psz,"%hu", &avar);
 1065              		.loc 1 433 0
 1066 077a 3B1D     		adds	r3, r7, #4
 1067 077c 1A46     		mov	r2, r3
 1068 077e 3F49     		ldr	r1, .L129+20
 1069 0780 B869     		ldr	r0, [r7, #24]
 1070 0782 FFF7FEFF 		bl	sscanf
 434:main.c        ****                     uaddr = uaddr + avar;
 1071              		.loc 1 434 0
 1072 0786 BB88     		ldrh	r3, [r7, #4]
 1073 0788 1A46     		mov	r2, r3
 1074 078a 3B69     		ldr	r3, [r7, #16]
 1075 078c 1344     		add	r3, r3, r2
 1076 078e 3B61     		str	r3, [r7, #16]
 435:main.c        ****                     // got the address
 436:main.c        **** 					psz = strtok(0, " ");
 1077              		.loc 1 436 0
 1078 0790 3949     		ldr	r1, .L129+16
 1079 0792 0020     		movs	r0, #0
 1080 0794 FFF7FEFF 		bl	strtok
 1081 0798 B861     		str	r0, [r7, #24]
 437:main.c        **** 					sscanf(psz,"%hu", &avar);
 1082              		.loc 1 437 0
 1083 079a 3B1D     		adds	r3, r7, #4
 1084 079c 1A46     		mov	r2, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 28


 1085 079e 3749     		ldr	r1, .L129+20
 1086 07a0 B869     		ldr	r0, [r7, #24]
 1087 07a2 FFF7FEFF 		bl	sscanf
 438:main.c        **** 					// got the data
 439:main.c        **** 					// store it in the buffer
 440:main.c        **** 					WaveformB_Temp_Buffer[uaddr] = avar;
 1088              		.loc 1 440 0
 1089 07a6 BB88     		ldrh	r3, [r7, #4]
 1090 07a8 D9B2     		uxtb	r1, r3
 1091 07aa 384A     		ldr	r2, .L129+36
 1092 07ac 3B69     		ldr	r3, [r7, #16]
 1093 07ae 1344     		add	r3, r3, r2
 1094 07b0 0A46     		mov	r2, r1
 1095 07b2 1A70     		strb	r2, [r3]
 1096 07b4 00F00FBD 		b	.L6
 1097              	.L40:
 441:main.c        **** 				}
 442:main.c        **** 				else if(*psz == 'p') // Lower Case for AWG B
 1098              		.loc 1 442 0
 1099 07b8 BB69     		ldr	r3, [r7, #24]
 1100 07ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1101 07bc 702B     		cmp	r3, #112
 1102 07be 6DD1     		bne	.L41
 443:main.c        **** 				{
 444:main.c        **** 					// program the waveform by copying it into the array that the waveform generator uses
 445:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 1103              		.loc 1 445 0
 1104 07c0 0023     		movs	r3, #0
 1105 07c2 BB84     		strh	r3, [r7, #36]	@ movhi
 1106 07c4 48E0     		b	.L42
 1107              	.L45:
 446:main.c        **** 					{
 447:main.c        **** 						// GJL - add offset and max checking
 448:main.c        ****                         wave_temp = (((float) WaveformB_Temp_Buffer[i]) * ((float)waveb_gain)/255.0
 1108              		.loc 1 448 0
 1109 07c6 BB8C     		ldrh	r3, [r7, #36]
 1110 07c8 304A     		ldr	r2, .L129+36
 1111 07ca D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1112 07cc 1846     		mov	r0, r3
 1113 07ce FFF7FEFF 		bl	__aeabi_ui2f
 1114 07d2 0446     		mov	r4, r0
 1115 07d4 2E4B     		ldr	r3, .L129+40
 1116 07d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1117 07d8 1846     		mov	r0, r3
 1118 07da FFF7FEFF 		bl	__aeabi_ui2f
 1119 07de 0346     		mov	r3, r0
 1120 07e0 1946     		mov	r1, r3
 1121 07e2 2046     		mov	r0, r4
 1122 07e4 FFF7FEFF 		bl	__aeabi_fmul
 1123 07e8 0346     		mov	r3, r0
 1124 07ea 1846     		mov	r0, r3
 1125 07ec FFF7FEFF 		bl	__aeabi_f2d
 1126 07f0 1FA3     		adr	r3, .L129+8
 1127 07f2 D3E90023 		ldrd	r2, [r3]
 1128 07f6 FFF7FEFF 		bl	__aeabi_ddiv
 1129 07fa 0346     		mov	r3, r0
 1130 07fc 0C46     		mov	r4, r1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 29


 1131 07fe 2546     		mov	r5, r4
 1132 0800 1C46     		mov	r4, r3
 1133 0802 244B     		ldr	r3, .L129+44
 1134 0804 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1135 0806 1846     		mov	r0, r3
 1136 0808 FFF7FEFF 		bl	__aeabi_ui2f
 1137 080c 0346     		mov	r3, r0
 1138 080e 1846     		mov	r0, r3
 1139 0810 FFF7FEFF 		bl	__aeabi_f2d
 1140 0814 0246     		mov	r2, r0
 1141 0816 0B46     		mov	r3, r1
 1142 0818 2046     		mov	r0, r4
 1143 081a 2946     		mov	r1, r5
 1144 081c FFF7FEFF 		bl	__aeabi_dadd
 1145 0820 0346     		mov	r3, r0
 1146 0822 0C46     		mov	r4, r1
 1147 0824 1846     		mov	r0, r3
 1148 0826 2146     		mov	r1, r4
 1149 0828 FFF7FEFF 		bl	__aeabi_d2f
 1150 082c 0346     		mov	r3, r0
 1151 082e FB61     		str	r3, [r7, #28]	@ float
 449:main.c        ****                         if(wave_temp > 255.0)
 1152              		.loc 1 449 0
 1153 0830 1949     		ldr	r1, .L129+48
 1154 0832 F869     		ldr	r0, [r7, #28]	@ float
 1155 0834 FFF7FEFF 		bl	__aeabi_fcmpgt
 1156 0838 0346     		mov	r3, r0
 1157 083a 002B     		cmp	r3, #0
 1158 083c 01D0     		beq	.L43
 450:main.c        ****                         {
 451:main.c        ****                             wave_temp = 255.0;
 1159              		.loc 1 451 0
 1160 083e 164B     		ldr	r3, .L129+48
 1161 0840 FB61     		str	r3, [r7, #28]	@ float
 1162              	.L43:
 452:main.c        ****                         }
 453:main.c        ****                         WaveformB_Buffer[i] = (uint8) wave_temp;
 1163              		.loc 1 453 0 discriminator 2
 1164 0842 BC8C     		ldrh	r4, [r7, #36]
 1165 0844 F869     		ldr	r0, [r7, #28]	@ float
 1166 0846 FFF7FEFF 		bl	__aeabi_f2uiz
 1167 084a 0346     		mov	r3, r0
 1168 084c DAB2     		uxtb	r2, r3
 1169 084e 0E4B     		ldr	r3, .L129+32
 1170 0850 1A55     		strb	r2, [r3, r4]
 445:main.c        **** 					{
 1171              		.loc 1 445 0 discriminator 2
 1172 0852 BB8C     		ldrh	r3, [r7, #36]
 1173 0854 0133     		adds	r3, r3, #1
 1174 0856 BB84     		strh	r3, [r7, #36]	@ movhi
 1175              	.L42:
 445:main.c        **** 					{
 1176              		.loc 1 445 0 is_stmt 0 discriminator 1
 1177 0858 BB8C     		ldrh	r3, [r7, #36]
 1178 085a B3F5006F 		cmp	r3, #2048
 1179 085e B2D3     		bcc	.L45
 1180 0860 00F0B9BC 		b	.L6
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 30


 1181              	.L130:
 1182 0864 AFF30080 		.align	3
 1183              	.L129:
 1184 0868 524CFEFF 		.word	-111534
 1185 086c 83D7B73F 		.word	1069012867
 1186 0870 00000000 		.word	0
 1187 0874 00E06F40 		.word	1081073664
 1188 0878 00000000 		.word	.LC0
 1189 087c 18000000 		.word	.LC2
 1190 0880 00548946 		.word	1183405056
 1191 0884 00000000 		.word	WaveformA_Buffer
 1192 0888 00000000 		.word	WaveformB_Buffer
 1193 088c 00000000 		.word	WaveformB_Temp_Buffer
 1194 0890 00000000 		.word	waveb_gain
 1195 0894 00000000 		.word	waveb_offset
 1196 0898 00007F43 		.word	1132396544
 1197              	.L41:
 454:main.c        **** 					}   
 455:main.c        **** 				}
 456:main.c        **** 				else if(*psz == 'a') // Lower Case for AWG B
 1198              		.loc 1 456 0 is_stmt 1
 1199 089c BB69     		ldr	r3, [r7, #24]
 1200 089e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1201 08a0 612B     		cmp	r3, #97
 1202 08a2 60D1     		bne	.L46
 457:main.c        **** 				{
 458:main.c        **** 					// set the waveform amplitude
 459:main.c        **** 					// W a A0, where A0 is the a bit amplitude, 0 = 0%, 255 = 100%
 460:main.c        **** 					// program the waveform amplitude by copying it into the array that the waveform generator use
 461:main.c        **** 					// but scale it during the copy
 462:main.c        **** 					
 463:main.c        **** 					psz = strtok(0, " ");
 1203              		.loc 1 463 0
 1204 08a4 B049     		ldr	r1, .L131+16
 1205 08a6 0020     		movs	r0, #0
 1206 08a8 FFF7FEFF 		bl	strtok
 1207 08ac B861     		str	r0, [r7, #24]
 464:main.c        **** 					sscanf(psz,"%hu", &avar);
 1208              		.loc 1 464 0
 1209 08ae 3B1D     		adds	r3, r7, #4
 1210 08b0 1A46     		mov	r2, r3
 1211 08b2 AE49     		ldr	r1, .L131+20
 1212 08b4 B869     		ldr	r0, [r7, #24]
 1213 08b6 FFF7FEFF 		bl	sscanf
 465:main.c        **** 					
 466:main.c        **** 					waveb_gain = avar;
 1214              		.loc 1 466 0
 1215 08ba BB88     		ldrh	r3, [r7, #4]
 1216 08bc DAB2     		uxtb	r2, r3
 1217 08be AC4B     		ldr	r3, .L131+24
 1218 08c0 1A70     		strb	r2, [r3]
 467:main.c        **** 					
 468:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 1219              		.loc 1 468 0
 1220 08c2 0023     		movs	r3, #0
 1221 08c4 BB84     		strh	r3, [r7, #36]	@ movhi
 1222 08c6 48E0     		b	.L47
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 31


 1223              	.L50:
 469:main.c        **** 					{
 470:main.c        **** 						// Add offset and max checking
 471:main.c        ****                         wave_temp = (((float) WaveformB_Temp_Buffer[i]) * ((float)waveb_gain)/255.0
 1224              		.loc 1 471 0
 1225 08c8 BB8C     		ldrh	r3, [r7, #36]
 1226 08ca AA4A     		ldr	r2, .L131+28
 1227 08cc D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1228 08ce 1846     		mov	r0, r3
 1229 08d0 FFF7FEFF 		bl	__aeabi_ui2f
 1230 08d4 0446     		mov	r4, r0
 1231 08d6 A64B     		ldr	r3, .L131+24
 1232 08d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1233 08da 1846     		mov	r0, r3
 1234 08dc FFF7FEFF 		bl	__aeabi_ui2f
 1235 08e0 0346     		mov	r3, r0
 1236 08e2 1946     		mov	r1, r3
 1237 08e4 2046     		mov	r0, r4
 1238 08e6 FFF7FEFF 		bl	__aeabi_fmul
 1239 08ea 0346     		mov	r3, r0
 1240 08ec 1846     		mov	r0, r3
 1241 08ee FFF7FEFF 		bl	__aeabi_f2d
 1242 08f2 99A3     		adr	r3, .L131
 1243 08f4 D3E90023 		ldrd	r2, [r3]
 1244 08f8 FFF7FEFF 		bl	__aeabi_ddiv
 1245 08fc 0346     		mov	r3, r0
 1246 08fe 0C46     		mov	r4, r1
 1247 0900 2546     		mov	r5, r4
 1248 0902 1C46     		mov	r4, r3
 1249 0904 9C4B     		ldr	r3, .L131+32
 1250 0906 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1251 0908 1846     		mov	r0, r3
 1252 090a FFF7FEFF 		bl	__aeabi_ui2f
 1253 090e 0346     		mov	r3, r0
 1254 0910 1846     		mov	r0, r3
 1255 0912 FFF7FEFF 		bl	__aeabi_f2d
 1256 0916 0246     		mov	r2, r0
 1257 0918 0B46     		mov	r3, r1
 1258 091a 2046     		mov	r0, r4
 1259 091c 2946     		mov	r1, r5
 1260 091e FFF7FEFF 		bl	__aeabi_dadd
 1261 0922 0346     		mov	r3, r0
 1262 0924 0C46     		mov	r4, r1
 1263 0926 1846     		mov	r0, r3
 1264 0928 2146     		mov	r1, r4
 1265 092a FFF7FEFF 		bl	__aeabi_d2f
 1266 092e 0346     		mov	r3, r0
 1267 0930 FB61     		str	r3, [r7, #28]	@ float
 472:main.c        ****                         if(wave_temp > 255.0)
 1268              		.loc 1 472 0
 1269 0932 9249     		ldr	r1, .L131+36
 1270 0934 F869     		ldr	r0, [r7, #28]	@ float
 1271 0936 FFF7FEFF 		bl	__aeabi_fcmpgt
 1272 093a 0346     		mov	r3, r0
 1273 093c 002B     		cmp	r3, #0
 1274 093e 01D0     		beq	.L48
 473:main.c        ****                         {
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 32


 474:main.c        ****                             wave_temp = 255.0;
 1275              		.loc 1 474 0
 1276 0940 8E4B     		ldr	r3, .L131+36
 1277 0942 FB61     		str	r3, [r7, #28]	@ float
 1278              	.L48:
 475:main.c        ****                         }
 476:main.c        ****                         WaveformB_Buffer[i] = (uint8) wave_temp;
 1279              		.loc 1 476 0 discriminator 2
 1280 0944 BC8C     		ldrh	r4, [r7, #36]
 1281 0946 F869     		ldr	r0, [r7, #28]	@ float
 1282 0948 FFF7FEFF 		bl	__aeabi_f2uiz
 1283 094c 0346     		mov	r3, r0
 1284 094e DAB2     		uxtb	r2, r3
 1285 0950 8B4B     		ldr	r3, .L131+40
 1286 0952 1A55     		strb	r2, [r3, r4]
 468:main.c        **** 					{
 1287              		.loc 1 468 0 discriminator 2
 1288 0954 BB8C     		ldrh	r3, [r7, #36]
 1289 0956 0133     		adds	r3, r3, #1
 1290 0958 BB84     		strh	r3, [r7, #36]	@ movhi
 1291              	.L47:
 468:main.c        **** 					{
 1292              		.loc 1 468 0 is_stmt 0 discriminator 1
 1293 095a BB8C     		ldrh	r3, [r7, #36]
 1294 095c B3F5006F 		cmp	r3, #2048
 1295 0960 B2D3     		bcc	.L50
 1296 0962 00F038BC 		b	.L6
 1297              	.L46:
 477:main.c        **** 					}              
 478:main.c        ****                     
 479:main.c        **** 				}
 480:main.c        **** 				// Add offset functionality
 481:main.c        ****                 else if(*psz == 'o') // Lower Case for AWG B
 1298              		.loc 1 481 0 is_stmt 1
 1299 0966 BB69     		ldr	r3, [r7, #24]
 1300 0968 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1301 096a 6F2B     		cmp	r3, #111
 1302 096c 5FD1     		bne	.L51
 482:main.c        ****                 {
 483:main.c        ****                     // set waveform offset
 484:main.c        ****                     // W o O0 where O0 is the offset - 0 = 0%, 255 = 100%
 485:main.c        ****                     // program teh offset by copying it into the array that the waveform generator 
 486:main.c        ****                     // but adjust the values upwards during the copy
 487:main.c        ****                     
 488:main.c        ****                     psz = strtok(0, " ");
 1303              		.loc 1 488 0
 1304 096e 7E49     		ldr	r1, .L131+16
 1305 0970 0020     		movs	r0, #0
 1306 0972 FFF7FEFF 		bl	strtok
 1307 0976 B861     		str	r0, [r7, #24]
 489:main.c        **** 					sscanf(psz,"%hu", &avar);
 1308              		.loc 1 489 0
 1309 0978 3B1D     		adds	r3, r7, #4
 1310 097a 1A46     		mov	r2, r3
 1311 097c 7B49     		ldr	r1, .L131+20
 1312 097e B869     		ldr	r0, [r7, #24]
 1313 0980 FFF7FEFF 		bl	sscanf
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 33


 490:main.c        **** 					
 491:main.c        **** 					waveb_offset = avar;
 1314              		.loc 1 491 0
 1315 0984 BB88     		ldrh	r3, [r7, #4]
 1316 0986 DAB2     		uxtb	r2, r3
 1317 0988 7B4B     		ldr	r3, .L131+32
 1318 098a 1A70     		strb	r2, [r3]
 492:main.c        **** 					
 493:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 1319              		.loc 1 493 0
 1320 098c 0023     		movs	r3, #0
 1321 098e BB84     		strh	r3, [r7, #36]	@ movhi
 1322 0990 48E0     		b	.L52
 1323              	.L55:
 494:main.c        **** 					{
 495:main.c        **** 						// GJL temp - add offset
 496:main.c        ****                         wave_temp = (((float) WaveformB_Temp_Buffer[i]) * ((float)waveb_gain)/255.0
 1324              		.loc 1 496 0
 1325 0992 BB8C     		ldrh	r3, [r7, #36]
 1326 0994 774A     		ldr	r2, .L131+28
 1327 0996 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1328 0998 1846     		mov	r0, r3
 1329 099a FFF7FEFF 		bl	__aeabi_ui2f
 1330 099e 0446     		mov	r4, r0
 1331 09a0 734B     		ldr	r3, .L131+24
 1332 09a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1333 09a4 1846     		mov	r0, r3
 1334 09a6 FFF7FEFF 		bl	__aeabi_ui2f
 1335 09aa 0346     		mov	r3, r0
 1336 09ac 1946     		mov	r1, r3
 1337 09ae 2046     		mov	r0, r4
 1338 09b0 FFF7FEFF 		bl	__aeabi_fmul
 1339 09b4 0346     		mov	r3, r0
 1340 09b6 1846     		mov	r0, r3
 1341 09b8 FFF7FEFF 		bl	__aeabi_f2d
 1342 09bc 66A3     		adr	r3, .L131
 1343 09be D3E90023 		ldrd	r2, [r3]
 1344 09c2 FFF7FEFF 		bl	__aeabi_ddiv
 1345 09c6 0346     		mov	r3, r0
 1346 09c8 0C46     		mov	r4, r1
 1347 09ca 2546     		mov	r5, r4
 1348 09cc 1C46     		mov	r4, r3
 1349 09ce 6A4B     		ldr	r3, .L131+32
 1350 09d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1351 09d2 1846     		mov	r0, r3
 1352 09d4 FFF7FEFF 		bl	__aeabi_ui2f
 1353 09d8 0346     		mov	r3, r0
 1354 09da 1846     		mov	r0, r3
 1355 09dc FFF7FEFF 		bl	__aeabi_f2d
 1356 09e0 0246     		mov	r2, r0
 1357 09e2 0B46     		mov	r3, r1
 1358 09e4 2046     		mov	r0, r4
 1359 09e6 2946     		mov	r1, r5
 1360 09e8 FFF7FEFF 		bl	__aeabi_dadd
 1361 09ec 0346     		mov	r3, r0
 1362 09ee 0C46     		mov	r4, r1
 1363 09f0 1846     		mov	r0, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 34


 1364 09f2 2146     		mov	r1, r4
 1365 09f4 FFF7FEFF 		bl	__aeabi_d2f
 1366 09f8 0346     		mov	r3, r0
 1367 09fa FB61     		str	r3, [r7, #28]	@ float
 497:main.c        ****                         if(wave_temp > 255.0)
 1368              		.loc 1 497 0
 1369 09fc 5F49     		ldr	r1, .L131+36
 1370 09fe F869     		ldr	r0, [r7, #28]	@ float
 1371 0a00 FFF7FEFF 		bl	__aeabi_fcmpgt
 1372 0a04 0346     		mov	r3, r0
 1373 0a06 002B     		cmp	r3, #0
 1374 0a08 01D0     		beq	.L53
 498:main.c        ****                         {
 499:main.c        ****                             wave_temp = 255.0;
 1375              		.loc 1 499 0
 1376 0a0a 5C4B     		ldr	r3, .L131+36
 1377 0a0c FB61     		str	r3, [r7, #28]	@ float
 1378              	.L53:
 500:main.c        ****                         }
 501:main.c        ****                         WaveformB_Buffer[i] = (uint8) wave_temp;
 1379              		.loc 1 501 0 discriminator 2
 1380 0a0e BC8C     		ldrh	r4, [r7, #36]
 1381 0a10 F869     		ldr	r0, [r7, #28]	@ float
 1382 0a12 FFF7FEFF 		bl	__aeabi_f2uiz
 1383 0a16 0346     		mov	r3, r0
 1384 0a18 DAB2     		uxtb	r2, r3
 1385 0a1a 594B     		ldr	r3, .L131+40
 1386 0a1c 1A55     		strb	r2, [r3, r4]
 493:main.c        **** 					{
 1387              		.loc 1 493 0 discriminator 2
 1388 0a1e BB8C     		ldrh	r3, [r7, #36]
 1389 0a20 0133     		adds	r3, r3, #1
 1390 0a22 BB84     		strh	r3, [r7, #36]	@ movhi
 1391              	.L52:
 493:main.c        **** 					{
 1392              		.loc 1 493 0 is_stmt 0 discriminator 1
 1393 0a24 BB8C     		ldrh	r3, [r7, #36]
 1394 0a26 B3F5006F 		cmp	r3, #2048
 1395 0a2a B2D3     		bcc	.L55
 1396 0a2c D3E3     		b	.L6
 1397              	.L51:
 502:main.c        **** 					}              
 503:main.c        ****                 }
 504:main.c        ****                 else if(*psz == 'w') // Lower Case for AWG B
 1398              		.loc 1 504 0 is_stmt 1
 1399 0a2e BB69     		ldr	r3, [r7, #24]
 1400 0a30 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1401 0a32 772B     		cmp	r3, #119
 1402 0a34 0FD1     		bne	.L56
 505:main.c        **** 				{
 506:main.c        **** 					// select the waveform output
 507:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEB_SELECT_MASK);
 1403              		.loc 1 507 0
 1404 0a36 FFF7FEFF 		bl	Wave_Control_Read
 1405 0a3a 0346     		mov	r3, r0
 1406 0a3c 23F00403 		bic	r3, r3, #4
 1407 0a40 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 35


 1408 0a42 1846     		mov	r0, r3
 1409 0a44 FFF7FEFF 		bl	Wave_Control_Write
 508:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 1410              		.loc 1 508 0
 1411 0a48 FFF7FEFF 		bl	Wave_Control_Read
 1412 0a4c 0346     		mov	r3, r0
 1413 0a4e 1846     		mov	r0, r3
 1414 0a50 FFF7FEFF 		bl	Wave_Control_Write
 1415 0a54 BFE3     		b	.L6
 1416              	.L56:
 509:main.c        **** 				}
 510:main.c        **** 				else if(*psz == 'n') // Lower Case for AWG B
 1417              		.loc 1 510 0
 1418 0a56 BB69     		ldr	r3, [r7, #24]
 1419 0a58 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1420 0a5a 6E2B     		cmp	r3, #110
 1421 0a5c 12D1     		bne	.L57
 511:main.c        **** 				{
 512:main.c        **** 					// select the noise output
 513:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEB_SELECT_MASK);
 1422              		.loc 1 513 0
 1423 0a5e FFF7FEFF 		bl	Wave_Control_Read
 1424 0a62 0346     		mov	r3, r0
 1425 0a64 23F00403 		bic	r3, r3, #4
 1426 0a68 DBB2     		uxtb	r3, r3
 1427 0a6a 1846     		mov	r0, r3
 1428 0a6c FFF7FEFF 		bl	Wave_Control_Write
 514:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVEB_SELECT_NOISE);
 1429              		.loc 1 514 0
 1430 0a70 FFF7FEFF 		bl	Wave_Control_Read
 1431 0a74 0346     		mov	r3, r0
 1432 0a76 43F00403 		orr	r3, r3, #4
 1433 0a7a DBB2     		uxtb	r3, r3
 1434 0a7c 1846     		mov	r0, r3
 1435 0a7e FFF7FEFF 		bl	Wave_Control_Write
 1436 0a82 A8E3     		b	.L6
 1437              	.L57:
 515:main.c        **** 				}
 516:main.c        **** 				else if(*psz == 'f') // Lower Case for AWG B
 1438              		.loc 1 516 0
 1439 0a84 BB69     		ldr	r3, [r7, #24]
 1440 0a86 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1441 0a88 662B     		cmp	r3, #102
 1442 0a8a 40F08B80 		bne	.L58
 517:main.c        **** 				{
 518:main.c        **** 					// set the frequency output of the waveform generator
 519:main.c        **** 					// best thing to have here is an actual DDS in the hardware
 520:main.c        **** 					// but to get this working, I'm just going to fake it by setting
 521:main.c        **** 					// the clock divider.  It wont work for everything, but it should be
 522:main.c        **** 					// passable.  The command is W f F3 F2 F1 F0 where Fn are 8 bit ascii
 523:main.c        **** 					// numbers that are combined into a 32 bit phase accumulator value
 524:main.c        **** 					// phase value = desired output frequency / 0.09313225746 Hz
 525:main.c        **** 					
 526:main.c        **** 					psz = strtok(0, " ");
 1443              		.loc 1 526 0
 1444 0a8e 3649     		ldr	r1, .L131+16
 1445 0a90 0020     		movs	r0, #0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 36


 1446 0a92 FFF7FEFF 		bl	strtok
 1447 0a96 B861     		str	r0, [r7, #24]
 527:main.c        **** 					sscanf(psz,"%hu", &avar);
 1448              		.loc 1 527 0
 1449 0a98 3B1D     		adds	r3, r7, #4
 1450 0a9a 1A46     		mov	r2, r3
 1451 0a9c 3349     		ldr	r1, .L131+20
 1452 0a9e B869     		ldr	r0, [r7, #24]
 1453 0aa0 FFF7FEFF 		bl	sscanf
 528:main.c        **** 					phase_int = ((uint32) avar)*16777216;
 1454              		.loc 1 528 0
 1455 0aa4 BB88     		ldrh	r3, [r7, #4]
 1456 0aa6 1B06     		lsls	r3, r3, #24
 1457 0aa8 3B62     		str	r3, [r7, #32]
 529:main.c        **** 					
 530:main.c        **** 					psz = strtok(0, " ");
 1458              		.loc 1 530 0
 1459 0aaa 2F49     		ldr	r1, .L131+16
 1460 0aac 0020     		movs	r0, #0
 1461 0aae FFF7FEFF 		bl	strtok
 1462 0ab2 B861     		str	r0, [r7, #24]
 531:main.c        **** 					sscanf(psz,"%hu", &avar);
 1463              		.loc 1 531 0
 1464 0ab4 3B1D     		adds	r3, r7, #4
 1465 0ab6 1A46     		mov	r2, r3
 1466 0ab8 2C49     		ldr	r1, .L131+20
 1467 0aba B869     		ldr	r0, [r7, #24]
 1468 0abc FFF7FEFF 		bl	sscanf
 532:main.c        **** 					phase_int += ((uint32) avar)*65536;
 1469              		.loc 1 532 0
 1470 0ac0 BB88     		ldrh	r3, [r7, #4]
 1471 0ac2 1B04     		lsls	r3, r3, #16
 1472 0ac4 3A6A     		ldr	r2, [r7, #32]
 1473 0ac6 1344     		add	r3, r3, r2
 1474 0ac8 3B62     		str	r3, [r7, #32]
 533:main.c        **** 					
 534:main.c        **** 					psz = strtok(0, " ");
 1475              		.loc 1 534 0
 1476 0aca 2749     		ldr	r1, .L131+16
 1477 0acc 0020     		movs	r0, #0
 1478 0ace FFF7FEFF 		bl	strtok
 1479 0ad2 B861     		str	r0, [r7, #24]
 535:main.c        **** 					sscanf(psz,"%hu", &avar);
 1480              		.loc 1 535 0
 1481 0ad4 3B1D     		adds	r3, r7, #4
 1482 0ad6 1A46     		mov	r2, r3
 1483 0ad8 2449     		ldr	r1, .L131+20
 1484 0ada B869     		ldr	r0, [r7, #24]
 1485 0adc FFF7FEFF 		bl	sscanf
 536:main.c        **** 					phase_int += ((uint32) avar)*256;
 1486              		.loc 1 536 0
 1487 0ae0 BB88     		ldrh	r3, [r7, #4]
 1488 0ae2 1B02     		lsls	r3, r3, #8
 1489 0ae4 3A6A     		ldr	r2, [r7, #32]
 1490 0ae6 1344     		add	r3, r3, r2
 1491 0ae8 3B62     		str	r3, [r7, #32]
 537:main.c        **** 					
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 37


 538:main.c        **** 					psz = strtok(0, " ");
 1492              		.loc 1 538 0
 1493 0aea 1F49     		ldr	r1, .L131+16
 1494 0aec 0020     		movs	r0, #0
 1495 0aee FFF7FEFF 		bl	strtok
 1496 0af2 B861     		str	r0, [r7, #24]
 539:main.c        **** 					sscanf(psz,"%hu", &avar);
 1497              		.loc 1 539 0
 1498 0af4 3B1D     		adds	r3, r7, #4
 1499 0af6 1A46     		mov	r2, r3
 1500 0af8 1C49     		ldr	r1, .L131+20
 1501 0afa B869     		ldr	r0, [r7, #24]
 1502 0afc FFF7FEFF 		bl	sscanf
 540:main.c        **** 					phase_int += ((uint32) avar);
 1503              		.loc 1 540 0
 1504 0b00 BB88     		ldrh	r3, [r7, #4]
 1505 0b02 1A46     		mov	r2, r3
 1506 0b04 3B6A     		ldr	r3, [r7, #32]
 1507 0b06 1344     		add	r3, r3, r2
 1508 0b08 3B62     		str	r3, [r7, #32]
 541:main.c        **** 					
 542:main.c        **** 					freq = ((float) phase_int)*.09313225746;
 1509              		.loc 1 542 0
 1510 0b0a 386A     		ldr	r0, [r7, #32]
 1511 0b0c FFF7FEFF 		bl	__aeabi_ui2f
 1512 0b10 0346     		mov	r3, r0
 1513 0b12 1846     		mov	r0, r3
 1514 0b14 FFF7FEFF 		bl	__aeabi_f2d
 1515 0b18 11A3     		adr	r3, .L131+8
 1516 0b1a D3E90023 		ldrd	r2, [r3]
 1517 0b1e FFF7FEFF 		bl	__aeabi_dmul
 1518 0b22 0346     		mov	r3, r0
 1519 0b24 0C46     		mov	r4, r1
 1520 0b26 1846     		mov	r0, r3
 1521 0b28 2146     		mov	r1, r4
 1522 0b2a FFF7FEFF 		bl	__aeabi_d2f
 1523 0b2e 0346     		mov	r3, r0
 1524 0b30 FB60     		str	r3, [r7, #12]	@ float
 543:main.c        **** 					
 544:main.c        **** 					// calculate the clock divider
 545:main.c        **** 					phase_int = (int32) (36000000.0/((float) WAVEFORM_BUFFER_SIZE))/freq;
 1525              		.loc 1 545 0
 1526 0b32 F968     		ldr	r1, [r7, #12]	@ float
 1527 0b34 1348     		ldr	r0, .L131+44
 1528 0b36 FFF7FEFF 		bl	__aeabi_fdiv
 1529 0b3a 0346     		mov	r3, r0
 1530 0b3c 1846     		mov	r0, r3
 1531 0b3e FFF7FEFF 		bl	__aeabi_f2uiz
 1532 0b42 0346     		mov	r3, r0
 1533 0b44 3B62     		str	r3, [r7, #32]
 546:main.c        **** 					
 547:main.c        **** 					if(phase_int >= 65535)
 1534              		.loc 1 547 0
 1535 0b46 3B6A     		ldr	r3, [r7, #32]
 1536 0b48 4FF6FE72 		movw	r2, #65534
 1537 0b4c 9342     		cmp	r3, r2
 1538 0b4e 1BD9     		bls	.L59
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 38


 548:main.c        **** 					{
 549:main.c        **** 						phase_int = 65535;
 1539              		.loc 1 549 0
 1540 0b50 4FF6FF73 		movw	r3, #65535
 1541 0b54 3B62     		str	r3, [r7, #32]
 1542 0b56 1CE0     		b	.L60
 1543              	.L132:
 1544              		.align	3
 1545              	.L131:
 1546 0b58 00000000 		.word	0
 1547 0b5c 00E06F40 		.word	1081073664
 1548 0b60 524CFEFF 		.word	-111534
 1549 0b64 83D7B73F 		.word	1069012867
 1550 0b68 00000000 		.word	.LC0
 1551 0b6c 18000000 		.word	.LC2
 1552 0b70 00000000 		.word	waveb_gain
 1553 0b74 00000000 		.word	WaveformB_Temp_Buffer
 1554 0b78 00000000 		.word	waveb_offset
 1555 0b7c 00007F43 		.word	1132396544
 1556 0b80 00000000 		.word	WaveformB_Buffer
 1557 0b84 00548946 		.word	1183405056
 1558              	.L59:
 550:main.c        **** 					}
 551:main.c        **** 					else if(phase_int <= 15) // anything less than this and the DMA doesn't have time to execute
 1559              		.loc 1 551 0
 1560 0b88 3B6A     		ldr	r3, [r7, #32]
 1561 0b8a 0F2B     		cmp	r3, #15
 1562 0b8c 01D8     		bhi	.L60
 552:main.c        **** 					{
 553:main.c        **** 						phase_int = 15;
 1563              		.loc 1 553 0
 1564 0b8e 0F23     		movs	r3, #15
 1565 0b90 3B62     		str	r3, [r7, #32]
 1566              	.L60:
 554:main.c        **** 					}
 555:main.c        **** 					
 556:main.c        **** 					WaveA_Clock_SetDividerValue((uint16) phase_int);
 1567              		.loc 1 556 0
 1568 0b92 3B6A     		ldr	r3, [r7, #32]
 1569 0b94 9BB2     		uxth	r3, r3
 1570 0b96 013B     		subs	r3, r3, #1
 1571 0b98 9BB2     		uxth	r3, r3
 1572 0b9a 0121     		movs	r1, #1
 1573 0b9c 1846     		mov	r0, r3
 1574 0b9e FFF7FEFF 		bl	WaveA_Clock_SetDividerRegister
 1575 0ba2 18E3     		b	.L6
 1576              	.L58:
 557:main.c        ****                     // NoiseB_Clock_SetDividerValue((uint16) phase_int);
 558:main.c        **** 					
 559:main.c        **** 				}
 560:main.c        ****                 else if(*psz == 'X')
 1577              		.loc 1 560 0
 1578 0ba4 BB69     		ldr	r3, [r7, #24]
 1579 0ba6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1580 0ba8 582B     		cmp	r3, #88
 1581 0baa 40F01483 		bne	.L6
 561:main.c        **** 				{
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 39


 562:main.c        **** 					// set the Aux DAC level
 563:main.c        **** 					// Data comes back as a single byte representing the value to write to the DAC
 564:main.c        **** 					// W X VAL
 565:main.c        ****                     // Grab the byte value from the USB and write it to the DAC
 566:main.c        **** 					psz = strtok(0, " ");
 1582              		.loc 1 566 0
 1583 0bae B949     		ldr	r1, .L133
 1584 0bb0 0020     		movs	r0, #0
 1585 0bb2 FFF7FEFF 		bl	strtok
 1586 0bb6 B861     		str	r0, [r7, #24]
 567:main.c        **** 					sscanf(psz,"%hu", &avar);
 1587              		.loc 1 567 0
 1588 0bb8 3B1D     		adds	r3, r7, #4
 1589 0bba 1A46     		mov	r2, r3
 1590 0bbc B649     		ldr	r1, .L133+4
 1591 0bbe B869     		ldr	r0, [r7, #24]
 1592 0bc0 FFF7FEFF 		bl	sscanf
 568:main.c        **** 					AuxDAC_1_SetValue((uint8) avar);
 1593              		.loc 1 568 0
 1594 0bc4 BB88     		ldrh	r3, [r7, #4]
 1595 0bc6 DBB2     		uxtb	r3, r3
 1596 0bc8 1846     		mov	r0, r3
 1597 0bca FFF7FEFF 		bl	AuxDAC_1_SetValue
 1598 0bce 02E3     		b	.L6
 1599              	.L15:
 569:main.c        **** 				}
 570:main.c        **** 			}
 571:main.c        **** 			else if(*psz == 'S')
 1600              		.loc 1 571 0
 1601 0bd0 BB69     		ldr	r3, [r7, #24]
 1602 0bd2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1603 0bd4 532B     		cmp	r3, #83
 1604 0bd6 40F0FB82 		bne	.L61
 572:main.c        **** 			{
 573:main.c        **** 				// scope commands
 574:main.c        **** 				
 575:main.c        **** 				psz = strtok(0, " ");
 1605              		.loc 1 575 0
 1606 0bda AE49     		ldr	r1, .L133
 1607 0bdc 0020     		movs	r0, #0
 1608 0bde FFF7FEFF 		bl	strtok
 1609 0be2 B861     		str	r0, [r7, #24]
 576:main.c        **** 				if(*psz == 'O')
 1610              		.loc 1 576 0
 1611 0be4 BB69     		ldr	r3, [r7, #24]
 1612 0be6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1613 0be8 4F2B     		cmp	r3, #79
 1614 0bea 0FD1     		bne	.L62
 577:main.c        **** 				{
 578:main.c        **** 					// read offset from EEPROM command
 579:main.c        **** 					PutChar('O');
 1615              		.loc 1 579 0
 1616 0bec 4F20     		movs	r0, #79
 1617 0bee FFF7FEFF 		bl	PutChar
 580:main.c        **** 					PutChar(128); // A
 1618              		.loc 1 580 0
 1619 0bf2 8020     		movs	r0, #128
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 40


 1620 0bf4 FFF7FEFF 		bl	PutChar
 581:main.c        **** 					PutChar(128); // a
 1621              		.loc 1 581 0
 1622 0bf8 8020     		movs	r0, #128
 1623 0bfa FFF7FEFF 		bl	PutChar
 582:main.c        **** 					PutChar(128); // B
 1624              		.loc 1 582 0
 1625 0bfe 8020     		movs	r0, #128
 1626 0c00 FFF7FEFF 		bl	PutChar
 583:main.c        **** 					PutChar(128); // b
 1627              		.loc 1 583 0
 1628 0c04 8020     		movs	r0, #128
 1629 0c06 FFF7FEFF 		bl	PutChar
 1630 0c0a E4E2     		b	.L6
 1631              	.L62:
 584:main.c        **** 					
 585:main.c        **** 				}
 586:main.c        **** 				else if(*psz == 'T')
 1632              		.loc 1 586 0
 1633 0c0c BB69     		ldr	r3, [r7, #24]
 1634 0c0e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1635 0c10 542B     		cmp	r3, #84
 1636 0c12 10D1     		bne	.L64
 587:main.c        **** 				{
 588:main.c        **** 					// set the trigger level
 589:main.c        **** 					// Data comes back as a single byte representing the value to write to the DAC
 590:main.c        **** 					// S T VAL
 591:main.c        ****                     // Grab the trigger byte value from the USB and write it to the DAC
 592:main.c        **** 					psz = strtok(0, " ");
 1637              		.loc 1 592 0
 1638 0c14 9F49     		ldr	r1, .L133
 1639 0c16 0020     		movs	r0, #0
 1640 0c18 FFF7FEFF 		bl	strtok
 1641 0c1c B861     		str	r0, [r7, #24]
 593:main.c        **** 					sscanf(psz,"%hu", &avar);
 1642              		.loc 1 593 0
 1643 0c1e 3B1D     		adds	r3, r7, #4
 1644 0c20 1A46     		mov	r2, r3
 1645 0c22 9D49     		ldr	r1, .L133+4
 1646 0c24 B869     		ldr	r0, [r7, #24]
 1647 0c26 FFF7FEFF 		bl	sscanf
 594:main.c        **** 					Vtrigger_SetValue((uint8) avar);
 1648              		.loc 1 594 0
 1649 0c2a BB88     		ldrh	r3, [r7, #4]
 1650 0c2c DBB2     		uxtb	r3, r3
 1651 0c2e 1846     		mov	r0, r3
 1652 0c30 FFF7FEFF 		bl	Vtrigger_SetValue
 1653 0c34 CFE2     		b	.L6
 1654              	.L64:
 595:main.c        **** 				}
 596:main.c        **** 				else if(*psz == 'C')
 1655              		.loc 1 596 0
 1656 0c36 BB69     		ldr	r3, [r7, #24]
 1657 0c38 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1658 0c3a 432B     		cmp	r3, #67
 1659 0c3c 33D1     		bne	.L65
 597:main.c        **** 				{
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 41


 598:main.c        **** 					// Post trigger buffer size
 599:main.c        **** 					// data comes back as two ascii strings, each representing an 8 bit value
 600:main.c        **** 					// S C C_HIGH C_LOW where C_HIGH and C_LOW represent a 10 bit number
 601:main.c        **** 					psz = strtok(0, " ");
 1660              		.loc 1 601 0
 1661 0c3e 9549     		ldr	r1, .L133
 1662 0c40 0020     		movs	r0, #0
 1663 0c42 FFF7FEFF 		bl	strtok
 1664 0c46 B861     		str	r0, [r7, #24]
 602:main.c        **** 					sscanf(psz,"%hu", &avar);
 1665              		.loc 1 602 0
 1666 0c48 3B1D     		adds	r3, r7, #4
 1667 0c4a 1A46     		mov	r2, r3
 1668 0c4c 9249     		ldr	r1, .L133+4
 1669 0c4e B869     		ldr	r0, [r7, #24]
 1670 0c50 FFF7FEFF 		bl	sscanf
 603:main.c        **** 					bvar = avar*256;
 1671              		.loc 1 603 0
 1672 0c54 BB88     		ldrh	r3, [r7, #4]
 1673 0c56 1B02     		lsls	r3, r3, #8
 1674 0c58 FB84     		strh	r3, [r7, #38]	@ movhi
 604:main.c        **** 					
 605:main.c        **** 					psz = strtok(0, " ");
 1675              		.loc 1 605 0
 1676 0c5a 8E49     		ldr	r1, .L133
 1677 0c5c 0020     		movs	r0, #0
 1678 0c5e FFF7FEFF 		bl	strtok
 1679 0c62 B861     		str	r0, [r7, #24]
 606:main.c        **** 					sscanf(psz,"%hu", &avar);
 1680              		.loc 1 606 0
 1681 0c64 3B1D     		adds	r3, r7, #4
 1682 0c66 1A46     		mov	r2, r3
 1683 0c68 8B49     		ldr	r1, .L133+4
 1684 0c6a B869     		ldr	r0, [r7, #24]
 1685 0c6c FFF7FEFF 		bl	sscanf
 607:main.c        **** 					bvar += avar;
 1686              		.loc 1 607 0
 1687 0c70 BA88     		ldrh	r2, [r7, #4]
 1688 0c72 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 1689 0c74 1344     		add	r3, r3, r2
 1690 0c76 FB84     		strh	r3, [r7, #38]	@ movhi
 608:main.c        **** 					
 609:main.c        **** 					if(bvar >= (BUFFER_SIZE-1))
 1691              		.loc 1 609 0
 1692 0c78 FB8C     		ldrh	r3, [r7, #38]
 1693 0c7a 40F2FE32 		movw	r2, #1022
 1694 0c7e 9342     		cmp	r3, r2
 1695 0c80 03D9     		bls	.L66
 610:main.c        **** 					{
 611:main.c        **** 						bvar = (BUFFER_SIZE-1);  // maximum post trigger buffer size
 1696              		.loc 1 611 0
 1697 0c82 40F2FF33 		movw	r3, #1023
 1698 0c86 FB84     		strh	r3, [r7, #38]	@ movhi
 1699 0c88 04E0     		b	.L67
 1700              	.L66:
 612:main.c        **** 					}
 613:main.c        **** 					else if(bvar <= 2)
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 42


 1701              		.loc 1 613 0
 1702 0c8a FB8C     		ldrh	r3, [r7, #38]
 1703 0c8c 022B     		cmp	r3, #2
 1704 0c8e 01D8     		bhi	.L67
 614:main.c        **** 					{
 615:main.c        **** 						bvar = 2; // minimum post trigger buffer size
 1705              		.loc 1 615 0
 1706 0c90 0223     		movs	r3, #2
 1707 0c92 FB84     		strh	r3, [r7, #38]	@ movhi
 1708              	.L67:
 616:main.c        **** 					}
 617:main.c        **** 					
 618:main.c        **** 					// update the period to match the trigger buffer size post trigger capture
 619:main.c        **** 					PWM_Sample_Buffer_WritePeriod(bvar); // post trigger buffer
 1709              		.loc 1 619 0
 1710 0c94 FB8C     		ldrh	r3, [r7, #38]
 1711 0c96 1846     		mov	r0, r3
 1712 0c98 FFF7FEFF 		bl	PWM_Sample_Buffer_WritePeriod
 620:main.c        **** 					// after setting the period, need to set the count to the proper value as well
 621:main.c        **** 					PWM_Sample_Buffer_WriteCounter(bvar); // post trigger buffer					
 1713              		.loc 1 621 0
 1714 0c9c FB8C     		ldrh	r3, [r7, #38]
 1715 0c9e 1846     		mov	r0, r3
 1716 0ca0 FFF7FEFF 		bl	PWM_Sample_Buffer_WriteCounter
 1717 0ca4 97E2     		b	.L6
 1718              	.L65:
 622:main.c        **** 				}
 623:main.c        **** 				else if(*psz == 'R')
 1719              		.loc 1 623 0
 1720 0ca6 BB69     		ldr	r3, [r7, #24]
 1721 0ca8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1722 0caa 522B     		cmp	r3, #82
 1723 0cac 40F0F880 		bne	.L68
 624:main.c        **** 				{
 625:main.c        **** 					// Scope control register update
 626:main.c        **** 					// data comes back as an ascii number, representing an 8 bit value
 627:main.c        **** 					// bit 7: unused
 628:main.c        **** 					// bit 6: Internal (0, a or b as defined later) or External Trigger (1)
 629:main.c        **** 					// bit 5: trigger polarity, rising (0) or falling (1)
 630:main.c        **** 					// bit 4: trigger source, A (0) or B (1)
 631:main.c        **** 					// bits 3:0 -> sample rate 20 Msps / (2^thisval) this val can be 0 - 15
 632:main.c        **** 					psz = strtok(0, " ");
 1724              		.loc 1 632 0
 1725 0cb0 7849     		ldr	r1, .L133
 1726 0cb2 0020     		movs	r0, #0
 1727 0cb4 FFF7FEFF 		bl	strtok
 1728 0cb8 B861     		str	r0, [r7, #24]
 633:main.c        **** 					sscanf(psz,"%hu", &avar);
 1729              		.loc 1 633 0
 1730 0cba 3B1D     		adds	r3, r7, #4
 1731 0cbc 1A46     		mov	r2, r3
 1732 0cbe 7649     		ldr	r1, .L133+4
 1733 0cc0 B869     		ldr	r0, [r7, #24]
 1734 0cc2 FFF7FEFF 		bl	sscanf
 634:main.c        **** 					
 635:main.c        **** 					// internal versus external trigger
 636:main.c        **** 					// bit 6
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 43


 637:main.c        **** 					if((avar & 0x40) == 0)
 1735              		.loc 1 637 0
 1736 0cc6 BB88     		ldrh	r3, [r7, #4]
 1737 0cc8 03F04003 		and	r3, r3, #64
 1738 0ccc 002B     		cmp	r3, #0
 1739 0cce 2AD1     		bne	.L69
 638:main.c        **** 					{
 639:main.c        **** 						// internal trigger
 640:main.c        **** 						// trigger polarity
 641:main.c        **** 						// bit 5
 642:main.c        **** 						if((avar & 0x20) == 0)
 1740              		.loc 1 642 0
 1741 0cd0 BB88     		ldrh	r3, [r7, #4]
 1742 0cd2 03F02003 		and	r3, r3, #32
 1743 0cd6 002B     		cmp	r3, #0
 1744 0cd8 12D1     		bne	.L70
 643:main.c        **** 						{
 644:main.c        **** 							// rising edge
 645:main.c        **** 							Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1745              		.loc 1 645 0
 1746 0cda FFF7FEFF 		bl	Trigger_Control_Read
 1747 0cde 0346     		mov	r3, r0
 1748 0ce0 23F00F03 		bic	r3, r3, #15
 1749 0ce4 DBB2     		uxtb	r3, r3
 1750 0ce6 1846     		mov	r0, r3
 1751 0ce8 FFF7FEFF 		bl	Trigger_Control_Write
 646:main.c        ****     						Trigger_Control_Write(Trigger_Control_Read() | RISING_EDGE_TRIGGERED);
 1752              		.loc 1 646 0
 1753 0cec FFF7FEFF 		bl	Trigger_Control_Read
 1754 0cf0 0346     		mov	r3, r0
 1755 0cf2 43F00203 		orr	r3, r3, #2
 1756 0cf6 DBB2     		uxtb	r3, r3
 1757 0cf8 1846     		mov	r0, r3
 1758 0cfa FFF7FEFF 		bl	Trigger_Control_Write
 1759 0cfe 24E0     		b	.L72
 1760              	.L70:
 647:main.c        **** 						}
 648:main.c        **** 						else
 649:main.c        **** 						{
 650:main.c        **** 							// falling edge
 651:main.c        **** 							Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1761              		.loc 1 651 0
 1762 0d00 FFF7FEFF 		bl	Trigger_Control_Read
 1763 0d04 0346     		mov	r3, r0
 1764 0d06 23F00F03 		bic	r3, r3, #15
 1765 0d0a DBB2     		uxtb	r3, r3
 1766 0d0c 1846     		mov	r0, r3
 1767 0d0e FFF7FEFF 		bl	Trigger_Control_Write
 652:main.c        ****     						Trigger_Control_Write(Trigger_Control_Read() | FALLING_EDGE_TRIGGERED);
 1768              		.loc 1 652 0
 1769 0d12 FFF7FEFF 		bl	Trigger_Control_Read
 1770 0d16 0346     		mov	r3, r0
 1771 0d18 43F00103 		orr	r3, r3, #1
 1772 0d1c DBB2     		uxtb	r3, r3
 1773 0d1e 1846     		mov	r0, r3
 1774 0d20 FFF7FEFF 		bl	Trigger_Control_Write
 1775 0d24 11E0     		b	.L72
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 44


 1776              	.L69:
 653:main.c        **** 						}
 654:main.c        **** 					}
 655:main.c        **** 					else
 656:main.c        **** 					{
 657:main.c        **** 						// external trigger
 658:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1777              		.loc 1 658 0
 1778 0d26 FFF7FEFF 		bl	Trigger_Control_Read
 1779 0d2a 0346     		mov	r3, r0
 1780 0d2c 23F00F03 		bic	r3, r3, #15
 1781 0d30 DBB2     		uxtb	r3, r3
 1782 0d32 1846     		mov	r0, r3
 1783 0d34 FFF7FEFF 		bl	Trigger_Control_Write
 659:main.c        ****     					Trigger_Control_Write(Trigger_Control_Read() | EXTERNAL_TRIGGERED);
 1784              		.loc 1 659 0
 1785 0d38 FFF7FEFF 		bl	Trigger_Control_Read
 1786 0d3c 0346     		mov	r3, r0
 1787 0d3e 43F00803 		orr	r3, r3, #8
 1788 0d42 DBB2     		uxtb	r3, r3
 1789 0d44 1846     		mov	r0, r3
 1790 0d46 FFF7FEFF 		bl	Trigger_Control_Write
 1791              	.L72:
 660:main.c        **** 					}
 661:main.c        **** 					// bit 4
 662:main.c        **** 					// trigger source select
 663:main.c        **** 					if((avar & 0x10) == 0)
 1792              		.loc 1 663 0
 1793 0d4a BB88     		ldrh	r3, [r7, #4]
 1794 0d4c 03F01003 		and	r3, r3, #16
 1795 0d50 002B     		cmp	r3, #0
 1796 0d52 06D1     		bne	.L73
 664:main.c        **** 					{
 665:main.c        **** 						// channel 1 / A
 666:main.c        **** 						trigger_source = SCOPE_CHANNEL_1;
 1797              		.loc 1 666 0
 1798 0d54 514B     		ldr	r3, .L133+8
 1799 0d56 0022     		movs	r2, #0
 1800 0d58 1A70     		strb	r2, [r3]
 667:main.c        **** 						Amux_Trigger_Select(SCOPE_CHANNEL_1);
 1801              		.loc 1 667 0
 1802 0d5a 0020     		movs	r0, #0
 1803 0d5c FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1804 0d60 05E0     		b	.L74
 1805              	.L73:
 668:main.c        **** 					}
 669:main.c        **** 					else
 670:main.c        **** 					{
 671:main.c        **** 					    // channel 2 / B
 672:main.c        **** 						trigger_source = SCOPE_CHANNEL_2;
 1806              		.loc 1 672 0
 1807 0d62 4E4B     		ldr	r3, .L133+8
 1808 0d64 0122     		movs	r2, #1
 1809 0d66 1A70     		strb	r2, [r3]
 673:main.c        **** 						Amux_Trigger_Select(SCOPE_CHANNEL_2);
 1810              		.loc 1 673 0
 1811 0d68 0120     		movs	r0, #1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 45


 1812 0d6a FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1813              	.L74:
 674:main.c        **** 					}
 675:main.c        **** 					
 676:main.c        **** 					// sample rate
 677:main.c        **** 					// bit 3:0
 678:main.c        **** 					if((avar & 0x0f) <= 0) // 818.2 Ksps "maximum" sample rate
 1814              		.loc 1 678 0
 1815 0d6e BB88     		ldrh	r3, [r7, #4]
 1816 0d70 03F00F03 		and	r3, r3, #15
 1817 0d74 002B     		cmp	r3, #0
 1818 0d76 04DC     		bgt	.L75
 679:main.c        **** 					{
 680:main.c        ****                         // 36 Mhz master clock divided by this number and then divided by 
 681:main.c        ****                         // 18 due to the freq divider set the ADC sample rate.
 682:main.c        **** 						SampleClock_SetDividerValue(1); 
 1819              		.loc 1 682 0
 1820 0d78 0121     		movs	r1, #1
 1821 0d7a 0020     		movs	r0, #0
 1822 0d7c FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1823 0d80 29E2     		b	.L6
 1824              	.L75:
 683:main.c        **** 					}
 684:main.c        **** 					else if((avar & 0x0f) == 1) // 409.1 ksps
 1825              		.loc 1 684 0
 1826 0d82 BB88     		ldrh	r3, [r7, #4]
 1827 0d84 03F00F03 		and	r3, r3, #15
 1828 0d88 012B     		cmp	r3, #1
 1829 0d8a 04D1     		bne	.L77
 685:main.c        **** 					{
 686:main.c        **** 						SampleClock_SetDividerValue(2);
 1830              		.loc 1 686 0
 1831 0d8c 0121     		movs	r1, #1
 1832 0d8e 0120     		movs	r0, #1
 1833 0d90 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1834 0d94 1FE2     		b	.L6
 1835              	.L77:
 687:main.c        **** 					}
 688:main.c        **** 					else if((avar & 0x0f) == 2) // 204.5 ksps
 1836              		.loc 1 688 0
 1837 0d96 BB88     		ldrh	r3, [r7, #4]
 1838 0d98 03F00F03 		and	r3, r3, #15
 1839 0d9c 022B     		cmp	r3, #2
 1840 0d9e 04D1     		bne	.L78
 689:main.c        **** 					{
 690:main.c        **** 						SampleClock_SetDividerValue(4);
 1841              		.loc 1 690 0
 1842 0da0 0121     		movs	r1, #1
 1843 0da2 0320     		movs	r0, #3
 1844 0da4 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1845 0da8 15E2     		b	.L6
 1846              	.L78:
 691:main.c        **** 					}
 692:main.c        **** 					else if((avar & 0x0f) == 3) // 102.3 ksps
 1847              		.loc 1 692 0
 1848 0daa BB88     		ldrh	r3, [r7, #4]
 1849 0dac 03F00F03 		and	r3, r3, #15
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 46


 1850 0db0 032B     		cmp	r3, #3
 1851 0db2 04D1     		bne	.L79
 693:main.c        **** 					{
 694:main.c        **** 						SampleClock_SetDividerValue(8);
 1852              		.loc 1 694 0
 1853 0db4 0121     		movs	r1, #1
 1854 0db6 0720     		movs	r0, #7
 1855 0db8 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1856 0dbc 0BE2     		b	.L6
 1857              	.L79:
 695:main.c        **** 					}
 696:main.c        **** 					else if((avar & 0x0f) == 4) // 51.1 ksps
 1858              		.loc 1 696 0
 1859 0dbe BB88     		ldrh	r3, [r7, #4]
 1860 0dc0 03F00F03 		and	r3, r3, #15
 1861 0dc4 042B     		cmp	r3, #4
 1862 0dc6 04D1     		bne	.L80
 697:main.c        **** 					{ 
 698:main.c        **** 						SampleClock_SetDividerValue(16);
 1863              		.loc 1 698 0
 1864 0dc8 0121     		movs	r1, #1
 1865 0dca 0F20     		movs	r0, #15
 1866 0dcc FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1867 0dd0 01E2     		b	.L6
 1868              	.L80:
 699:main.c        **** 					}
 700:main.c        **** 					else if((avar & 0x0f) == 5) // 25.6 ksps
 1869              		.loc 1 700 0
 1870 0dd2 BB88     		ldrh	r3, [r7, #4]
 1871 0dd4 03F00F03 		and	r3, r3, #15
 1872 0dd8 052B     		cmp	r3, #5
 1873 0dda 04D1     		bne	.L81
 701:main.c        **** 					{
 702:main.c        **** 						SampleClock_SetDividerValue(32);
 1874              		.loc 1 702 0
 1875 0ddc 0121     		movs	r1, #1
 1876 0dde 1F20     		movs	r0, #31
 1877 0de0 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1878 0de4 F7E1     		b	.L6
 1879              	.L81:
 703:main.c        **** 					}
 704:main.c        **** 					else if((avar & 0x0f) == 6) // 12.8 ksps
 1880              		.loc 1 704 0
 1881 0de6 BB88     		ldrh	r3, [r7, #4]
 1882 0de8 03F00F03 		and	r3, r3, #15
 1883 0dec 062B     		cmp	r3, #6
 1884 0dee 04D1     		bne	.L82
 705:main.c        **** 					{
 706:main.c        **** 						SampleClock_SetDividerValue(64);
 1885              		.loc 1 706 0
 1886 0df0 0121     		movs	r1, #1
 1887 0df2 3F20     		movs	r0, #63
 1888 0df4 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1889 0df8 EDE1     		b	.L6
 1890              	.L82:
 707:main.c        **** 					}
 708:main.c        **** 					else if((avar & 0x0f) == 7) // 6.4 ksps
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 47


 1891              		.loc 1 708 0
 1892 0dfa BB88     		ldrh	r3, [r7, #4]
 1893 0dfc 03F00F03 		and	r3, r3, #15
 1894 0e00 072B     		cmp	r3, #7
 1895 0e02 04D1     		bne	.L83
 709:main.c        **** 					{ 
 710:main.c        **** 						SampleClock_SetDividerValue(128);
 1896              		.loc 1 710 0
 1897 0e04 0121     		movs	r1, #1
 1898 0e06 7F20     		movs	r0, #127
 1899 0e08 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1900 0e0c E3E1     		b	.L6
 1901              	.L83:
 711:main.c        **** 					}
 712:main.c        **** 					else if((avar & 0x0f) == 8) // 3.2 ksps
 1902              		.loc 1 712 0
 1903 0e0e BB88     		ldrh	r3, [r7, #4]
 1904 0e10 03F00F03 		and	r3, r3, #15
 1905 0e14 082B     		cmp	r3, #8
 1906 0e16 04D1     		bne	.L84
 713:main.c        **** 					{
 714:main.c        **** 						SampleClock_SetDividerValue(256);
 1907              		.loc 1 714 0
 1908 0e18 0121     		movs	r1, #1
 1909 0e1a FF20     		movs	r0, #255
 1910 0e1c FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1911 0e20 D9E1     		b	.L6
 1912              	.L84:
 715:main.c        **** 					}
 716:main.c        **** 					else if((avar & 0x0f) == 9) // 1.6 ksps
 1913              		.loc 1 716 0
 1914 0e22 BB88     		ldrh	r3, [r7, #4]
 1915 0e24 03F00F03 		and	r3, r3, #15
 1916 0e28 092B     		cmp	r3, #9
 1917 0e2a 05D1     		bne	.L85
 717:main.c        **** 					{
 718:main.c        **** 						SampleClock_SetDividerValue(512);
 1918              		.loc 1 718 0
 1919 0e2c 0121     		movs	r1, #1
 1920 0e2e 40F2FF10 		movw	r0, #511
 1921 0e32 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1922 0e36 CEE1     		b	.L6
 1923              	.L85:
 719:main.c        **** 					}
 720:main.c        **** 					else if((avar & 0x0f) == 10) // 799 sps 
 1924              		.loc 1 720 0
 1925 0e38 BB88     		ldrh	r3, [r7, #4]
 1926 0e3a 03F00F03 		and	r3, r3, #15
 1927 0e3e 0A2B     		cmp	r3, #10
 1928 0e40 05D1     		bne	.L86
 721:main.c        **** 					{ 
 722:main.c        **** 						SampleClock_SetDividerValue(1024);
 1929              		.loc 1 722 0
 1930 0e42 0121     		movs	r1, #1
 1931 0e44 40F2FF30 		movw	r0, #1023
 1932 0e48 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1933 0e4c C3E1     		b	.L6
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 48


 1934              	.L86:
 723:main.c        **** 					}
 724:main.c        **** 					else if((avar & 0x0f) == 11) // 400 sps
 1935              		.loc 1 724 0
 1936 0e4e BB88     		ldrh	r3, [r7, #4]
 1937 0e50 03F00F03 		and	r3, r3, #15
 1938 0e54 0B2B     		cmp	r3, #11
 1939 0e56 05D1     		bne	.L87
 725:main.c        **** 					{ 
 726:main.c        **** 						SampleClock_SetDividerValue(2048);
 1940              		.loc 1 726 0
 1941 0e58 0121     		movs	r1, #1
 1942 0e5a 40F2FF70 		movw	r0, #2047
 1943 0e5e FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1944 0e62 B8E1     		b	.L6
 1945              	.L87:
 727:main.c        **** 					}                    
 728:main.c        **** 					else if((avar & 0x0f) == 12) // 200 sps
 1946              		.loc 1 728 0
 1947 0e64 BB88     		ldrh	r3, [r7, #4]
 1948 0e66 03F00F03 		and	r3, r3, #15
 1949 0e6a 0C2B     		cmp	r3, #12
 1950 0e6c 05D1     		bne	.L88
 729:main.c        **** 					{ 
 730:main.c        **** 						SampleClock_SetDividerValue(4096);
 1951              		.loc 1 730 0
 1952 0e6e 0121     		movs	r1, #1
 1953 0e70 40F6FF70 		movw	r0, #4095
 1954 0e74 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1955 0e78 ADE1     		b	.L6
 1956              	.L88:
 731:main.c        **** 					}
 732:main.c        **** 					else if((avar & 0x0f) >= 13) // 100 sps
 1957              		.loc 1 732 0
 1958 0e7a BB88     		ldrh	r3, [r7, #4]
 1959 0e7c 03F00F03 		and	r3, r3, #15
 1960 0e80 0C2B     		cmp	r3, #12
 1961 0e82 40F3A881 		ble	.L6
 733:main.c        **** 					{ 
 734:main.c        **** 						SampleClock_SetDividerValue(8192);
 1962              		.loc 1 734 0
 1963 0e86 0121     		movs	r1, #1
 1964 0e88 41F6FF70 		movw	r0, #8191
 1965 0e8c FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1966 0e90 A1E1     		b	.L6
 1967              	.L134:
 1968 0e92 00BF     		.align	2
 1969              	.L133:
 1970 0e94 00000000 		.word	.LC0
 1971 0e98 18000000 		.word	.LC2
 1972 0e9c 00000000 		.word	trigger_source
 1973              	.L68:
 735:main.c        **** 					}
 736:main.c        ****                 }
 737:main.c        **** 				else if(*psz == 'D')
 1974              		.loc 1 737 0
 1975 0ea0 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 49


 1976 0ea2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1977 0ea4 442B     		cmp	r3, #68
 1978 0ea6 59D1     		bne	.L89
 738:main.c        **** 				{
 739:main.c        **** 					// Scope debug hardware command
 740:main.c        **** 					// data comes back as an ascii number, representing a single value
 741:main.c        **** 					// 0 set reset to 0
 742:main.c        **** 					// 1 set reset to 1
 743:main.c        **** 					// 2 set REQ = 0
 744:main.c        **** 					// 3 set REQ = 1
 745:main.c        **** 					// 4 set MAN_TRIG = 1
 746:main.c        **** 					// 5 set MAN_TRIG = 0
 747:main.c        **** 					psz = strtok(0, " ");
 1979              		.loc 1 747 0
 1980 0ea8 B549     		ldr	r1, .L135+8
 1981 0eaa 0020     		movs	r0, #0
 1982 0eac FFF7FEFF 		bl	strtok
 1983 0eb0 B861     		str	r0, [r7, #24]
 748:main.c        **** 					sscanf(psz,"%hu", &avar);
 1984              		.loc 1 748 0
 1985 0eb2 3B1D     		adds	r3, r7, #4
 1986 0eb4 1A46     		mov	r2, r3
 1987 0eb6 B349     		ldr	r1, .L135+12
 1988 0eb8 B869     		ldr	r0, [r7, #24]
 1989 0eba FFF7FEFF 		bl	sscanf
 749:main.c        **** 					
 750:main.c        **** 					if(avar == 0) // reset PWM = 0
 1990              		.loc 1 750 0
 1991 0ebe BB88     		ldrh	r3, [r7, #4]
 1992 0ec0 002B     		cmp	r3, #0
 1993 0ec2 09D1     		bne	.L90
 751:main.c        **** 					{
 752:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~RESET_PWM);
 1994              		.loc 1 752 0
 1995 0ec4 FFF7FEFF 		bl	Trigger_Control_Read
 1996 0ec8 0346     		mov	r3, r0
 1997 0eca 03F07F03 		and	r3, r3, #127
 1998 0ece DBB2     		uxtb	r3, r3
 1999 0ed0 1846     		mov	r0, r3
 2000 0ed2 FFF7FEFF 		bl	Trigger_Control_Write
 2001 0ed6 7EE1     		b	.L6
 2002              	.L90:
 753:main.c        **** 					}
 754:main.c        **** 					else if(avar == 1) // reset PWM = 1
 2003              		.loc 1 754 0
 2004 0ed8 BB88     		ldrh	r3, [r7, #4]
 2005 0eda 012B     		cmp	r3, #1
 2006 0edc 09D1     		bne	.L92
 755:main.c        **** 					{
 756:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | RESET_PWM);
 2007              		.loc 1 756 0
 2008 0ede FFF7FEFF 		bl	Trigger_Control_Read
 2009 0ee2 0346     		mov	r3, r0
 2010 0ee4 63F07F03 		orn	r3, r3, #127
 2011 0ee8 DBB2     		uxtb	r3, r3
 2012 0eea 1846     		mov	r0, r3
 2013 0eec FFF7FEFF 		bl	Trigger_Control_Write
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 50


 2014 0ef0 71E1     		b	.L6
 2015              	.L92:
 757:main.c        **** 					}
 758:main.c        **** 					else if(avar == 2) // set REQ = 0
 2016              		.loc 1 758 0
 2017 0ef2 BB88     		ldrh	r3, [r7, #4]
 2018 0ef4 022B     		cmp	r3, #2
 2019 0ef6 09D1     		bne	.L93
 759:main.c        **** 					{
 760:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 2020              		.loc 1 760 0
 2021 0ef8 FFF7FEFF 		bl	Trigger_Control_Read
 2022 0efc 0346     		mov	r3, r0
 2023 0efe 23F04003 		bic	r3, r3, #64
 2024 0f02 DBB2     		uxtb	r3, r3
 2025 0f04 1846     		mov	r0, r3
 2026 0f06 FFF7FEFF 		bl	Trigger_Control_Write
 2027 0f0a 64E1     		b	.L6
 2028              	.L93:
 761:main.c        **** 					}
 762:main.c        **** 					else if(avar == 3) // set REQ = 1
 2029              		.loc 1 762 0
 2030 0f0c BB88     		ldrh	r3, [r7, #4]
 2031 0f0e 032B     		cmp	r3, #3
 2032 0f10 09D1     		bne	.L94
 763:main.c        **** 					{
 764:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 2033              		.loc 1 764 0
 2034 0f12 FFF7FEFF 		bl	Trigger_Control_Read
 2035 0f16 0346     		mov	r3, r0
 2036 0f18 43F04003 		orr	r3, r3, #64
 2037 0f1c DBB2     		uxtb	r3, r3
 2038 0f1e 1846     		mov	r0, r3
 2039 0f20 FFF7FEFF 		bl	Trigger_Control_Write
 2040 0f24 57E1     		b	.L6
 2041              	.L94:
 765:main.c        **** 					}
 766:main.c        **** 					else if(avar == 4) // manual trigger = 0
 2042              		.loc 1 766 0
 2043 0f26 BB88     		ldrh	r3, [r7, #4]
 2044 0f28 042B     		cmp	r3, #4
 2045 0f2a 09D1     		bne	.L95
 767:main.c        **** 					{
 768:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~MANUAL_TRIGGER);
 2046              		.loc 1 768 0
 2047 0f2c FFF7FEFF 		bl	Trigger_Control_Read
 2048 0f30 0346     		mov	r3, r0
 2049 0f32 23F01003 		bic	r3, r3, #16
 2050 0f36 DBB2     		uxtb	r3, r3
 2051 0f38 1846     		mov	r0, r3
 2052 0f3a FFF7FEFF 		bl	Trigger_Control_Write
 2053 0f3e 4AE1     		b	.L6
 2054              	.L95:
 769:main.c        **** 					}
 770:main.c        **** 					else if(avar == 5) // manual trigger = 1
 2055              		.loc 1 770 0
 2056 0f40 BB88     		ldrh	r3, [r7, #4]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 51


 2057 0f42 052B     		cmp	r3, #5
 2058 0f44 40F04781 		bne	.L6
 771:main.c        **** 					{
 772:main.c        **** 						//Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 773:main.c        **** 						//Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 774:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | MANUAL_TRIGGER);
 2059              		.loc 1 774 0
 2060 0f48 FFF7FEFF 		bl	Trigger_Control_Read
 2061 0f4c 0346     		mov	r3, r0
 2062 0f4e 43F01003 		orr	r3, r3, #16
 2063 0f52 DBB2     		uxtb	r3, r3
 2064 0f54 1846     		mov	r0, r3
 2065 0f56 FFF7FEFF 		bl	Trigger_Control_Write
 2066 0f5a 3CE1     		b	.L6
 2067              	.L89:
 775:main.c        **** 					}
 776:main.c        **** 					
 777:main.c        **** 				}
 778:main.c        **** 				else if(*psz == 'G')
 2068              		.loc 1 778 0
 2069 0f5c BB69     		ldr	r3, [r7, #24]
 2070 0f5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2071 0f60 472B     		cmp	r3, #71
 2072 0f62 12D1     		bne	.L96
 779:main.c        **** 				{
 780:main.c        **** 					// Scope GO, arms the scope and waits for a trigger event
 781:main.c        **** 					// if a trigger occurs, sends back the character 'A' followed
 782:main.c        **** 					// by a 2nd and 3rd byte in binary format indicating the address
 783:main.c        **** 					// where the capture ended in the buffer (10 bits).  I'm assuming Aa format
 784:main.c        **** 					
 785:main.c        **** 					// arm the scope
 786:main.c        **** 					Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 2073              		.loc 1 786 0
 2074 0f64 FFF7FEFF 		bl	Trigger_Control_Read
 2075 0f68 0346     		mov	r3, r0
 2076 0f6a 43F04003 		orr	r3, r3, #64
 2077 0f6e DBB2     		uxtb	r3, r3
 2078 0f70 1846     		mov	r0, r3
 2079 0f72 FFF7FEFF 		bl	Trigger_Control_Write
 787:main.c        **** 					Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 2080              		.loc 1 787 0
 2081 0f76 FFF7FEFF 		bl	Trigger_Control_Read
 2082 0f7a 0346     		mov	r3, r0
 2083 0f7c 23F04003 		bic	r3, r3, #64
 2084 0f80 DBB2     		uxtb	r3, r3
 2085 0f82 1846     		mov	r0, r3
 2086 0f84 FFF7FEFF 		bl	Trigger_Control_Write
 2087 0f88 25E1     		b	.L6
 2088              	.L96:
 788:main.c        **** 					
 789:main.c        **** 				}
 790:main.c        **** 				else if(*psz == 'B')
 2089              		.loc 1 790 0
 2090 0f8a BB69     		ldr	r3, [r7, #24]
 2091 0f8c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2092 0f8e 422B     		cmp	r3, #66
 2093 0f90 40F08480 		bne	.L97
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 52


 791:main.c        **** 				{
 792:main.c        **** 					// dump the scope buffer
 793:main.c        **** 					PutChar('D');
 2094              		.loc 1 793 0
 2095 0f94 4420     		movs	r0, #68
 2096 0f96 FFF7FEFF 		bl	PutChar
 794:main.c        **** 					
 795:main.c        **** 					for(i = 0; i < BUFFER_SIZE; i++)
 2097              		.loc 1 795 0
 2098 0f9a 0023     		movs	r3, #0
 2099 0f9c BB84     		strh	r3, [r7, #36]	@ movhi
 2100 0f9e 78E0     		b	.L98
 2101              	.L104:
 796:main.c        **** 					{
 797:main.c        **** 						// truncate to 12 bits
 798:main.c        **** 						avar = (uint16) Channel_1_Data[i]/1.005;
 2102              		.loc 1 798 0
 2103 0fa0 BB8C     		ldrh	r3, [r7, #36]
 2104 0fa2 794A     		ldr	r2, .L135+16
 2105 0fa4 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 2106 0fa8 1846     		mov	r0, r3
 2107 0faa FFF7FEFF 		bl	__aeabi_i2d
 2108 0fae 72A3     		adr	r3, .L135
 2109 0fb0 D3E90023 		ldrd	r2, [r3]
 2110 0fb4 FFF7FEFF 		bl	__aeabi_ddiv
 2111 0fb8 0346     		mov	r3, r0
 2112 0fba 0C46     		mov	r4, r1
 2113 0fbc 1846     		mov	r0, r3
 2114 0fbe 2146     		mov	r1, r4
 2115 0fc0 FFF7FEFF 		bl	__aeabi_d2uiz
 2116 0fc4 0346     		mov	r3, r0
 2117 0fc6 9BB2     		uxth	r3, r3
 2118 0fc8 BB80     		strh	r3, [r7, #4]	@ movhi
 799:main.c        **** 						bvar = (uint16) Channel_2_Data[i]/1.005;
 2119              		.loc 1 799 0
 2120 0fca BB8C     		ldrh	r3, [r7, #36]
 2121 0fcc 6F4A     		ldr	r2, .L135+20
 2122 0fce 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 2123 0fd2 1846     		mov	r0, r3
 2124 0fd4 FFF7FEFF 		bl	__aeabi_i2d
 2125 0fd8 67A3     		adr	r3, .L135
 2126 0fda D3E90023 		ldrd	r2, [r3]
 2127 0fde FFF7FEFF 		bl	__aeabi_ddiv
 2128 0fe2 0346     		mov	r3, r0
 2129 0fe4 0C46     		mov	r4, r1
 2130 0fe6 1846     		mov	r0, r3
 2131 0fe8 2146     		mov	r1, r4
 2132 0fea FFF7FEFF 		bl	__aeabi_d2uiz
 2133 0fee 0346     		mov	r3, r0
 2134 0ff0 FB84     		strh	r3, [r7, #38]	@ movhi
 800:main.c        **** 						
 801:main.c        **** 						// send the data out to the terminal
 802:main.c        **** 						USB_Out_Buffer[(i*4+0) % USBUART_BUFFER_SIZE] = (uint8) (avar >> 8); // address of the end, M
 2135              		.loc 1 802 0
 2136 0ff2 BB8C     		ldrh	r3, [r7, #36]
 2137 0ff4 9B00     		lsls	r3, r3, #2
 2138 0ff6 03F03C03 		and	r3, r3, #60
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 53


 2139 0ffa BA88     		ldrh	r2, [r7, #4]
 2140 0ffc 120A     		lsrs	r2, r2, #8
 2141 0ffe 92B2     		uxth	r2, r2
 2142 1000 D1B2     		uxtb	r1, r2
 2143 1002 634A     		ldr	r2, .L135+24
 2144 1004 D154     		strb	r1, [r2, r3]
 803:main.c        **** 						USB_Out_Buffer[(i*4+1) % USBUART_BUFFER_SIZE] = (uint8) (avar & 0x00FF); // address of the en
 2145              		.loc 1 803 0
 2146 1006 BB8C     		ldrh	r3, [r7, #36]
 2147 1008 9B00     		lsls	r3, r3, #2
 2148 100a 5A1C     		adds	r2, r3, #1
 2149 100c 614B     		ldr	r3, .L135+28
 2150 100e 1340     		ands	r3, r3, r2
 2151 1010 002B     		cmp	r3, #0
 2152 1012 03DA     		bge	.L99
 2153 1014 013B     		subs	r3, r3, #1
 2154 1016 63F03F03 		orn	r3, r3, #63
 2155 101a 0133     		adds	r3, r3, #1
 2156              	.L99:
 2157 101c 1A46     		mov	r2, r3
 2158 101e BB88     		ldrh	r3, [r7, #4]
 2159 1020 D9B2     		uxtb	r1, r3
 2160 1022 5B4B     		ldr	r3, .L135+24
 2161 1024 9954     		strb	r1, [r3, r2]
 804:main.c        **** 						USB_Out_Buffer[(i*4+2) % USBUART_BUFFER_SIZE] = (uint8) (bvar >> 8); // address of the end, M
 2162              		.loc 1 804 0
 2163 1026 BB8C     		ldrh	r3, [r7, #36]
 2164 1028 9B00     		lsls	r3, r3, #2
 2165 102a 9A1C     		adds	r2, r3, #2
 2166 102c 594B     		ldr	r3, .L135+28
 2167 102e 1340     		ands	r3, r3, r2
 2168 1030 002B     		cmp	r3, #0
 2169 1032 03DA     		bge	.L100
 2170 1034 013B     		subs	r3, r3, #1
 2171 1036 63F03F03 		orn	r3, r3, #63
 2172 103a 0133     		adds	r3, r3, #1
 2173              	.L100:
 2174 103c 1A46     		mov	r2, r3
 2175 103e FB8C     		ldrh	r3, [r7, #38]
 2176 1040 1B0A     		lsrs	r3, r3, #8
 2177 1042 9BB2     		uxth	r3, r3
 2178 1044 D9B2     		uxtb	r1, r3
 2179 1046 524B     		ldr	r3, .L135+24
 2180 1048 9954     		strb	r1, [r3, r2]
 805:main.c        **** 						USB_Out_Buffer[(i*4+3) % USBUART_BUFFER_SIZE] = (uint8) (bvar & 0x00FF); // address of the en
 2181              		.loc 1 805 0
 2182 104a BB8C     		ldrh	r3, [r7, #36]
 2183 104c 9B00     		lsls	r3, r3, #2
 2184 104e DA1C     		adds	r2, r3, #3
 2185 1050 504B     		ldr	r3, .L135+28
 2186 1052 1340     		ands	r3, r3, r2
 2187 1054 002B     		cmp	r3, #0
 2188 1056 03DA     		bge	.L101
 2189 1058 013B     		subs	r3, r3, #1
 2190 105a 63F03F03 		orn	r3, r3, #63
 2191 105e 0133     		adds	r3, r3, #1
 2192              	.L101:
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 54


 2193 1060 1A46     		mov	r2, r3
 2194 1062 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 2195 1064 D9B2     		uxtb	r1, r3
 2196 1066 4A4B     		ldr	r3, .L135+24
 2197 1068 9954     		strb	r1, [r3, r2]
 806:main.c        **** 						
 807:main.c        **** 						// our buffer has been filled up, dump the data out the serial port
 808:main.c        **** 						if(((i*4+4) % USBUART_BUFFER_SIZE) == 0)
 2198              		.loc 1 808 0
 2199 106a BB8C     		ldrh	r3, [r7, #36]
 2200 106c 0133     		adds	r3, r3, #1
 2201 106e 9B00     		lsls	r3, r3, #2
 2202 1070 03F03C03 		and	r3, r3, #60
 2203 1074 002B     		cmp	r3, #0
 2204 1076 09D1     		bne	.L102
 809:main.c        **** 						{
 810:main.c        **** 							while(USBUART_CDCIsReady() == 0){};
 2205              		.loc 1 810 0
 2206 1078 00BF     		nop
 2207              	.L103:
 2208              		.loc 1 810 0 is_stmt 0 discriminator 1
 2209 107a FFF7FEFF 		bl	USBUART_CDCIsReady
 2210 107e 0346     		mov	r3, r0
 2211 1080 002B     		cmp	r3, #0
 2212 1082 FAD0     		beq	.L103
 811:main.c        **** 							USBUART_PutData(USB_Out_Buffer, USBUART_BUFFER_SIZE);
 2213              		.loc 1 811 0 is_stmt 1
 2214 1084 4021     		movs	r1, #64
 2215 1086 4248     		ldr	r0, .L135+24
 2216 1088 FFF7FEFF 		bl	USBUART_PutData
 2217              	.L102:
 795:main.c        **** 					{
 2218              		.loc 1 795 0 discriminator 2
 2219 108c BB8C     		ldrh	r3, [r7, #36]
 2220 108e 0133     		adds	r3, r3, #1
 2221 1090 BB84     		strh	r3, [r7, #36]	@ movhi
 2222              	.L98:
 795:main.c        **** 					{
 2223              		.loc 1 795 0 is_stmt 0 discriminator 1
 2224 1092 BB8C     		ldrh	r3, [r7, #36]
 2225 1094 B3F5806F 		cmp	r3, #1024
 2226 1098 82D3     		bcc	.L104
 2227 109a 9CE0     		b	.L6
 2228              	.L97:
 812:main.c        **** 						}
 813:main.c        **** 					}
 814:main.c        **** 				}
 815:main.c        **** 				else if(*psz == 'P')
 2229              		.loc 1 815 0 is_stmt 1
 2230 109c BB69     		ldr	r3, [r7, #24]
 2231 109e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2232 10a0 502B     		cmp	r3, #80
 2233 10a2 58D1     		bne	.L105
 816:main.c        **** 				{
 817:main.c        **** 					// Scope Preamp settings
 818:main.c        **** 					// S P [A,B] Val can be 1,2,4,8,16,24,32,48,50
 819:main.c        ****                     // Grab the preamp gain value and set the gain
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 55


 820:main.c        **** 					//
 821:main.c        **** 					psz = strtok(0, " ");
 2234              		.loc 1 821 0
 2235 10a4 3649     		ldr	r1, .L135+8
 2236 10a6 0020     		movs	r0, #0
 2237 10a8 FFF7FEFF 		bl	strtok
 2238 10ac B861     		str	r0, [r7, #24]
 822:main.c        **** 					
 823:main.c        **** 					if(*psz == 'A')
 2239              		.loc 1 823 0
 2240 10ae BB69     		ldr	r3, [r7, #24]
 2241 10b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2242 10b2 412B     		cmp	r3, #65
 2243 10b4 10D1     		bne	.L106
 824:main.c        **** 					{
 825:main.c        ****                         psz = strtok(0, " ");
 2244              		.loc 1 825 0
 2245 10b6 3249     		ldr	r1, .L135+8
 2246 10b8 0020     		movs	r0, #0
 2247 10ba FFF7FEFF 		bl	strtok
 2248 10be B861     		str	r0, [r7, #24]
 826:main.c        ****                         sscanf(psz,"%hu", &avar);
 2249              		.loc 1 826 0
 2250 10c0 3B1D     		adds	r3, r7, #4
 2251 10c2 1A46     		mov	r2, r3
 2252 10c4 2F49     		ldr	r1, .L135+12
 2253 10c6 B869     		ldr	r0, [r7, #24]
 2254 10c8 FFF7FEFF 		bl	sscanf
 827:main.c        **** 						//preamp_a = (uint8) avar;
 828:main.c        ****                         ScopeA_Buf_SetGain((uint8) avar);
 2255              		.loc 1 828 0
 2256 10cc BB88     		ldrh	r3, [r7, #4]
 2257 10ce DBB2     		uxtb	r3, r3
 2258 10d0 1846     		mov	r0, r3
 2259 10d2 FFF7FEFF 		bl	ScopeA_Buf_SetGain
 2260 10d6 7EE0     		b	.L6
 2261              	.L106:
 829:main.c        **** 					}
 830:main.c        **** 					else if(*psz == 'B')
 2262              		.loc 1 830 0
 2263 10d8 BB69     		ldr	r3, [r7, #24]
 2264 10da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2265 10dc 422B     		cmp	r3, #66
 2266 10de 10D1     		bne	.L108
 831:main.c        **** 					{
 832:main.c        **** 						psz = strtok(0, " ");
 2267              		.loc 1 832 0
 2268 10e0 2749     		ldr	r1, .L135+8
 2269 10e2 0020     		movs	r0, #0
 2270 10e4 FFF7FEFF 		bl	strtok
 2271 10e8 B861     		str	r0, [r7, #24]
 833:main.c        ****                         sscanf(psz,"%hu", &avar);
 2272              		.loc 1 833 0
 2273 10ea 3B1D     		adds	r3, r7, #4
 2274 10ec 1A46     		mov	r2, r3
 2275 10ee 2549     		ldr	r1, .L135+12
 2276 10f0 B869     		ldr	r0, [r7, #24]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 56


 2277 10f2 FFF7FEFF 		bl	sscanf
 834:main.c        **** 						//preamp_b = (uint8) avar;
 835:main.c        ****                         ScopeB_Buf_SetGain((uint8) avar);
 2278              		.loc 1 835 0
 2279 10f6 BB88     		ldrh	r3, [r7, #4]
 2280 10f8 DBB2     		uxtb	r3, r3
 2281 10fa 1846     		mov	r0, r3
 2282 10fc FFF7FEFF 		bl	ScopeB_Buf_SetGain
 2283 1100 69E0     		b	.L6
 2284              	.L108:
 836:main.c        **** 					}
 837:main.c        ****                     else if(*psz == 'C')
 2285              		.loc 1 837 0
 2286 1102 BB69     		ldr	r3, [r7, #24]
 2287 1104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2288 1106 432B     		cmp	r3, #67
 2289 1108 10D1     		bne	.L109
 838:main.c        **** 					{
 839:main.c        ****                         psz = strtok(0, " ");
 2290              		.loc 1 839 0
 2291 110a 1D49     		ldr	r1, .L135+8
 2292 110c 0020     		movs	r0, #0
 2293 110e FFF7FEFF 		bl	strtok
 2294 1112 B861     		str	r0, [r7, #24]
 840:main.c        ****                         sscanf(psz,"%hu", &avar);
 2295              		.loc 1 840 0
 2296 1114 3B1D     		adds	r3, r7, #4
 2297 1116 1A46     		mov	r2, r3
 2298 1118 1A49     		ldr	r1, .L135+12
 2299 111a B869     		ldr	r0, [r7, #24]
 2300 111c FFF7FEFF 		bl	sscanf
 841:main.c        **** 						//preamp_a = (uint8) avar;
 842:main.c        ****                         ScopeC_Buf_SetGain((uint8) avar);
 2301              		.loc 1 842 0
 2302 1120 BB88     		ldrh	r3, [r7, #4]
 2303 1122 DBB2     		uxtb	r3, r3
 2304 1124 1846     		mov	r0, r3
 2305 1126 FFF7FEFF 		bl	ScopeC_Buf_SetGain
 2306 112a 54E0     		b	.L6
 2307              	.L109:
 843:main.c        **** 					}
 844:main.c        **** 					else if(*psz == 'D')
 2308              		.loc 1 844 0
 2309 112c BB69     		ldr	r3, [r7, #24]
 2310 112e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2311 1130 442B     		cmp	r3, #68
 2312 1132 50D1     		bne	.L6
 845:main.c        **** 					{
 846:main.c        **** 						psz = strtok(0, " ");
 2313              		.loc 1 846 0
 2314 1134 1249     		ldr	r1, .L135+8
 2315 1136 0020     		movs	r0, #0
 2316 1138 FFF7FEFF 		bl	strtok
 2317 113c B861     		str	r0, [r7, #24]
 847:main.c        ****                         sscanf(psz,"%hu", &avar);
 2318              		.loc 1 847 0
 2319 113e 3B1D     		adds	r3, r7, #4
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 57


 2320 1140 1A46     		mov	r2, r3
 2321 1142 1049     		ldr	r1, .L135+12
 2322 1144 B869     		ldr	r0, [r7, #24]
 2323 1146 FFF7FEFF 		bl	sscanf
 848:main.c        **** 						//preamp_b = (uint8) avar;
 849:main.c        ****                         ScopeC_Buf_SetGain((uint8) avar);
 2324              		.loc 1 849 0
 2325 114a BB88     		ldrh	r3, [r7, #4]
 2326 114c DBB2     		uxtb	r3, r3
 2327 114e 1846     		mov	r0, r3
 2328 1150 FFF7FEFF 		bl	ScopeC_Buf_SetGain
 2329 1154 3FE0     		b	.L6
 2330              	.L105:
 850:main.c        **** 					}
 851:main.c        **** 				}
 852:main.c        ****                 else if(*psz == 'M')
 2331              		.loc 1 852 0
 2332 1156 BB69     		ldr	r3, [r7, #24]
 2333 1158 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2334 115a 4D2B     		cmp	r3, #77
 2335 115c 34D1     		bne	.L110
 853:main.c        **** 				{
 854:main.c        **** 					// Select scope input mux channel A or C and B or D
 855:main.c        **** 					psz = strtok(0, " ");
 2336              		.loc 1 855 0
 2337 115e 0849     		ldr	r1, .L135+8
 2338 1160 0020     		movs	r0, #0
 2339 1162 FFF7FEFF 		bl	strtok
 2340 1166 B861     		str	r0, [r7, #24]
 856:main.c        **** 					if(*psz == 'A')
 2341              		.loc 1 856 0
 2342 1168 BB69     		ldr	r3, [r7, #24]
 2343 116a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2344 116c 412B     		cmp	r3, #65
 2345 116e 13D1     		bne	.L111
 857:main.c        **** 					{
 858:main.c        ****                         AMux_1_Select(SCOPE_CHANNEL_1);
 2346              		.loc 1 858 0
 2347 1170 0020     		movs	r0, #0
 2348 1172 FFF7FEFF 		bl	AMux_1_Select
 2349 1176 2EE0     		b	.L6
 2350              	.L136:
 2351              		.align	3
 2352              	.L135:
 2353 1178 14AE47E1 		.word	-515396076
 2354 117c 7A14F03F 		.word	1072698490
 2355 1180 00000000 		.word	.LC0
 2356 1184 18000000 		.word	.LC2
 2357 1188 00000000 		.word	Channel_1_Data
 2358 118c 00000000 		.word	Channel_2_Data
 2359 1190 00000000 		.word	USB_Out_Buffer
 2360 1194 3F000080 		.word	-2147483585
 2361              	.L111:
 859:main.c        **** 					}
 860:main.c        **** 					else if(*psz == 'B')
 2362              		.loc 1 860 0
 2363 1198 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 58


 2364 119a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2365 119c 422B     		cmp	r3, #66
 2366 119e 03D1     		bne	.L113
 861:main.c        ****                     {
 862:main.c        ****                         AMux_2_Select(SCOPE_CHANNEL_3);
 2367              		.loc 1 862 0
 2368 11a0 0020     		movs	r0, #0
 2369 11a2 FFF7FEFF 		bl	AMux_2_Select
 2370 11a6 16E0     		b	.L6
 2371              	.L113:
 863:main.c        **** 					}
 864:main.c        ****                     else if(*psz == 'C')
 2372              		.loc 1 864 0
 2373 11a8 BB69     		ldr	r3, [r7, #24]
 2374 11aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2375 11ac 432B     		cmp	r3, #67
 2376 11ae 03D1     		bne	.L114
 865:main.c        ****                     {
 866:main.c        ****                         AMux_1_Select(SCOPE_CHANNEL_2);
 2377              		.loc 1 866 0
 2378 11b0 0120     		movs	r0, #1
 2379 11b2 FFF7FEFF 		bl	AMux_1_Select
 2380 11b6 0EE0     		b	.L6
 2381              	.L114:
 867:main.c        ****                     }
 868:main.c        ****                     else if(*psz == 'D')
 2382              		.loc 1 868 0
 2383 11b8 BB69     		ldr	r3, [r7, #24]
 2384 11ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2385 11bc 442B     		cmp	r3, #68
 2386 11be 0AD1     		bne	.L6
 869:main.c        ****                     {
 870:main.c        ****                         AMux_2_Select(SCOPE_CHANNEL_4);
 2387              		.loc 1 870 0
 2388 11c0 0120     		movs	r0, #1
 2389 11c2 FFF7FEFF 		bl	AMux_2_Select
 2390 11c6 06E0     		b	.L6
 2391              	.L110:
 871:main.c        ****                     }
 872:main.c        **** 				}
 873:main.c        **** 				else
 874:main.c        **** 				{
 875:main.c        **** 					PutString("Error: Unrecognized Scope Command\n\r");
 2392              		.loc 1 875 0
 2393 11c8 2548     		ldr	r0, .L137
 2394 11ca FFF7FEFF 		bl	PutString
 2395 11ce 02E0     		b	.L6
 2396              	.L61:
 876:main.c        **** 				}
 877:main.c        **** 			// END OF SCOPE 'S' COMMANDS
 878:main.c        **** 			}
 879:main.c        **** 			else
 880:main.c        **** 			{
 881:main.c        **** 				// command not recognized, toss it
 882:main.c        **** 				PutString("Error: Unknown Command\n\r");
 2397              		.loc 1 882 0
 2398 11d0 2448     		ldr	r0, .L137+4
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 59


 2399 11d2 FFF7FEFF 		bl	PutString
 2400              	.L6:
 883:main.c        **** 			}
 884:main.c        **** 			bCommandReady = 0;
 2401              		.loc 1 884 0
 2402 11d6 244B     		ldr	r3, .L137+8
 2403 11d8 0022     		movs	r2, #0
 2404 11da 1A70     		strb	r2, [r3]
 2405              	.L4:
 885:main.c        **** 		}
 886:main.c        **** 		
 887:main.c        **** 		status = Trigger_Status_Read();
 2406              		.loc 1 887 0
 2407 11dc FFF7FEFF 		bl	Trigger_Status_Read
 2408 11e0 0346     		mov	r3, r0
 2409 11e2 7B72     		strb	r3, [r7, #9]
 888:main.c        **** 						
 889:main.c        **** 		// if we have completed a capture, get the index of the last sample
 890:main.c        **** 		if((status & CAPTURE_COMPLETE ) != 0)
 2410              		.loc 1 890 0
 2411 11e4 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 2412 11e6 03F00403 		and	r3, r3, #4
 2413 11ea 002B     		cmp	r3, #0
 2414 11ec 18D0     		beq	.L115
 891:main.c        **** 		{
 892:main.c        **** 			ending_offset = GetLastSampleIndex(DMA_Channel_1_Chan);
 2415              		.loc 1 892 0
 2416 11ee 1F4B     		ldr	r3, .L137+12
 2417 11f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2418 11f2 1846     		mov	r0, r3
 2419 11f4 FFF7FEFF 		bl	GetLastSampleIndex
 2420 11f8 0346     		mov	r3, r0
 2421 11fa FB80     		strh	r3, [r7, #6]	@ movhi
 893:main.c        **** 			
 894:main.c        **** 			// return the capture info
 895:main.c        **** 			PutChar('A');
 2422              		.loc 1 895 0
 2423 11fc 4120     		movs	r0, #65
 2424 11fe FFF7FEFF 		bl	PutChar
 896:main.c        **** 			PutChar((uint8) ((ending_offset >> 8) & 0x0003)); // address of the end, MSbits
 2425              		.loc 1 896 0
 2426 1202 FB88     		ldrh	r3, [r7, #6]
 2427 1204 1B0A     		lsrs	r3, r3, #8
 2428 1206 9BB2     		uxth	r3, r3
 2429 1208 DBB2     		uxtb	r3, r3
 2430 120a 03F00303 		and	r3, r3, #3
 2431 120e DBB2     		uxtb	r3, r3
 2432 1210 1846     		mov	r0, r3
 2433 1212 FFF7FEFF 		bl	PutChar
 897:main.c        **** 			PutChar((uint8) (ending_offset & 0x00FF)); // address of the end, LSbits
 2434              		.loc 1 897 0
 2435 1216 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2436 1218 DBB2     		uxtb	r3, r3
 2437 121a 1846     		mov	r0, r3
 2438 121c FFF7FEFF 		bl	PutChar
 2439              	.L115:
 898:main.c        **** 			//PutChar('\n'); // terminate the return data, through testing, there is no need to send this ch
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 60


 899:main.c        **** 		}
 900:main.c        **** 	
 901:main.c        **** 		// digital input update
 902:main.c        **** 		if((Digital_Input_Status_Last != Digital_Input_Status_Read()) && (Digital_AutoUpdate != 0))
 2440              		.loc 1 902 0
 2441 1220 FFF7FEFF 		bl	Digital_Input_Status_Read
 2442 1224 0346     		mov	r3, r0
 2443 1226 1A46     		mov	r2, r3
 2444 1228 114B     		ldr	r3, .L137+16
 2445 122a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2446 122c 9A42     		cmp	r2, r3
 2447 122e 3EF4EEAE 		beq	.L117
 2448              		.loc 1 902 0 is_stmt 0 discriminator 1
 2449 1232 104B     		ldr	r3, .L137+20
 2450 1234 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2451 1236 002B     		cmp	r3, #0
 2452 1238 3EF4E9AE 		beq	.L117
 903:main.c        **** 		{
 904:main.c        **** 			PutChar('I');
 2453              		.loc 1 904 0 is_stmt 1
 2454 123c 4920     		movs	r0, #73
 2455 123e FFF7FEFF 		bl	PutChar
 905:main.c        **** 			PutChar((uint8) Digital_Input_Status_Read());
 2456              		.loc 1 905 0
 2457 1242 FFF7FEFF 		bl	Digital_Input_Status_Read
 2458 1246 0346     		mov	r3, r0
 2459 1248 1846     		mov	r0, r3
 2460 124a FFF7FEFF 		bl	PutChar
 906:main.c        **** 			Digital_Input_Status_Last = Digital_Input_Status_Read();
 2461              		.loc 1 906 0
 2462 124e FFF7FEFF 		bl	Digital_Input_Status_Read
 2463 1252 0346     		mov	r3, r0
 2464 1254 1A46     		mov	r2, r3
 2465 1256 064B     		ldr	r3, .L137+16
 2466 1258 1A70     		strb	r2, [r3]
 907:main.c        **** 		}
 908:main.c        **** 	}
 2467              		.loc 1 908 0
 2468 125a FEF7D8BE 		b	.L117
 2469              	.L138:
 2470 125e 00BF     		.align	2
 2471              	.L137:
 2472 1260 1C000000 		.word	.LC3
 2473 1264 40000000 		.word	.LC4
 2474 1268 00000000 		.word	bCommandReady
 2475 126c 00000000 		.word	DMA_Channel_1_Chan
 2476 1270 00000000 		.word	Digital_Input_Status_Last
 2477 1274 00000000 		.word	Digital_AutoUpdate
 2478              		.cfi_endproc
 2479              	.LFE64:
 2480              		.size	main, .-main
 2481              		.section	.text.Hardware_Config,"ax",%progbits
 2482              		.align	2
 2483              		.global	Hardware_Config
 2484              		.thumb
 2485              		.thumb_func
 2486              		.type	Hardware_Config, %function
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 61


 2487              	Hardware_Config:
 2488              	.LFB65:
 909:main.c        **** }
 910:main.c        **** 
 911:main.c        **** void Hardware_Config(void)
 912:main.c        **** {
 2489              		.loc 1 912 0
 2490              		.cfi_startproc
 2491              		@ args = 0, pretend = 0, frame = 0
 2492              		@ frame_needed = 1, uses_anonymous_args = 0
 2493 0000 80B5     		push	{r7, lr}
 2494              		.cfi_def_cfa_offset 8
 2495              		.cfi_offset 7, -8
 2496              		.cfi_offset 14, -4
 2497 0002 00AF     		add	r7, sp, #0
 2498              		.cfi_def_cfa_register 7
 913:main.c        ****     CyGlobalIntEnable;
 2499              		.loc 1 913 0
 2500              		.syntax unified
 2501              	@ 913 "main.c" 1
 2502 0004 62B6     		CPSIE   i
 2503              	@ 0 "" 2
 914:main.c        **** 	
 915:main.c        **** 	cCommandsReady = 0;
 2504              		.loc 1 915 0
 2505              		.thumb
 2506              		.syntax unified
 2507 0006 4A4B     		ldr	r3, .L141
 2508 0008 0022     		movs	r2, #0
 2509 000a 1A80     		strh	r2, [r3]	@ movhi
 916:main.c        **** 	bCommandReady = 0;
 2510              		.loc 1 916 0
 2511 000c 494B     		ldr	r3, .L141+4
 2512 000e 0022     		movs	r2, #0
 2513 0010 1A70     		strb	r2, [r3]
 917:main.c        ****     
 918:main.c        ****     USBUART_Start(0, USBUART_5V_OPERATION);
 2514              		.loc 1 918 0
 2515 0012 0121     		movs	r1, #1
 2516 0014 0020     		movs	r0, #0
 2517 0016 FFF7FEFF 		bl	USBUART_Start
 919:main.c        **** 	while(!USBUART_GetConfiguration())
 2518              		.loc 1 919 0
 2519 001a 00BF     		nop
 2520              	.L140:
 2521              		.loc 1 919 0 is_stmt 0 discriminator 1
 2522 001c FFF7FEFF 		bl	USBUART_GetConfiguration
 2523 0020 0346     		mov	r3, r0
 2524 0022 002B     		cmp	r3, #0
 2525 0024 FAD0     		beq	.L140
 920:main.c        ****     {
 921:main.c        ****         /* Wait for USBUART to complete configuration */
 922:main.c        ****     }
 923:main.c        ****     USBUART_CDC_Init();
 2526              		.loc 1 923 0 is_stmt 1
 2527 0026 FFF7FEFF 		bl	USBUART_CDC_Init
 924:main.c        **** 	
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 62


 925:main.c        **** 	Amux_Trigger_Select(SCOPE_CHANNEL_1);
 2528              		.loc 1 925 0
 2529 002a 0020     		movs	r0, #0
 2530 002c FFF7FEFF 		bl	Amux_Trigger_FastSelect
 926:main.c        ****     
 927:main.c        ****     ADC_1_Start();
 2531              		.loc 1 927 0
 2532 0030 FFF7FEFF 		bl	ADC_1_Start
 928:main.c        ****     ADC_2_Start();
 2533              		.loc 1 928 0
 2534 0034 FFF7FEFF 		bl	ADC_2_Start
 929:main.c        ****     ScopeA_Buf_Start();
 2535              		.loc 1 929 0
 2536 0038 FFF7FEFF 		bl	ScopeA_Buf_Start
 930:main.c        ****     ScopeB_Buf_Start();
 2537              		.loc 1 930 0
 2538 003c FFF7FEFF 		bl	ScopeB_Buf_Start
 931:main.c        ****     ScopeC_Buf_Start();
 2539              		.loc 1 931 0
 2540 0040 FFF7FEFF 		bl	ScopeC_Buf_Start
 932:main.c        ****     ScopeD_Buf_Start();
 2541              		.loc 1 932 0
 2542 0044 FFF7FEFF 		bl	ScopeD_Buf_Start
 933:main.c        ****     Vtrigger_Start();
 2543              		.loc 1 933 0
 2544 0048 FFF7FEFF 		bl	Vtrigger_Start
 934:main.c        ****     Trigger_Comp_Start();
 2545              		.loc 1 934 0
 2546 004c FFF7FEFF 		bl	Trigger_Comp_Start
 935:main.c        ****     
 936:main.c        ****    // The extras
 937:main.c        ****     VRef_Buf_Start(); // fixed 1.024 V reference output buffer
 2547              		.loc 1 937 0
 2548 0050 FFF7FEFF 		bl	VRef_Buf_Start
 938:main.c        ****     AuxDAC_Buf_Start();
 2549              		.loc 1 938 0
 2550 0054 FFF7FEFF 		bl	AuxDAC_Buf_Start
 939:main.c        ****     AuxDAC_1_Start();
 2551              		.loc 1 939 0
 2552 0058 FFF7FEFF 		bl	AuxDAC_1_Start
 940:main.c        ****     
 941:main.c        ****     PWM_Sample_Buffer_Start();
 2553              		.loc 1 941 0
 2554 005c FFF7FEFF 		bl	PWM_Sample_Buffer_Start
 942:main.c        **** 	// update the period to match the trigger buffer size for maximum post trigger capture
 943:main.c        **** 	PWM_Sample_Buffer_WritePeriod(BUFFER_SIZE-1); // maximum post trigger buffer
 2555              		.loc 1 943 0
 2556 0060 40F2FF30 		movw	r0, #1023
 2557 0064 FFF7FEFF 		bl	PWM_Sample_Buffer_WritePeriod
 944:main.c        **** 	//PWM_Sample_Buffer_WritePeriod(2); // minimum post trigger buffer, 3 samples after trigger (used 
 945:main.c        **** 	// after setting the period, need to set the count to the proper value as well
 946:main.c        **** 	PWM_Sample_Buffer_WriteCounter(BUFFER_SIZE-1); // maximum post trigger buffer
 2558              		.loc 1 946 0
 2559 0068 40F2FF30 		movw	r0, #1023
 2560 006c FFF7FEFF 		bl	PWM_Sample_Buffer_WriteCounter
 947:main.c        **** 	//PWM_Sample_Buffer_WriteCounter(2); // minimum post trigger buffer, 3 samples after trigger
 948:main.c        **** 	
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 63


 949:main.c        **** 	ScopeA_Buf_SetGain(0);
 2561              		.loc 1 949 0
 2562 0070 0020     		movs	r0, #0
 2563 0072 FFF7FEFF 		bl	ScopeA_Buf_SetGain
 950:main.c        ****     ScopeB_Buf_SetGain(0);
 2564              		.loc 1 950 0
 2565 0076 0020     		movs	r0, #0
 2566 0078 FFF7FEFF 		bl	ScopeB_Buf_SetGain
 951:main.c        ****     ScopeC_Buf_SetGain(0);
 2567              		.loc 1 951 0
 2568 007c 0020     		movs	r0, #0
 2569 007e FFF7FEFF 		bl	ScopeC_Buf_SetGain
 952:main.c        ****     ScopeD_Buf_SetGain(0);
 2570              		.loc 1 952 0
 2571 0082 0020     		movs	r0, #0
 2572 0084 FFF7FEFF 		bl	ScopeD_Buf_SetGain
 953:main.c        ****     
 954:main.c        **** 	trigger_source = SCOPE_CHANNEL_1;
 2573              		.loc 1 954 0
 2574 0088 2B4B     		ldr	r3, .L141+8
 2575 008a 0022     		movs	r2, #0
 2576 008c 1A70     		strb	r2, [r3]
 955:main.c        ****     
 956:main.c        **** 	// basic configuration is trigger on the rising edge of channel 0
 957:main.c        **** 	Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 2577              		.loc 1 957 0
 2578 008e FFF7FEFF 		bl	Trigger_Control_Read
 2579 0092 0346     		mov	r3, r0
 2580 0094 23F00F03 		bic	r3, r3, #15
 2581 0098 DBB2     		uxtb	r3, r3
 2582 009a 1846     		mov	r0, r3
 2583 009c FFF7FEFF 		bl	Trigger_Control_Write
 958:main.c        ****     Trigger_Control_Write(Trigger_Control_Read() | RISING_EDGE_TRIGGERED);
 2584              		.loc 1 958 0
 2585 00a0 FFF7FEFF 		bl	Trigger_Control_Read
 2586 00a4 0346     		mov	r3, r0
 2587 00a6 43F00203 		orr	r3, r3, #2
 2588 00aa DBB2     		uxtb	r3, r3
 2589 00ac 1846     		mov	r0, r3
 2590 00ae FFF7FEFF 		bl	Trigger_Control_Write
 959:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | FALLING_EDGE_TRIGGERED);
 960:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | EITHER_EDGE_TRIGGERED);
 961:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | EXTERNAL_TRIGGERED);
 962:main.c        **** 	
 963:main.c        **** 	// waveform generator control
 964:main.c        **** 	Wave_Control_Write(Wave_Control_Read() & ~WAVEA_SELECT_MASK);
 2591              		.loc 1 964 0
 2592 00b2 FFF7FEFF 		bl	Wave_Control_Read
 2593 00b6 0346     		mov	r3, r0
 2594 00b8 23F00103 		bic	r3, r3, #1
 2595 00bc DBB2     		uxtb	r3, r3
 2596 00be 1846     		mov	r0, r3
 2597 00c0 FFF7FEFF 		bl	Wave_Control_Write
 965:main.c        **** 	Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 2598              		.loc 1 965 0
 2599 00c4 FFF7FEFF 		bl	Wave_Control_Read
 2600 00c8 0346     		mov	r3, r0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 64


 2601 00ca 1846     		mov	r0, r3
 2602 00cc FFF7FEFF 		bl	Wave_Control_Write
 966:main.c        **** 	// Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_NOISE);
 967:main.c        **** 	WaveA_DAC_Start();
 2603              		.loc 1 967 0
 2604 00d0 FFF7FEFF 		bl	WaveA_DAC_Start
 968:main.c        **** 	WaveA_Buf_Start();
 2605              		.loc 1 968 0
 2606 00d4 FFF7FEFF 		bl	WaveA_Buf_Start
 969:main.c        ****     WaveB_DAC_Start();
 2607              		.loc 1 969 0
 2608 00d8 FFF7FEFF 		bl	WaveB_DAC_Start
 970:main.c        **** 	WaveB_Buf_Start();
 2609              		.loc 1 970 0
 2610 00dc FFF7FEFF 		bl	WaveB_Buf_Start
 971:main.c        **** 	WaveA_DAC_Wave1Setup(&WaveformA_Buffer[0], WAVEFORM_BUFFER_SIZE);
 2611              		.loc 1 971 0
 2612 00e0 4FF40061 		mov	r1, #2048
 2613 00e4 1548     		ldr	r0, .L141+12
 2614 00e6 FFF7FEFF 		bl	WaveA_DAC_Wave1Setup
 972:main.c        **** 	wavea_gain = 0;
 2615              		.loc 1 972 0
 2616 00ea 154B     		ldr	r3, .L141+16
 2617 00ec 0022     		movs	r2, #0
 2618 00ee 1A70     		strb	r2, [r3]
 973:main.c        **** 	WaveB_DAC_Wave1Setup(&WaveformB_Buffer[0], WAVEFORM_BUFFER_SIZE);
 2619              		.loc 1 973 0
 2620 00f0 4FF40061 		mov	r1, #2048
 2621 00f4 1348     		ldr	r0, .L141+20
 2622 00f6 FFF7FEFF 		bl	WaveB_DAC_Wave1Setup
 974:main.c        **** 	waveb_gain = 0;
 2623              		.loc 1 974 0
 2624 00fa 134B     		ldr	r3, .L141+24
 2625 00fc 0022     		movs	r2, #0
 2626 00fe 1A70     		strb	r2, [r3]
 975:main.c        ****     
 976:main.c        **** 	
 977:main.c        **** 	PRS_Start();
 2627              		.loc 1 977 0
 2628 0100 FFF7FEFF 		bl	PRS_Start
 978:main.c        ****     //
 979:main.c        ****     // Change noise output to use value adjusted for amplitude/offset
 980:main.c        ****     //Wave_DAC_Wave2Setup((uint8 *) PRS_SEED_PTR, 1);
 981:main.c        ****     WaveA_DAC_Wave2Setup(&Noise_Adjusted, 1);
 2629              		.loc 1 981 0
 2630 0104 0121     		movs	r1, #1
 2631 0106 1148     		ldr	r0, .L141+28
 2632 0108 FFF7FEFF 		bl	WaveA_DAC_Wave2Setup
 982:main.c        ****     WaveB_DAC_Wave2Setup(&Noise_Adjusted, 1);
 2633              		.loc 1 982 0
 2634 010c 0121     		movs	r1, #1
 2635 010e 0F48     		ldr	r0, .L141+28
 2636 0110 FFF7FEFF 		bl	WaveB_DAC_Wave2Setup
 983:main.c        **** 	
 984:main.c        **** 	// digital IO initializations
 985:main.c        **** 	Digital_Input_Status_Last = 0;
 2637              		.loc 1 985 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 65


 2638 0114 0E4B     		ldr	r3, .L141+32
 2639 0116 0022     		movs	r2, #0
 2640 0118 1A70     		strb	r2, [r3]
 986:main.c        **** 	Digital_Out_Control_Write(0);
 2641              		.loc 1 986 0
 2642 011a 0020     		movs	r0, #0
 2643 011c FFF7FEFF 		bl	Digital_Out_Control_Write
 987:main.c        **** 	Digital_AutoUpdate = 0;
 2644              		.loc 1 987 0
 2645 0120 0C4B     		ldr	r3, .L141+36
 2646 0122 0022     		movs	r2, #0
 2647 0124 1A70     		strb	r2, [r3]
 988:main.c        **** 	
 989:main.c        **** 	Digital_PWM_Start();
 2648              		.loc 1 989 0
 2649 0126 FFF7FEFF 		bl	Digital_PWM_Start
 990:main.c        **** }
 2650              		.loc 1 990 0
 2651 012a 00BF     		nop
 2652 012c 80BD     		pop	{r7, pc}
 2653              	.L142:
 2654 012e 00BF     		.align	2
 2655              	.L141:
 2656 0130 00000000 		.word	cCommandsReady
 2657 0134 00000000 		.word	bCommandReady
 2658 0138 00000000 		.word	trigger_source
 2659 013c 00000000 		.word	WaveformA_Buffer
 2660 0140 00000000 		.word	wavea_gain
 2661 0144 00000000 		.word	WaveformB_Buffer
 2662 0148 00000000 		.word	waveb_gain
 2663 014c 00000000 		.word	Noise_Adjusted
 2664 0150 00000000 		.word	Digital_Input_Status_Last
 2665 0154 00000000 		.word	Digital_AutoUpdate
 2666              		.cfi_endproc
 2667              	.LFE65:
 2668              		.size	Hardware_Config, .-Hardware_Config
 2669              		.section	.text.DMA_Config,"ax",%progbits
 2670              		.align	2
 2671              		.global	DMA_Config
 2672              		.thumb
 2673              		.thumb_func
 2674              		.type	DMA_Config, %function
 2675              	DMA_Config:
 2676              	.LFB66:
 991:main.c        **** 
 992:main.c        **** void DMA_Config(void)
 993:main.c        **** {
 2677              		.loc 1 993 0
 2678              		.cfi_startproc
 2679              		@ args = 0, pretend = 0, frame = 0
 2680              		@ frame_needed = 1, uses_anonymous_args = 0
 2681 0000 80B5     		push	{r7, lr}
 2682              		.cfi_def_cfa_offset 8
 2683              		.cfi_offset 7, -8
 2684              		.cfi_offset 14, -4
 2685 0002 00AF     		add	r7, sp, #0
 2686              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 66


 994:main.c        ****     DMA_Channel_1_Chan = DMA_Channel_1_DmaInitialize(DMA_Channel_1_BYTES_PER_BURST, DMA_Channel_1_R
 2687              		.loc 1 994 0
 2688 0004 41F6FF73 		movw	r3, #8191
 2689 0008 4FF48042 		mov	r2, #16384
 2690 000c 0121     		movs	r1, #1
 2691 000e 0220     		movs	r0, #2
 2692 0010 FFF7FEFF 		bl	DMA_Channel_1_DmaInitialize
 2693 0014 0346     		mov	r3, r0
 2694 0016 1A46     		mov	r2, r3
 2695 0018 3F4B     		ldr	r3, .L145
 2696 001a 1A70     		strb	r2, [r3]
 995:main.c        ****         HI16(DMA_Channel_1_SRC_BASE), HI16(DMA_Channel_1_DST_BASE));
 996:main.c        ****     DMA_Channel_1_TD[0] = CyDmaTdAllocate();
 2697              		.loc 1 996 0
 2698 001c FFF7FEFF 		bl	CyDmaTdAllocate
 2699 0020 0346     		mov	r3, r0
 2700 0022 1A46     		mov	r2, r3
 2701 0024 3D4B     		ldr	r3, .L145+4
 2702 0026 1A70     		strb	r2, [r3]
 997:main.c        ****     CyDmaTdSetConfiguration(DMA_Channel_1_TD[0], BUFFER_SIZE*sizeof(int16), DMA_Channel_1_TD[0], DM
 2703              		.loc 1 997 0
 2704 0028 3C4B     		ldr	r3, .L145+4
 2705 002a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2706 002c 3B4B     		ldr	r3, .L145+4
 2707 002e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2708 0030 0623     		movs	r3, #6
 2709 0032 4FF40061 		mov	r1, #2048
 2710 0036 FFF7FEFF 		bl	CyDmaTdSetConfiguration
 998:main.c        ****     CyDmaTdSetAddress(DMA_Channel_1_TD[0], LO16((uint32)ADC_1_SAR_WRK0_PTR), LO16((uint32)&Channel_
 2711              		.loc 1 998 0
 2712 003a 384B     		ldr	r3, .L145+4
 2713 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2714 003e 384A     		ldr	r2, .L145+8
 2715 0040 92B2     		uxth	r2, r2
 2716 0042 45F6A031 		movw	r1, #23456
 2717 0046 1846     		mov	r0, r3
 2718 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
 999:main.c        ****     CyDmaChSetInitialTd(DMA_Channel_1_Chan, DMA_Channel_1_TD[0]);
 2719              		.loc 1 999 0
 2720 004c 324B     		ldr	r3, .L145
 2721 004e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2722 0050 324B     		ldr	r3, .L145+4
 2723 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2724 0054 1946     		mov	r1, r3
 2725 0056 1046     		mov	r0, r2
 2726 0058 FFF7FEFF 		bl	CyDmaChSetInitialTd
1000:main.c        ****     CyDmaChRoundRobin(DMA_Channel_1_Chan, 1);
 2727              		.loc 1 1000 0
 2728 005c 2E4B     		ldr	r3, .L145
 2729 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2730 0060 0121     		movs	r1, #1
 2731 0062 1846     		mov	r0, r3
 2732 0064 FFF7FEFF 		bl	CyDmaChRoundRobin
1001:main.c        ****     CyDmaChSetRequest(DMA_Channel_1_Chan, CPU_TERM_CHAIN);
 2733              		.loc 1 1001 0
 2734 0068 2B4B     		ldr	r3, .L145
 2735 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 67


 2736 006c 0421     		movs	r1, #4
 2737 006e 1846     		mov	r0, r3
 2738 0070 FFF7FEFF 		bl	CyDmaChSetRequest
1002:main.c        ****     CyDmaChEnable(DMA_Channel_1_Chan, 1);
 2739              		.loc 1 1002 0
 2740 0074 284B     		ldr	r3, .L145
 2741 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2742 0078 0121     		movs	r1, #1
 2743 007a 1846     		mov	r0, r3
 2744 007c FFF7FEFF 		bl	CyDmaChEnable
1003:main.c        ****     CyDmaChEnable(DMA_Channel_1_Chan, 1);
 2745              		.loc 1 1003 0
 2746 0080 254B     		ldr	r3, .L145
 2747 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2748 0084 0121     		movs	r1, #1
 2749 0086 1846     		mov	r0, r3
 2750 0088 FFF7FEFF 		bl	CyDmaChEnable
1004:main.c        **** 
1005:main.c        ****     DMA_Channel_2_Chan = DMA_Channel_2_DmaInitialize(DMA_Channel_2_BYTES_PER_BURST, DMA_Channel_2_R
 2751              		.loc 1 1005 0
 2752 008c 41F6FF73 		movw	r3, #8191
 2753 0090 4FF48042 		mov	r2, #16384
 2754 0094 0121     		movs	r1, #1
 2755 0096 0220     		movs	r0, #2
 2756 0098 FFF7FEFF 		bl	DMA_Channel_2_DmaInitialize
 2757 009c 0346     		mov	r3, r0
 2758 009e 1A46     		mov	r2, r3
 2759 00a0 204B     		ldr	r3, .L145+12
 2760 00a2 1A70     		strb	r2, [r3]
1006:main.c        ****         HI16(DMA_Channel_2_SRC_BASE), HI16(DMA_Channel_2_DST_BASE));
1007:main.c        ****     DMA_Channel_2_TD[0] = CyDmaTdAllocate();
 2761              		.loc 1 1007 0
 2762 00a4 FFF7FEFF 		bl	CyDmaTdAllocate
 2763 00a8 0346     		mov	r3, r0
 2764 00aa 1A46     		mov	r2, r3
 2765 00ac 1E4B     		ldr	r3, .L145+16
 2766 00ae 1A70     		strb	r2, [r3]
1008:main.c        ****     CyDmaTdSetConfiguration(DMA_Channel_2_TD[0], BUFFER_SIZE*sizeof(int16), DMA_Channel_2_TD[0], DM
 2767              		.loc 1 1008 0
 2768 00b0 1D4B     		ldr	r3, .L145+16
 2769 00b2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2770 00b4 1C4B     		ldr	r3, .L145+16
 2771 00b6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2772 00b8 0223     		movs	r3, #2
 2773 00ba 4FF40061 		mov	r1, #2048
 2774 00be FFF7FEFF 		bl	CyDmaTdSetConfiguration
1009:main.c        ****     CyDmaTdSetAddress(DMA_Channel_2_TD[0], LO16((uint32)ADC_2_SAR_WRK0_PTR), LO16((uint32)&Channel_
 2775              		.loc 1 1009 0
 2776 00c2 194B     		ldr	r3, .L145+16
 2777 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2778 00c6 194A     		ldr	r2, .L145+20
 2779 00c8 92B2     		uxth	r2, r2
 2780 00ca 45F6A231 		movw	r1, #23458
 2781 00ce 1846     		mov	r0, r3
 2782 00d0 FFF7FEFF 		bl	CyDmaTdSetAddress
1010:main.c        ****     CyDmaChSetInitialTd(DMA_Channel_2_Chan, DMA_Channel_2_TD[0]);
 2783              		.loc 1 1010 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 68


 2784 00d4 134B     		ldr	r3, .L145+12
 2785 00d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2786 00d8 134B     		ldr	r3, .L145+16
 2787 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2788 00dc 1946     		mov	r1, r3
 2789 00de 1046     		mov	r0, r2
 2790 00e0 FFF7FEFF 		bl	CyDmaChSetInitialTd
1011:main.c        ****     CyDmaChRoundRobin(DMA_Channel_2_Chan, 1);
 2791              		.loc 1 1011 0
 2792 00e4 0F4B     		ldr	r3, .L145+12
 2793 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2794 00e8 0121     		movs	r1, #1
 2795 00ea 1846     		mov	r0, r3
 2796 00ec FFF7FEFF 		bl	CyDmaChRoundRobin
1012:main.c        ****     CyDmaChSetRequest(DMA_Channel_2_Chan, CPU_TERM_CHAIN);
 2797              		.loc 1 1012 0
 2798 00f0 0C4B     		ldr	r3, .L145+12
 2799 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2800 00f4 0421     		movs	r1, #4
 2801 00f6 1846     		mov	r0, r3
 2802 00f8 FFF7FEFF 		bl	CyDmaChSetRequest
1013:main.c        ****     CyDmaChEnable(DMA_Channel_2_Chan, 1);
 2803              		.loc 1 1013 0
 2804 00fc 094B     		ldr	r3, .L145+12
 2805 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2806 0100 0121     		movs	r1, #1
 2807 0102 1846     		mov	r0, r3
 2808 0104 FFF7FEFF 		bl	CyDmaChEnable
1014:main.c        ****     CyDmaChEnable(DMA_Channel_2_Chan, 1);
 2809              		.loc 1 1014 0
 2810 0108 064B     		ldr	r3, .L145+12
 2811 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2812 010c 0121     		movs	r1, #1
 2813 010e 1846     		mov	r0, r3
 2814 0110 FFF7FEFF 		bl	CyDmaChEnable
1015:main.c        **** 
1016:main.c        ****     return;
 2815              		.loc 1 1016 0
 2816 0114 00BF     		nop
1017:main.c        **** }
 2817              		.loc 1 1017 0
 2818 0116 80BD     		pop	{r7, pc}
 2819              	.L146:
 2820              		.align	2
 2821              	.L145:
 2822 0118 00000000 		.word	DMA_Channel_1_Chan
 2823 011c 00000000 		.word	DMA_Channel_1_TD
 2824 0120 00000000 		.word	Channel_1_Data
 2825 0124 00000000 		.word	DMA_Channel_2_Chan
 2826 0128 00000000 		.word	DMA_Channel_2_TD
 2827 012c 00000000 		.word	Channel_2_Data
 2828              		.cfi_endproc
 2829              	.LFE66:
 2830              		.size	DMA_Config, .-DMA_Config
 2831              		.section	.text.GetLastSampleIndex,"ax",%progbits
 2832              		.align	2
 2833              		.global	GetLastSampleIndex
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 69


 2834              		.thumb
 2835              		.thumb_func
 2836              		.type	GetLastSampleIndex, %function
 2837              	GetLastSampleIndex:
 2838              	.LFB67:
1018:main.c        **** 
1019:main.c        **** // returns the address of the first sample in the circular DMA buffer
1020:main.c        **** 
1021:main.c        **** uint16 GetLastSampleIndex(uint8 chHandle)
1022:main.c        **** {
 2839              		.loc 1 1022 0
 2840              		.cfi_startproc
 2841              		@ args = 0, pretend = 0, frame = 16
 2842              		@ frame_needed = 1, uses_anonymous_args = 0
 2843              		@ link register save eliminated.
 2844 0000 80B4     		push	{r7}
 2845              		.cfi_def_cfa_offset 4
 2846              		.cfi_offset 7, -4
 2847 0002 85B0     		sub	sp, sp, #20
 2848              		.cfi_def_cfa_offset 24
 2849 0004 00AF     		add	r7, sp, #0
 2850              		.cfi_def_cfa_register 7
 2851 0006 0346     		mov	r3, r0
 2852 0008 FB71     		strb	r3, [r7, #7]
1023:main.c        **** 	uint16 index;
1024:main.c        **** 
1025:main.c        **** 	// get the upper 16 bits of the destination (not strictly necessary) (actually it doesn't work sin
1026:main.c        **** 	// upper 16 bit addresses for the same RAM information
1027:main.c        **** 	//dest_address = (((uint32) CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG1[3]) << 24) | (((uint32) CY_DMA
1028:main.c        **** 	
1029:main.c        **** 	// grab the lower 16 bits of the destination address
1030:main.c        **** 	// the assumption here is that "work seperate" has been enabled, so a copy of the TD is stored in 
1031:main.c        **** 	index = ((uint32) CY_DMA_TDMEM_STRUCT_PTR[chHandle].TD1[3] << 8) | ((uint32) CY_DMA_TDMEM_STRUCT_P
 2853              		.loc 1 1031 0
 2854 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2855 000c DB00     		lsls	r3, r3, #3
 2856 000e 03F18043 		add	r3, r3, #1073741824
 2857 0012 03F5F043 		add	r3, r3, #30720
 2858 0016 DB79     		ldrb	r3, [r3, #7]
 2859 0018 DBB2     		uxtb	r3, r3
 2860 001a 9BB2     		uxth	r3, r3
 2861 001c 1B02     		lsls	r3, r3, #8
 2862 001e 9AB2     		uxth	r2, r3
 2863 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2864 0022 DB00     		lsls	r3, r3, #3
 2865 0024 03F18043 		add	r3, r3, #1073741824
 2866 0028 03F5F043 		add	r3, r3, #30720
 2867 002c 9B79     		ldrb	r3, [r3, #6]
 2868 002e DBB2     		uxtb	r3, r3
 2869 0030 9BB2     		uxth	r3, r3
 2870 0032 1343     		orrs	r3, r3, r2
 2871 0034 FB81     		strh	r3, [r7, #14]	@ movhi
1032:main.c        **** 	
1033:main.c        **** 	// calculate the index by taking the difference between the starting and ending destination addres
1034:main.c        **** 	index = (index - sizeof(int16) - LO16((uint32) &Channel_1_Data[0]))/sizeof(int16) % BUFFER_SIZE;
 2872              		.loc 1 1034 0
 2873 0036 FA89     		ldrh	r2, [r7, #14]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 70


 2874 0038 084B     		ldr	r3, .L149
 2875 003a 99B2     		uxth	r1, r3
 2876 003c 6FF00103 		mvn	r3, #1
 2877 0040 5B1A     		subs	r3, r3, r1
 2878 0042 1344     		add	r3, r3, r2
 2879 0044 5B08     		lsrs	r3, r3, #1
 2880 0046 9BB2     		uxth	r3, r3
 2881 0048 C3F30903 		ubfx	r3, r3, #0, #10
 2882 004c FB81     		strh	r3, [r7, #14]	@ movhi
1035:main.c        **** 	
1036:main.c        **** 	return index;
 2883              		.loc 1 1036 0
 2884 004e FB89     		ldrh	r3, [r7, #14]
1037:main.c        **** }
 2885              		.loc 1 1037 0
 2886 0050 1846     		mov	r0, r3
 2887 0052 1437     		adds	r7, r7, #20
 2888              		.cfi_def_cfa_offset 4
 2889 0054 BD46     		mov	sp, r7
 2890              		.cfi_def_cfa_register 13
 2891              		@ sp needed
 2892 0056 80BC     		pop	{r7}
 2893              		.cfi_restore 7
 2894              		.cfi_def_cfa_offset 0
 2895 0058 7047     		bx	lr
 2896              	.L150:
 2897 005a 00BF     		.align	2
 2898              	.L149:
 2899 005c 00000000 		.word	Channel_1_Data
 2900              		.cfi_endproc
 2901              	.LFE67:
 2902              		.size	GetLastSampleIndex, .-GetLastSampleIndex
 2903              		.section	.text.CommandCheck,"ax",%progbits
 2904              		.align	2
 2905              		.global	CommandCheck
 2906              		.thumb
 2907              		.thumb_func
 2908              		.type	CommandCheck, %function
 2909              	CommandCheck:
 2910              	.LFB68:
1038:main.c        **** 
1039:main.c        **** void CommandCheck(void)
1040:main.c        **** {
 2911              		.loc 1 1040 0
 2912              		.cfi_startproc
 2913              		@ args = 0, pretend = 0, frame = 8
 2914              		@ frame_needed = 1, uses_anonymous_args = 0
 2915 0000 80B5     		push	{r7, lr}
 2916              		.cfi_def_cfa_offset 8
 2917              		.cfi_offset 7, -8
 2918              		.cfi_offset 14, -4
 2919 0002 82B0     		sub	sp, sp, #8
 2920              		.cfi_def_cfa_offset 16
 2921 0004 00AF     		add	r7, sp, #0
 2922              		.cfi_def_cfa_register 7
1041:main.c        **** 	uint16 i, ReceivedBytes;
1042:main.c        **** 	// check to see if line state has changed? thought this might be necessary, but it probably isn't
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 71


1043:main.c        **** 	USBUART_IsLineChanged();
 2923              		.loc 1 1043 0
 2924 0006 FFF7FEFF 		bl	USBUART_IsLineChanged
1044:main.c        **** 	
1045:main.c        **** 	// if data is waiting
1046:main.c        **** 	if(USBUART_DataIsReady() != 0)
 2925              		.loc 1 1046 0
 2926 000a FFF7FEFF 		bl	USBUART_DataIsReady
 2927 000e 0346     		mov	r3, r0
 2928 0010 002B     		cmp	r3, #0
 2929 0012 5AD0     		beq	.L152
1047:main.c        **** 	{
1048:main.c        **** 		// lets find out how much the PC sent to us
1049:main.c        **** 		ReceivedBytes = USBUART_GetCount();
 2930              		.loc 1 1049 0
 2931 0014 FFF7FEFF 		bl	USBUART_GetCount
 2932 0018 0346     		mov	r3, r0
 2933 001a BB80     		strh	r3, [r7, #4]	@ movhi
1050:main.c        **** 		
1051:main.c        **** 		// if the amount of data received is non-zero
1052:main.c        **** 		if(ReceivedBytes != 0)
 2934              		.loc 1 1052 0
 2935 001c BB88     		ldrh	r3, [r7, #4]
 2936 001e 002B     		cmp	r3, #0
 2937 0020 07D0     		beq	.L153
1053:main.c        **** 		{
1054:main.c        **** 			cCharsReceived = USBUART_GetAll((uint8 *) &szTempBuffer[0]);
 2938              		.loc 1 1054 0
 2939 0022 4F48     		ldr	r0, .L164
 2940 0024 FFF7FEFF 		bl	USBUART_GetAll
 2941 0028 0346     		mov	r3, r0
 2942 002a DAB2     		uxtb	r2, r3
 2943 002c 4D4B     		ldr	r3, .L164+4
 2944 002e 1A70     		strb	r2, [r3]
 2945 0030 02E0     		b	.L154
 2946              	.L153:
1055:main.c        **** 		}
1056:main.c        **** 		else
1057:main.c        **** 		{
1058:main.c        **** 			// its a zero length data packet, it *should* be safe to do this and not worry about corrupting 
1059:main.c        **** 			USBUART_GetAll((uint8 *) &szTempBuffer[0]);
 2947              		.loc 1 1059 0
 2948 0032 4B48     		ldr	r0, .L164
 2949 0034 FFF7FEFF 		bl	USBUART_GetAll
 2950              	.L154:
1060:main.c        **** 			//PutString("Zero Length Packet\n");
1061:main.c        **** 		}
1062:main.c        **** 		
1063:main.c        **** 		// move the data from the temporary buffer into the circular command buffer
1064:main.c        **** 		i = 0;
 2951              		.loc 1 1064 0
 2952 0038 0023     		movs	r3, #0
 2953 003a FB80     		strh	r3, [r7, #6]	@ movhi
 2954              	.L156:
1065:main.c        **** 		do
1066:main.c        **** 		{
1067:main.c        **** 			szCommandsBuffer[iWrite] = szTempBuffer[i];
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 72


 2955              		.loc 1 1067 0 discriminator 2
 2956 003c 4A4B     		ldr	r3, .L164+8
 2957 003e 1B88     		ldrh	r3, [r3]
 2958 0040 1946     		mov	r1, r3
 2959 0042 FB88     		ldrh	r3, [r7, #6]
 2960 0044 464A     		ldr	r2, .L164
 2961 0046 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 2962 0048 484B     		ldr	r3, .L164+12
 2963 004a 5A54     		strb	r2, [r3, r1]
1068:main.c        **** 			i++;
 2964              		.loc 1 1068 0 discriminator 2
 2965 004c FB88     		ldrh	r3, [r7, #6]
 2966 004e 0133     		adds	r3, r3, #1
 2967 0050 FB80     		strh	r3, [r7, #6]	@ movhi
1069:main.c        **** 			iWrite++;
 2968              		.loc 1 1069 0 discriminator 2
 2969 0052 454B     		ldr	r3, .L164+8
 2970 0054 1B88     		ldrh	r3, [r3]
 2971 0056 0133     		adds	r3, r3, #1
 2972 0058 9AB2     		uxth	r2, r3
 2973 005a 434B     		ldr	r3, .L164+8
 2974 005c 1A80     		strh	r2, [r3]	@ movhi
1070:main.c        **** 			iWrite = iWrite % CIRCULAR_BUFFER_SIZE;
 2975              		.loc 1 1070 0 discriminator 2
 2976 005e 424B     		ldr	r3, .L164+8
 2977 0060 1B88     		ldrh	r3, [r3]
 2978 0062 C3F30B03 		ubfx	r3, r3, #0, #12
 2979 0066 9AB2     		uxth	r2, r3
 2980 0068 3F4B     		ldr	r3, .L164+8
 2981 006a 1A80     		strh	r2, [r3]	@ movhi
1071:main.c        **** 		}while((iWrite != iRead) && (i != cCharsReceived));
 2982              		.loc 1 1071 0 discriminator 2
 2983 006c 3E4B     		ldr	r3, .L164+8
 2984 006e 1A88     		ldrh	r2, [r3]
 2985 0070 3F4B     		ldr	r3, .L164+16
 2986 0072 1B88     		ldrh	r3, [r3]
 2987 0074 9A42     		cmp	r2, r3
 2988 0076 05D0     		beq	.L155
 2989              		.loc 1 1071 0 is_stmt 0 discriminator 1
 2990 0078 3A4B     		ldr	r3, .L164+4
 2991 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2992 007c 9BB2     		uxth	r3, r3
 2993 007e FA88     		ldrh	r2, [r7, #6]
 2994 0080 9A42     		cmp	r2, r3
 2995 0082 DBD1     		bne	.L156
 2996              	.L155:
1072:main.c        **** 		
1073:main.c        **** 		// scan the command buffer for commands
1074:main.c        **** 		i = iRead;
 2997              		.loc 1 1074 0 is_stmt 1
 2998 0084 3A4B     		ldr	r3, .L164+16
 2999 0086 1B88     		ldrh	r3, [r3]	@ movhi
 3000 0088 FB80     		strh	r3, [r7, #6]	@ movhi
 3001              	.L159:
1075:main.c        **** 		do
1076:main.c        **** 		{
1077:main.c        **** 			// if we see a carriage return or a line feed
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 73


1078:main.c        **** 			if((szCommandsBuffer[i] == '\n') || (szCommandsBuffer[i] == '\r'))
 3002              		.loc 1 1078 0
 3003 008a FB88     		ldrh	r3, [r7, #6]
 3004 008c 374A     		ldr	r2, .L164+12
 3005 008e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3006 0090 0A2B     		cmp	r3, #10
 3007 0092 04D0     		beq	.L157
 3008              		.loc 1 1078 0 is_stmt 0 discriminator 1
 3009 0094 FB88     		ldrh	r3, [r7, #6]
 3010 0096 354A     		ldr	r2, .L164+12
 3011 0098 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3012 009a 0D2B     		cmp	r3, #13
 3013 009c 09D1     		bne	.L158
 3014              	.L157:
1079:main.c        **** 			{
1080:main.c        **** 				cCommandsReady++; // indicate the buffer contains commands to be dealt with
 3015              		.loc 1 1080 0 is_stmt 1
 3016 009e 354B     		ldr	r3, .L164+20
 3017 00a0 1B88     		ldrh	r3, [r3]
 3018 00a2 0133     		adds	r3, r3, #1
 3019 00a4 9AB2     		uxth	r2, r3
 3020 00a6 334B     		ldr	r3, .L164+20
 3021 00a8 1A80     		strh	r2, [r3]	@ movhi
1081:main.c        **** 				szCommandsBuffer[i] = 0; // null terminate the string
 3022              		.loc 1 1081 0
 3023 00aa FB88     		ldrh	r3, [r7, #6]
 3024 00ac 2F4A     		ldr	r2, .L164+12
 3025 00ae 0021     		movs	r1, #0
 3026 00b0 D154     		strb	r1, [r2, r3]
 3027              	.L158:
1082:main.c        **** 			}
1083:main.c        **** 			i++;
 3028              		.loc 1 1083 0
 3029 00b2 FB88     		ldrh	r3, [r7, #6]
 3030 00b4 0133     		adds	r3, r3, #1
 3031 00b6 FB80     		strh	r3, [r7, #6]	@ movhi
1084:main.c        **** 			i = i % CIRCULAR_BUFFER_SIZE;
 3032              		.loc 1 1084 0
 3033 00b8 FB88     		ldrh	r3, [r7, #6]	@ movhi
 3034 00ba C3F30B03 		ubfx	r3, r3, #0, #12
 3035 00be FB80     		strh	r3, [r7, #6]	@ movhi
1085:main.c        **** 		}while(i != iWrite);
 3036              		.loc 1 1085 0
 3037 00c0 294B     		ldr	r3, .L164+8
 3038 00c2 1B88     		ldrh	r3, [r3]
 3039 00c4 FA88     		ldrh	r2, [r7, #6]
 3040 00c6 9A42     		cmp	r2, r3
 3041 00c8 DFD1     		bne	.L159
 3042              	.L152:
1086:main.c        **** 	}
1087:main.c        **** 	
1088:main.c        **** 	i = 0;
 3043              		.loc 1 1088 0
 3044 00ca 0023     		movs	r3, #0
 3045 00cc FB80     		strh	r3, [r7, #6]	@ movhi
1089:main.c        **** 	if(cCommandsReady > 0 && bCommandReady == 0)
 3046              		.loc 1 1089 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 74


 3047 00ce 294B     		ldr	r3, .L164+20
 3048 00d0 1B88     		ldrh	r3, [r3]
 3049 00d2 002B     		cmp	r3, #0
 3050 00d4 40D0     		beq	.L163
 3051              		.loc 1 1089 0 is_stmt 0 discriminator 1
 3052 00d6 284B     		ldr	r3, .L164+24
 3053 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3054 00da 002B     		cmp	r3, #0
 3055 00dc 3CD1     		bne	.L163
1090:main.c        **** 	{
1091:main.c        **** 		while(szCommandsBuffer[iRead] != 0)
 3056              		.loc 1 1091 0 is_stmt 1
 3057 00de 17E0     		b	.L161
 3058              	.L162:
1092:main.c        **** 		{
1093:main.c        **** 			szCommand[i] = szCommandsBuffer[iRead];
 3059              		.loc 1 1093 0
 3060 00e0 FB88     		ldrh	r3, [r7, #6]
 3061 00e2 234A     		ldr	r2, .L164+16
 3062 00e4 1288     		ldrh	r2, [r2]
 3063 00e6 1146     		mov	r1, r2
 3064 00e8 204A     		ldr	r2, .L164+12
 3065 00ea 515C     		ldrb	r1, [r2, r1]	@ zero_extendqisi2
 3066 00ec 234A     		ldr	r2, .L164+28
 3067 00ee D154     		strb	r1, [r2, r3]
1094:main.c        **** 			i++;
 3068              		.loc 1 1094 0
 3069 00f0 FB88     		ldrh	r3, [r7, #6]
 3070 00f2 0133     		adds	r3, r3, #1
 3071 00f4 FB80     		strh	r3, [r7, #6]	@ movhi
1095:main.c        **** 			iRead++;
 3072              		.loc 1 1095 0
 3073 00f6 1E4B     		ldr	r3, .L164+16
 3074 00f8 1B88     		ldrh	r3, [r3]
 3075 00fa 0133     		adds	r3, r3, #1
 3076 00fc 9AB2     		uxth	r2, r3
 3077 00fe 1C4B     		ldr	r3, .L164+16
 3078 0100 1A80     		strh	r2, [r3]	@ movhi
1096:main.c        **** 			iRead = iRead % CIRCULAR_BUFFER_SIZE;
 3079              		.loc 1 1096 0
 3080 0102 1B4B     		ldr	r3, .L164+16
 3081 0104 1B88     		ldrh	r3, [r3]
 3082 0106 C3F30B03 		ubfx	r3, r3, #0, #12
 3083 010a 9AB2     		uxth	r2, r3
 3084 010c 184B     		ldr	r3, .L164+16
 3085 010e 1A80     		strh	r2, [r3]	@ movhi
 3086              	.L161:
1091:main.c        **** 		{
 3087              		.loc 1 1091 0
 3088 0110 174B     		ldr	r3, .L164+16
 3089 0112 1B88     		ldrh	r3, [r3]
 3090 0114 1A46     		mov	r2, r3
 3091 0116 154B     		ldr	r3, .L164+12
 3092 0118 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 3093 011a 002B     		cmp	r3, #0
 3094 011c E0D1     		bne	.L162
1097:main.c        **** 		}
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 75


1098:main.c        **** 		
1099:main.c        **** 		szCommand[i] = 0;
 3095              		.loc 1 1099 0
 3096 011e FB88     		ldrh	r3, [r7, #6]
 3097 0120 164A     		ldr	r2, .L164+28
 3098 0122 0021     		movs	r1, #0
 3099 0124 D154     		strb	r1, [r2, r3]
1100:main.c        **** 		iRead++;
 3100              		.loc 1 1100 0
 3101 0126 124B     		ldr	r3, .L164+16
 3102 0128 1B88     		ldrh	r3, [r3]
 3103 012a 0133     		adds	r3, r3, #1
 3104 012c 9AB2     		uxth	r2, r3
 3105 012e 104B     		ldr	r3, .L164+16
 3106 0130 1A80     		strh	r2, [r3]	@ movhi
1101:main.c        **** 		iRead = iRead % CIRCULAR_BUFFER_SIZE;
 3107              		.loc 1 1101 0
 3108 0132 0F4B     		ldr	r3, .L164+16
 3109 0134 1B88     		ldrh	r3, [r3]
 3110 0136 C3F30B03 		ubfx	r3, r3, #0, #12
 3111 013a 9AB2     		uxth	r2, r3
 3112 013c 0C4B     		ldr	r3, .L164+16
 3113 013e 1A80     		strh	r2, [r3]	@ movhi
1102:main.c        **** 		cCommandsReady--;
 3114              		.loc 1 1102 0
 3115 0140 0C4B     		ldr	r3, .L164+20
 3116 0142 1B88     		ldrh	r3, [r3]
 3117 0144 013B     		subs	r3, r3, #1
 3118 0146 9AB2     		uxth	r2, r3
 3119 0148 0A4B     		ldr	r3, .L164+20
 3120 014a 1A80     		strh	r2, [r3]	@ movhi
1103:main.c        **** 		if(i == 0)
 3121              		.loc 1 1103 0
 3122 014c FB88     		ldrh	r3, [r7, #6]
 3123 014e 002B     		cmp	r3, #0
 3124 0150 02D0     		beq	.L163
1104:main.c        **** 		{
1105:main.c        **** 			// this is a zero length command, nothing to do
1106:main.c        **** 		}
1107:main.c        **** 		else
1108:main.c        **** 		{
1109:main.c        **** 			// the command was at least 1 character, report it
1110:main.c        **** 			bCommandReady = 1;
 3125              		.loc 1 1110 0
 3126 0152 094B     		ldr	r3, .L164+24
 3127 0154 0122     		movs	r2, #1
 3128 0156 1A70     		strb	r2, [r3]
 3129              	.L163:
1111:main.c        **** 		}
1112:main.c        **** 	}
1113:main.c        **** }
 3130              		.loc 1 1113 0
 3131 0158 00BF     		nop
 3132 015a 0837     		adds	r7, r7, #8
 3133              		.cfi_def_cfa_offset 8
 3134 015c BD46     		mov	sp, r7
 3135              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 76


 3136              		@ sp needed
 3137 015e 80BD     		pop	{r7, pc}
 3138              	.L165:
 3139              		.align	2
 3140              	.L164:
 3141 0160 00000000 		.word	szTempBuffer
 3142 0164 00000000 		.word	cCharsReceived
 3143 0168 00000000 		.word	iWrite
 3144 016c 00000000 		.word	szCommandsBuffer
 3145 0170 00000000 		.word	iRead
 3146 0174 00000000 		.word	cCommandsReady
 3147 0178 00000000 		.word	bCommandReady
 3148 017c 00000000 		.word	szCommand
 3149              		.cfi_endproc
 3150              	.LFE68:
 3151              		.size	CommandCheck, .-CommandCheck
 3152              		.section	.text.PutString,"ax",%progbits
 3153              		.align	2
 3154              		.global	PutString
 3155              		.thumb
 3156              		.thumb_func
 3157              		.type	PutString, %function
 3158              	PutString:
 3159              	.LFB69:
1114:main.c        **** 
1115:main.c        **** void PutString(char * string)
1116:main.c        **** {
 3160              		.loc 1 1116 0
 3161              		.cfi_startproc
 3162              		@ args = 0, pretend = 0, frame = 8
 3163              		@ frame_needed = 1, uses_anonymous_args = 0
 3164 0000 80B5     		push	{r7, lr}
 3165              		.cfi_def_cfa_offset 8
 3166              		.cfi_offset 7, -8
 3167              		.cfi_offset 14, -4
 3168 0002 82B0     		sub	sp, sp, #8
 3169              		.cfi_def_cfa_offset 16
 3170 0004 00AF     		add	r7, sp, #0
 3171              		.cfi_def_cfa_register 7
 3172 0006 7860     		str	r0, [r7, #4]
1117:main.c        **** 	while(USBUART_CDCIsReady() == 0){};
 3173              		.loc 1 1117 0
 3174 0008 00BF     		nop
 3175              	.L167:
 3176              		.loc 1 1117 0 is_stmt 0 discriminator 1
 3177 000a FFF7FEFF 		bl	USBUART_CDCIsReady
 3178 000e 0346     		mov	r3, r0
 3179 0010 002B     		cmp	r3, #0
 3180 0012 FAD0     		beq	.L167
1118:main.c        **** 	USBUART_PutString(string);
 3181              		.loc 1 1118 0 is_stmt 1
 3182 0014 7868     		ldr	r0, [r7, #4]
 3183 0016 FFF7FEFF 		bl	USBUART_PutString
1119:main.c        **** }
 3184              		.loc 1 1119 0
 3185 001a 00BF     		nop
 3186 001c 0837     		adds	r7, r7, #8
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 77


 3187              		.cfi_def_cfa_offset 8
 3188 001e BD46     		mov	sp, r7
 3189              		.cfi_def_cfa_register 13
 3190              		@ sp needed
 3191 0020 80BD     		pop	{r7, pc}
 3192              		.cfi_endproc
 3193              	.LFE69:
 3194              		.size	PutString, .-PutString
 3195 0022 00BF     		.section	.text.PutChar,"ax",%progbits
 3196              		.align	2
 3197              		.global	PutChar
 3198              		.thumb
 3199              		.thumb_func
 3200              		.type	PutChar, %function
 3201              	PutChar:
 3202              	.LFB70:
1120:main.c        **** 
1121:main.c        **** void PutChar(char Data)
1122:main.c        **** {
 3203              		.loc 1 1122 0
 3204              		.cfi_startproc
 3205              		@ args = 0, pretend = 0, frame = 8
 3206              		@ frame_needed = 1, uses_anonymous_args = 0
 3207 0000 80B5     		push	{r7, lr}
 3208              		.cfi_def_cfa_offset 8
 3209              		.cfi_offset 7, -8
 3210              		.cfi_offset 14, -4
 3211 0002 82B0     		sub	sp, sp, #8
 3212              		.cfi_def_cfa_offset 16
 3213 0004 00AF     		add	r7, sp, #0
 3214              		.cfi_def_cfa_register 7
 3215 0006 0346     		mov	r3, r0
 3216 0008 FB71     		strb	r3, [r7, #7]
1123:main.c        **** 	while(USBUART_CDCIsReady() == 0){};
 3217              		.loc 1 1123 0
 3218 000a 00BF     		nop
 3219              	.L169:
 3220              		.loc 1 1123 0 is_stmt 0 discriminator 1
 3221 000c FFF7FEFF 		bl	USBUART_CDCIsReady
 3222 0010 0346     		mov	r3, r0
 3223 0012 002B     		cmp	r3, #0
 3224 0014 FAD0     		beq	.L169
1124:main.c        **** 	USBUART_PutChar(Data);
 3225              		.loc 1 1124 0 is_stmt 1
 3226 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3227 0018 1846     		mov	r0, r3
 3228 001a FFF7FEFF 		bl	USBUART_PutChar
1125:main.c        **** }
 3229              		.loc 1 1125 0
 3230 001e 00BF     		nop
 3231 0020 0837     		adds	r7, r7, #8
 3232              		.cfi_def_cfa_offset 8
 3233 0022 BD46     		mov	sp, r7
 3234              		.cfi_def_cfa_register 13
 3235              		@ sp needed
 3236 0024 80BD     		pop	{r7, pc}
 3237              		.cfi_endproc
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 78


 3238              	.LFE70:
 3239              		.size	PutChar, .-PutChar
 3240 0026 00BF     		.text
 3241              	.Letext0:
 3242              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3243              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3244              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3245              		.file 5 "Generated_Source\\PSoC5/CYDMAC.H"
 3246              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 3247              		.section	.debug_info,"",%progbits
 3248              	.Ldebug_info0:
 3249 0000 51050000 		.4byte	0x551
 3250 0004 0400     		.2byte	0x4
 3251 0006 00000000 		.4byte	.Ldebug_abbrev0
 3252 000a 04       		.byte	0x4
 3253 000b 01       		.uleb128 0x1
 3254 000c 4B000000 		.4byte	.LASF75
 3255 0010 0C       		.byte	0xc
 3256 0011 53030000 		.4byte	.LASF76
 3257 0015 5F030000 		.4byte	.LASF77
 3258 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3259 001d 00000000 		.4byte	0
 3260 0021 00000000 		.4byte	.Ldebug_line0
 3261 0025 02       		.uleb128 0x2
 3262 0026 01       		.byte	0x1
 3263 0027 06       		.byte	0x6
 3264 0028 81020000 		.4byte	.LASF0
 3265 002c 02       		.uleb128 0x2
 3266 002d 01       		.byte	0x1
 3267 002e 08       		.byte	0x8
 3268 002f 50020000 		.4byte	.LASF1
 3269 0033 02       		.uleb128 0x2
 3270 0034 02       		.byte	0x2
 3271 0035 05       		.byte	0x5
 3272 0036 38000000 		.4byte	.LASF2
 3273 003a 02       		.uleb128 0x2
 3274 003b 02       		.byte	0x2
 3275 003c 07       		.byte	0x7
 3276 003d D7020000 		.4byte	.LASF3
 3277 0041 03       		.uleb128 0x3
 3278 0042 DF030000 		.4byte	.LASF9
 3279 0046 02       		.byte	0x2
 3280 0047 3F       		.byte	0x3f
 3281 0048 4C000000 		.4byte	0x4c
 3282 004c 02       		.uleb128 0x2
 3283 004d 04       		.byte	0x4
 3284 004e 05       		.byte	0x5
 3285 004f CF010000 		.4byte	.LASF4
 3286 0053 02       		.uleb128 0x2
 3287 0054 04       		.byte	0x4
 3288 0055 07       		.byte	0x7
 3289 0056 E6010000 		.4byte	.LASF5
 3290 005a 02       		.uleb128 0x2
 3291 005b 08       		.byte	0x8
 3292 005c 05       		.byte	0x5
 3293 005d B2010000 		.4byte	.LASF6
 3294 0061 02       		.uleb128 0x2
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 79


 3295 0062 08       		.byte	0x8
 3296 0063 07       		.byte	0x7
 3297 0064 8D020000 		.4byte	.LASF7
 3298 0068 04       		.uleb128 0x4
 3299 0069 04       		.byte	0x4
 3300 006a 05       		.byte	0x5
 3301 006b 696E7400 		.ascii	"int\000"
 3302 006f 02       		.uleb128 0x2
 3303 0070 04       		.byte	0x4
 3304 0071 07       		.byte	0x7
 3305 0072 A4020000 		.4byte	.LASF8
 3306 0076 03       		.uleb128 0x3
 3307 0077 15030000 		.4byte	.LASF10
 3308 007b 03       		.byte	0x3
 3309 007c 2C       		.byte	0x2c
 3310 007d 41000000 		.4byte	0x41
 3311 0081 05       		.uleb128 0x5
 3312 0082 29010000 		.4byte	.LASF11
 3313 0086 04       		.byte	0x4
 3314 0087 E901     		.2byte	0x1e9
 3315 0089 2C000000 		.4byte	0x2c
 3316 008d 05       		.uleb128 0x5
 3317 008e 03010000 		.4byte	.LASF12
 3318 0092 04       		.byte	0x4
 3319 0093 EA01     		.2byte	0x1ea
 3320 0095 3A000000 		.4byte	0x3a
 3321 0099 05       		.uleb128 0x5
 3322 009a 4C030000 		.4byte	.LASF13
 3323 009e 04       		.byte	0x4
 3324 009f EB01     		.2byte	0x1eb
 3325 00a1 53000000 		.4byte	0x53
 3326 00a5 05       		.uleb128 0x5
 3327 00a6 BC030000 		.4byte	.LASF14
 3328 00aa 04       		.byte	0x4
 3329 00ab EE01     		.2byte	0x1ee
 3330 00ad 4C000000 		.4byte	0x4c
 3331 00b1 02       		.uleb128 0x2
 3332 00b2 04       		.byte	0x4
 3333 00b3 04       		.byte	0x4
 3334 00b4 99010000 		.4byte	.LASF15
 3335 00b8 02       		.uleb128 0x2
 3336 00b9 08       		.byte	0x8
 3337 00ba 04       		.byte	0x4
 3338 00bb C2030000 		.4byte	.LASF16
 3339 00bf 02       		.uleb128 0x2
 3340 00c0 01       		.byte	0x1
 3341 00c1 08       		.byte	0x8
 3342 00c2 0B030000 		.4byte	.LASF17
 3343 00c6 05       		.uleb128 0x5
 3344 00c7 5A030000 		.4byte	.LASF18
 3345 00cb 04       		.byte	0x4
 3346 00cc 9302     		.2byte	0x293
 3347 00ce D2000000 		.4byte	0xd2
 3348 00d2 06       		.uleb128 0x6
 3349 00d3 81000000 		.4byte	0x81
 3350 00d7 05       		.uleb128 0x5
 3351 00d8 32000000 		.4byte	.LASF19
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 80


 3352 00dc 04       		.byte	0x4
 3353 00dd 9402     		.2byte	0x294
 3354 00df E3000000 		.4byte	0xe3
 3355 00e3 06       		.uleb128 0x6
 3356 00e4 8D000000 		.4byte	0x8d
 3357 00e8 02       		.uleb128 0x2
 3358 00e9 08       		.byte	0x8
 3359 00ea 04       		.byte	0x4
 3360 00eb 3C020000 		.4byte	.LASF20
 3361 00ef 02       		.uleb128 0x2
 3362 00f0 04       		.byte	0x4
 3363 00f1 07       		.byte	0x7
 3364 00f2 42000000 		.4byte	.LASF21
 3365 00f6 07       		.uleb128 0x7
 3366 00f7 04       		.byte	0x4
 3367 00f8 BF000000 		.4byte	0xbf
 3368 00fc 08       		.uleb128 0x8
 3369 00fd D2000000 		.4byte	0xd2
 3370 0101 0C010000 		.4byte	0x10c
 3371 0105 09       		.uleb128 0x9
 3372 0106 EF000000 		.4byte	0xef
 3373 010a 03       		.byte	0x3
 3374 010b 00       		.byte	0
 3375 010c 0A       		.uleb128 0xa
 3376 010d 00000000 		.4byte	.LASF78
 3377 0111 08       		.byte	0x8
 3378 0112 05       		.byte	0x5
 3379 0113 59       		.byte	0x59
 3380 0114 31010000 		.4byte	0x131
 3381 0118 0B       		.uleb128 0xb
 3382 0119 54443000 		.ascii	"TD0\000"
 3383 011d 05       		.byte	0x5
 3384 011e 5B       		.byte	0x5b
 3385 011f 31010000 		.4byte	0x131
 3386 0123 00       		.byte	0
 3387 0124 0B       		.uleb128 0xb
 3388 0125 54443100 		.ascii	"TD1\000"
 3389 0129 05       		.byte	0x5
 3390 012a 5C       		.byte	0x5c
 3391 012b 36010000 		.4byte	0x136
 3392 012f 04       		.byte	0x4
 3393 0130 00       		.byte	0
 3394 0131 06       		.uleb128 0x6
 3395 0132 FC000000 		.4byte	0xfc
 3396 0136 06       		.uleb128 0x6
 3397 0137 FC000000 		.4byte	0xfc
 3398 013b 03       		.uleb128 0x3
 3399 013c CC020000 		.4byte	.LASF22
 3400 0140 05       		.byte	0x5
 3401 0141 5E       		.byte	0x5e
 3402 0142 0C010000 		.4byte	0x10c
 3403 0146 0C       		.uleb128 0xc
 3404 0147 10030000 		.4byte	.LASF36
 3405 014b 01       		.byte	0x1
 3406 014c 7A       		.byte	0x7a
 3407 014d 68000000 		.4byte	0x68
 3408 0151 00000000 		.4byte	.LFB64
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 81


 3409 0155 78120000 		.4byte	.LFE64-.LFB64
 3410 0159 01       		.uleb128 0x1
 3411 015a 9C       		.byte	0x9c
 3412 015b 06020000 		.4byte	0x206
 3413 015f 0D       		.uleb128 0xd
 3414 0160 EA020000 		.4byte	.LASF23
 3415 0164 01       		.byte	0x1
 3416 0165 7C       		.byte	0x7c
 3417 0166 81000000 		.4byte	0x81
 3418 016a 02       		.uleb128 0x2
 3419 016b 91       		.byte	0x91
 3420 016c 51       		.sleb128 -47
 3421 016d 0D       		.uleb128 0xd
 3422 016e 9F010000 		.4byte	.LASF24
 3423 0172 01       		.byte	0x1
 3424 0173 7D       		.byte	0x7d
 3425 0174 8D000000 		.4byte	0x8d
 3426 0178 02       		.uleb128 0x2
 3427 0179 91       		.byte	0x91
 3428 017a 4E       		.sleb128 -50
 3429 017b 0E       		.uleb128 0xe
 3430 017c 70737A00 		.ascii	"psz\000"
 3431 0180 01       		.byte	0x1
 3432 0181 7E       		.byte	0x7e
 3433 0182 F6000000 		.4byte	0xf6
 3434 0186 02       		.uleb128 0x2
 3435 0187 91       		.byte	0x91
 3436 0188 60       		.sleb128 -32
 3437 0189 0D       		.uleb128 0xd
 3438 018a 5E020000 		.4byte	.LASF25
 3439 018e 01       		.byte	0x1
 3440 018f 7F       		.byte	0x7f
 3441 0190 8D000000 		.4byte	0x8d
 3442 0194 02       		.uleb128 0x2
 3443 0195 91       		.byte	0x91
 3444 0196 4C       		.sleb128 -52
 3445 0197 0D       		.uleb128 0xd
 3446 0198 7C040000 		.4byte	.LASF26
 3447 019c 01       		.byte	0x1
 3448 019d 7F       		.byte	0x7f
 3449 019e 8D000000 		.4byte	0x8d
 3450 01a2 02       		.uleb128 0x2
 3451 01a3 91       		.byte	0x91
 3452 01a4 6E       		.sleb128 -18
 3453 01a5 0E       		.uleb128 0xe
 3454 01a6 6900     		.ascii	"i\000"
 3455 01a8 01       		.byte	0x1
 3456 01a9 7F       		.byte	0x7f
 3457 01aa 8D000000 		.4byte	0x8d
 3458 01ae 02       		.uleb128 0x2
 3459 01af 91       		.byte	0x91
 3460 01b0 6C       		.sleb128 -20
 3461 01b1 0D       		.uleb128 0xd
 3462 01b2 F8010000 		.4byte	.LASF27
 3463 01b6 01       		.byte	0x1
 3464 01b7 7F       		.byte	0x7f
 3465 01b8 8D000000 		.4byte	0x8d
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 82


 3466 01bc 02       		.uleb128 0x2
 3467 01bd 91       		.byte	0x91
 3468 01be 52       		.sleb128 -46
 3469 01bf 0D       		.uleb128 0xd
 3470 01c0 F9000000 		.4byte	.LASF28
 3471 01c4 01       		.byte	0x1
 3472 01c5 80       		.byte	0x80
 3473 01c6 99000000 		.4byte	0x99
 3474 01ca 02       		.uleb128 0x2
 3475 01cb 91       		.byte	0x91
 3476 01cc 68       		.sleb128 -24
 3477 01cd 0D       		.uleb128 0xd
 3478 01ce 0A010000 		.4byte	.LASF29
 3479 01d2 01       		.byte	0x1
 3480 01d3 81       		.byte	0x81
 3481 01d4 99000000 		.4byte	0x99
 3482 01d8 02       		.uleb128 0x2
 3483 01d9 91       		.byte	0x91
 3484 01da 5C       		.sleb128 -36
 3485 01db 0D       		.uleb128 0xd
 3486 01dc 79010000 		.4byte	.LASF30
 3487 01e0 01       		.byte	0x1
 3488 01e1 82       		.byte	0x82
 3489 01e2 99000000 		.4byte	0x99
 3490 01e6 02       		.uleb128 0x2
 3491 01e7 91       		.byte	0x91
 3492 01e8 58       		.sleb128 -40
 3493 01e9 0D       		.uleb128 0xd
 3494 01ea AD010000 		.4byte	.LASF31
 3495 01ee 01       		.byte	0x1
 3496 01ef 83       		.byte	0x83
 3497 01f0 B1000000 		.4byte	0xb1
 3498 01f4 02       		.uleb128 0x2
 3499 01f5 91       		.byte	0x91
 3500 01f6 54       		.sleb128 -44
 3501 01f7 0D       		.uleb128 0xd
 3502 01f8 6F010000 		.4byte	.LASF32
 3503 01fc 01       		.byte	0x1
 3504 01fd 84       		.byte	0x84
 3505 01fe B1000000 		.4byte	0xb1
 3506 0202 02       		.uleb128 0x2
 3507 0203 91       		.byte	0x91
 3508 0204 64       		.sleb128 -28
 3509 0205 00       		.byte	0
 3510 0206 0F       		.uleb128 0xf
 3511 0207 42010000 		.4byte	.LASF33
 3512 020b 01       		.byte	0x1
 3513 020c 8F03     		.2byte	0x38f
 3514 020e 00000000 		.4byte	.LFB65
 3515 0212 58010000 		.4byte	.LFE65-.LFB65
 3516 0216 01       		.uleb128 0x1
 3517 0217 9C       		.byte	0x9c
 3518 0218 0F       		.uleb128 0xf
 3519 0219 7F010000 		.4byte	.LASF34
 3520 021d 01       		.byte	0x1
 3521 021e E003     		.2byte	0x3e0
 3522 0220 00000000 		.4byte	.LFB66
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 83


 3523 0224 30010000 		.4byte	.LFE66-.LFB66
 3524 0228 01       		.uleb128 0x1
 3525 0229 9C       		.byte	0x9c
 3526 022a 10       		.uleb128 0x10
 3527 022b 2F010000 		.4byte	.LASF79
 3528 022f 01       		.byte	0x1
 3529 0230 FD03     		.2byte	0x3fd
 3530 0232 8D000000 		.4byte	0x8d
 3531 0236 00000000 		.4byte	.LFB67
 3532 023a 60000000 		.4byte	.LFE67-.LFB67
 3533 023e 01       		.uleb128 0x1
 3534 023f 9C       		.byte	0x9c
 3535 0240 63020000 		.4byte	0x263
 3536 0244 11       		.uleb128 0x11
 3537 0245 D6030000 		.4byte	.LASF40
 3538 0249 01       		.byte	0x1
 3539 024a FD03     		.2byte	0x3fd
 3540 024c 81000000 		.4byte	0x81
 3541 0250 02       		.uleb128 0x2
 3542 0251 91       		.byte	0x91
 3543 0252 6F       		.sleb128 -17
 3544 0253 12       		.uleb128 0x12
 3545 0254 12010000 		.4byte	.LASF35
 3546 0258 01       		.byte	0x1
 3547 0259 FF03     		.2byte	0x3ff
 3548 025b 8D000000 		.4byte	0x8d
 3549 025f 02       		.uleb128 0x2
 3550 0260 91       		.byte	0x91
 3551 0261 76       		.sleb128 -10
 3552 0262 00       		.byte	0
 3553 0263 13       		.uleb128 0x13
 3554 0264 63020000 		.4byte	.LASF37
 3555 0268 01       		.byte	0x1
 3556 0269 0F04     		.2byte	0x40f
 3557 026b 00000000 		.4byte	.LFB68
 3558 026f 80010000 		.4byte	.LFE68-.LFB68
 3559 0273 01       		.uleb128 0x1
 3560 0274 9C       		.byte	0x9c
 3561 0275 96020000 		.4byte	0x296
 3562 0279 14       		.uleb128 0x14
 3563 027a 6900     		.ascii	"i\000"
 3564 027c 01       		.byte	0x1
 3565 027d 1104     		.2byte	0x411
 3566 027f 8D000000 		.4byte	0x8d
 3567 0283 02       		.uleb128 0x2
 3568 0284 91       		.byte	0x91
 3569 0285 76       		.sleb128 -10
 3570 0286 12       		.uleb128 0x12
 3571 0287 20040000 		.4byte	.LASF38
 3572 028b 01       		.byte	0x1
 3573 028c 1104     		.2byte	0x411
 3574 028e 8D000000 		.4byte	0x8d
 3575 0292 02       		.uleb128 0x2
 3576 0293 91       		.byte	0x91
 3577 0294 74       		.sleb128 -12
 3578 0295 00       		.byte	0
 3579 0296 13       		.uleb128 0x13
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 84


 3580 0297 16040000 		.4byte	.LASF39
 3581 029b 01       		.byte	0x1
 3582 029c 5B04     		.2byte	0x45b
 3583 029e 00000000 		.4byte	.LFB69
 3584 02a2 22000000 		.4byte	.LFE69-.LFB69
 3585 02a6 01       		.uleb128 0x1
 3586 02a7 9C       		.byte	0x9c
 3587 02a8 BC020000 		.4byte	0x2bc
 3588 02ac 11       		.uleb128 0x11
 3589 02ad DF010000 		.4byte	.LASF41
 3590 02b1 01       		.byte	0x1
 3591 02b2 5B04     		.2byte	0x45b
 3592 02b4 F6000000 		.4byte	0xf6
 3593 02b8 02       		.uleb128 0x2
 3594 02b9 91       		.byte	0x91
 3595 02ba 74       		.sleb128 -12
 3596 02bb 00       		.byte	0
 3597 02bc 13       		.uleb128 0x13
 3598 02bd 48020000 		.4byte	.LASF42
 3599 02c1 01       		.byte	0x1
 3600 02c2 6104     		.2byte	0x461
 3601 02c4 00000000 		.4byte	.LFB70
 3602 02c8 26000000 		.4byte	.LFE70-.LFB70
 3603 02cc 01       		.uleb128 0x1
 3604 02cd 9C       		.byte	0x9c
 3605 02ce E2020000 		.4byte	0x2e2
 3606 02d2 11       		.uleb128 0x11
 3607 02d3 FD010000 		.4byte	.LASF43
 3608 02d7 01       		.byte	0x1
 3609 02d8 6104     		.2byte	0x461
 3610 02da BF000000 		.4byte	0xbf
 3611 02de 02       		.uleb128 0x2
 3612 02df 91       		.byte	0x91
 3613 02e0 77       		.sleb128 -9
 3614 02e1 00       		.byte	0
 3615 02e2 15       		.uleb128 0x15
 3616 02e3 2E040000 		.4byte	.LASF44
 3617 02e7 06       		.byte	0x6
 3618 02e8 1207     		.2byte	0x712
 3619 02ea EE020000 		.4byte	0x2ee
 3620 02ee 06       		.uleb128 0x6
 3621 02ef 76000000 		.4byte	0x76
 3622 02f3 16       		.uleb128 0x16
 3623 02f4 29020000 		.4byte	.LASF45
 3624 02f8 01       		.byte	0x1
 3625 02f9 40       		.byte	0x40
 3626 02fa 81000000 		.4byte	0x81
 3627 02fe 05       		.uleb128 0x5
 3628 02ff 03       		.byte	0x3
 3629 0300 00000000 		.4byte	DMA_Channel_1_Chan
 3630 0304 08       		.uleb128 0x8
 3631 0305 81000000 		.4byte	0x81
 3632 0309 14030000 		.4byte	0x314
 3633 030d 09       		.uleb128 0x9
 3634 030e EF000000 		.4byte	0xef
 3635 0312 00       		.byte	0
 3636 0313 00       		.byte	0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 85


 3637 0314 16       		.uleb128 0x16
 3638 0315 6B040000 		.4byte	.LASF46
 3639 0319 01       		.byte	0x1
 3640 031a 41       		.byte	0x41
 3641 031b 04030000 		.4byte	0x304
 3642 031f 05       		.uleb128 0x5
 3643 0320 03       		.byte	0x3
 3644 0321 00000000 		.4byte	DMA_Channel_1_TD
 3645 0325 16       		.uleb128 0x16
 3646 0326 E6000000 		.4byte	.LASF47
 3647 032a 01       		.byte	0x1
 3648 032b 45       		.byte	0x45
 3649 032c 81000000 		.4byte	0x81
 3650 0330 05       		.uleb128 0x5
 3651 0331 03       		.byte	0x3
 3652 0332 00000000 		.4byte	DMA_Channel_2_Chan
 3653 0336 16       		.uleb128 0x16
 3654 0337 12000000 		.4byte	.LASF48
 3655 033b 01       		.byte	0x1
 3656 033c 46       		.byte	0x46
 3657 033d 04030000 		.4byte	0x304
 3658 0341 05       		.uleb128 0x5
 3659 0342 03       		.byte	0x3
 3660 0343 00000000 		.4byte	DMA_Channel_2_TD
 3661 0347 08       		.uleb128 0x8
 3662 0348 8D000000 		.4byte	0x8d
 3663 034c 58030000 		.4byte	0x358
 3664 0350 17       		.uleb128 0x17
 3665 0351 EF000000 		.4byte	0xef
 3666 0355 FF03     		.2byte	0x3ff
 3667 0357 00       		.byte	0
 3668 0358 16       		.uleb128 0x16
 3669 0359 B1020000 		.4byte	.LASF49
 3670 035d 01       		.byte	0x1
 3671 035e 49       		.byte	0x49
 3672 035f 47030000 		.4byte	0x347
 3673 0363 05       		.uleb128 0x5
 3674 0364 03       		.byte	0x3
 3675 0365 00000000 		.4byte	Channel_1_Data
 3676 0369 16       		.uleb128 0x16
 3677 036a 5C040000 		.4byte	.LASF50
 3678 036e 01       		.byte	0x1
 3679 036f 4A       		.byte	0x4a
 3680 0370 47030000 		.4byte	0x347
 3681 0374 05       		.uleb128 0x5
 3682 0375 03       		.byte	0x3
 3683 0376 00000000 		.4byte	Channel_2_Data
 3684 037a 08       		.uleb128 0x8
 3685 037b BF000000 		.4byte	0xbf
 3686 037f 8A030000 		.4byte	0x38a
 3687 0383 09       		.uleb128 0x9
 3688 0384 EF000000 		.4byte	0xef
 3689 0388 3F       		.byte	0x3f
 3690 0389 00       		.byte	0
 3691 038a 16       		.uleb128 0x16
 3692 038b D9000000 		.4byte	.LASF51
 3693 038f 01       		.byte	0x1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 86


 3694 0390 4E       		.byte	0x4e
 3695 0391 7A030000 		.4byte	0x37a
 3696 0395 05       		.uleb128 0x5
 3697 0396 03       		.byte	0x3
 3698 0397 00000000 		.4byte	szTempBuffer
 3699 039b 16       		.uleb128 0x16
 3700 039c 8A010000 		.4byte	.LASF52
 3701 03a0 01       		.byte	0x1
 3702 03a1 4F       		.byte	0x4f
 3703 03a2 81000000 		.4byte	0x81
 3704 03a6 05       		.uleb128 0x5
 3705 03a7 03       		.byte	0x3
 3706 03a8 00000000 		.4byte	cCharsReceived
 3707 03ac 08       		.uleb128 0x8
 3708 03ad BF000000 		.4byte	0xbf
 3709 03b1 BD030000 		.4byte	0x3bd
 3710 03b5 17       		.uleb128 0x17
 3711 03b6 EF000000 		.4byte	0xef
 3712 03ba FF0F     		.2byte	0xfff
 3713 03bc 00       		.byte	0
 3714 03bd 16       		.uleb128 0x16
 3715 03be 70020000 		.4byte	.LASF53
 3716 03c2 01       		.byte	0x1
 3717 03c3 52       		.byte	0x52
 3718 03c4 AC030000 		.4byte	0x3ac
 3719 03c8 05       		.uleb128 0x5
 3720 03c9 03       		.byte	0x3
 3721 03ca 00000000 		.4byte	szCommandsBuffer
 3722 03ce 16       		.uleb128 0x16
 3723 03cf 33030000 		.4byte	.LASF54
 3724 03d3 01       		.byte	0x1
 3725 03d4 53       		.byte	0x53
 3726 03d5 8D000000 		.4byte	0x8d
 3727 03d9 05       		.uleb128 0x5
 3728 03da 03       		.byte	0x3
 3729 03db 00000000 		.4byte	iRead
 3730 03df 16       		.uleb128 0x16
 3731 03e0 D8010000 		.4byte	.LASF55
 3732 03e4 01       		.byte	0x1
 3733 03e5 53       		.byte	0x53
 3734 03e6 8D000000 		.4byte	0x8d
 3735 03ea 05       		.uleb128 0x5
 3736 03eb 03       		.byte	0x3
 3737 03ec 00000000 		.4byte	iWrite
 3738 03f0 16       		.uleb128 0x16
 3739 03f1 52010000 		.4byte	.LASF56
 3740 03f5 01       		.byte	0x1
 3741 03f6 54       		.byte	0x54
 3742 03f7 8D000000 		.4byte	0x8d
 3743 03fb 05       		.uleb128 0x5
 3744 03fc 03       		.byte	0x3
 3745 03fd 00000000 		.4byte	cCommandsReady
 3746 0401 16       		.uleb128 0x16
 3747 0402 E9030000 		.4byte	.LASF57
 3748 0406 01       		.byte	0x1
 3749 0407 56       		.byte	0x56
 3750 0408 7A030000 		.4byte	0x37a
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 87


 3751 040c 05       		.uleb128 0x5
 3752 040d 03       		.byte	0x3
 3753 040e 00000000 		.4byte	szCommand
 3754 0412 16       		.uleb128 0x16
 3755 0413 61010000 		.4byte	.LASF58
 3756 0417 01       		.byte	0x1
 3757 0418 57       		.byte	0x57
 3758 0419 81000000 		.4byte	0x81
 3759 041d 05       		.uleb128 0x5
 3760 041e 03       		.byte	0x3
 3761 041f 00000000 		.4byte	bCommandReady
 3762 0423 16       		.uleb128 0x16
 3763 0424 F3030000 		.4byte	.LASF59
 3764 0428 01       		.byte	0x1
 3765 0429 5A       		.byte	0x5a
 3766 042a 81000000 		.4byte	0x81
 3767 042e 05       		.uleb128 0x5
 3768 042f 03       		.byte	0x3
 3769 0430 00000000 		.4byte	preamp_a
 3770 0434 16       		.uleb128 0x16
 3771 0435 FC030000 		.4byte	.LASF60
 3772 0439 01       		.byte	0x1
 3773 043a 5A       		.byte	0x5a
 3774 043b 81000000 		.4byte	0x81
 3775 043f 05       		.uleb128 0x5
 3776 0440 03       		.byte	0x3
 3777 0441 00000000 		.4byte	preamp_b
 3778 0445 16       		.uleb128 0x16
 3779 0446 23000000 		.4byte	.LASF61
 3780 044a 01       		.byte	0x1
 3781 044b 5A       		.byte	0x5a
 3782 044c 81000000 		.4byte	0x81
 3783 0450 05       		.uleb128 0x5
 3784 0451 03       		.byte	0x3
 3785 0452 00000000 		.4byte	trigger_source
 3786 0456 16       		.uleb128 0x16
 3787 0457 C0020000 		.4byte	.LASF62
 3788 045b 01       		.byte	0x1
 3789 045c 5A       		.byte	0x5a
 3790 045d 81000000 		.4byte	0x81
 3791 0461 05       		.uleb128 0x5
 3792 0462 03       		.byte	0x3
 3793 0463 00000000 		.4byte	preamp_trig
 3794 0467 08       		.uleb128 0x8
 3795 0468 81000000 		.4byte	0x81
 3796 046c 77040000 		.4byte	0x477
 3797 0470 09       		.uleb128 0x9
 3798 0471 EF000000 		.4byte	0xef
 3799 0475 3F       		.byte	0x3f
 3800 0476 00       		.byte	0
 3801 0477 16       		.uleb128 0x16
 3802 0478 02020000 		.4byte	.LASF63
 3803 047c 01       		.byte	0x1
 3804 047d 5F       		.byte	0x5f
 3805 047e 67040000 		.4byte	0x467
 3806 0482 05       		.uleb128 0x5
 3807 0483 03       		.byte	0x3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 88


 3808 0484 00000000 		.4byte	USB_Out_Buffer
 3809 0488 08       		.uleb128 0x8
 3810 0489 81000000 		.4byte	0x81
 3811 048d 99040000 		.4byte	0x499
 3812 0491 17       		.uleb128 0x17
 3813 0492 EF000000 		.4byte	0xef
 3814 0496 FF07     		.2byte	0x7ff
 3815 0498 00       		.byte	0
 3816 0499 16       		.uleb128 0x16
 3817 049a 05040000 		.4byte	.LASF64
 3818 049e 01       		.byte	0x1
 3819 049f 63       		.byte	0x63
 3820 04a0 88040000 		.4byte	0x488
 3821 04a4 05       		.uleb128 0x5
 3822 04a5 03       		.byte	0x3
 3823 04a6 00000000 		.4byte	WaveformA_Buffer
 3824 04aa 16       		.uleb128 0x16
 3825 04ab 3B040000 		.4byte	.LASF65
 3826 04af 01       		.byte	0x1
 3827 04b0 64       		.byte	0x64
 3828 04b1 88040000 		.4byte	0x488
 3829 04b5 05       		.uleb128 0x5
 3830 04b6 03       		.byte	0x3
 3831 04b7 00000000 		.4byte	WaveformA_Temp_Buffer
 3832 04bb 16       		.uleb128 0x16
 3833 04bc 51040000 		.4byte	.LASF66
 3834 04c0 01       		.byte	0x1
 3835 04c1 65       		.byte	0x65
 3836 04c2 81000000 		.4byte	0x81
 3837 04c6 05       		.uleb128 0x5
 3838 04c7 03       		.byte	0x3
 3839 04c8 00000000 		.4byte	wavea_gain
 3840 04cc 16       		.uleb128 0x16
 3841 04cd 11020000 		.4byte	.LASF67
 3842 04d1 01       		.byte	0x1
 3843 04d2 66       		.byte	0x66
 3844 04d3 81000000 		.4byte	0x81
 3845 04d7 05       		.uleb128 0x5
 3846 04d8 03       		.byte	0x3
 3847 04d9 00000000 		.4byte	wavea_offset
 3848 04dd 16       		.uleb128 0x16
 3849 04de 18010000 		.4byte	.LASF68
 3850 04e2 01       		.byte	0x1
 3851 04e3 67       		.byte	0x67
 3852 04e4 88040000 		.4byte	0x488
 3853 04e8 05       		.uleb128 0x5
 3854 04e9 03       		.byte	0x3
 3855 04ea 00000000 		.4byte	WaveformB_Buffer
 3856 04ee 16       		.uleb128 0x16
 3857 04ef 1D030000 		.4byte	.LASF69
 3858 04f3 01       		.byte	0x1
 3859 04f4 68       		.byte	0x68
 3860 04f5 88040000 		.4byte	0x488
 3861 04f9 05       		.uleb128 0x5
 3862 04fa 03       		.byte	0x3
 3863 04fb 00000000 		.4byte	WaveformB_Temp_Buffer
 3864 04ff 16       		.uleb128 0x16
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 89


 3865 0500 1E020000 		.4byte	.LASF70
 3866 0504 01       		.byte	0x1
 3867 0505 69       		.byte	0x69
 3868 0506 81000000 		.4byte	0x81
 3869 050a 05       		.uleb128 0x5
 3870 050b 03       		.byte	0x3
 3871 050c 00000000 		.4byte	waveb_gain
 3872 0510 16       		.uleb128 0x16
 3873 0511 C9030000 		.4byte	.LASF71
 3874 0515 01       		.byte	0x1
 3875 0516 6A       		.byte	0x6a
 3876 0517 81000000 		.4byte	0x81
 3877 051b 05       		.uleb128 0x5
 3878 051c 03       		.byte	0x3
 3879 051d 00000000 		.4byte	waveb_offset
 3880 0521 16       		.uleb128 0x16
 3881 0522 C0010000 		.4byte	.LASF72
 3882 0526 01       		.byte	0x1
 3883 0527 6E       		.byte	0x6e
 3884 0528 81000000 		.4byte	0x81
 3885 052c 05       		.uleb128 0x5
 3886 052d 03       		.byte	0x3
 3887 052e 00000000 		.4byte	Noise_Adjusted
 3888 0532 16       		.uleb128 0x16
 3889 0533 F1020000 		.4byte	.LASF73
 3890 0537 01       		.byte	0x1
 3891 0538 71       		.byte	0x71
 3892 0539 81000000 		.4byte	0x81
 3893 053d 05       		.uleb128 0x5
 3894 053e 03       		.byte	0x3
 3895 053f 00000000 		.4byte	Digital_Input_Status_Last
 3896 0543 16       		.uleb128 0x16
 3897 0544 39030000 		.4byte	.LASF74
 3898 0548 01       		.byte	0x1
 3899 0549 72       		.byte	0x72
 3900 054a 81000000 		.4byte	0x81
 3901 054e 05       		.uleb128 0x5
 3902 054f 03       		.byte	0x3
 3903 0550 00000000 		.4byte	Digital_AutoUpdate
 3904 0554 00       		.byte	0
 3905              		.section	.debug_abbrev,"",%progbits
 3906              	.Ldebug_abbrev0:
 3907 0000 01       		.uleb128 0x1
 3908 0001 11       		.uleb128 0x11
 3909 0002 01       		.byte	0x1
 3910 0003 25       		.uleb128 0x25
 3911 0004 0E       		.uleb128 0xe
 3912 0005 13       		.uleb128 0x13
 3913 0006 0B       		.uleb128 0xb
 3914 0007 03       		.uleb128 0x3
 3915 0008 0E       		.uleb128 0xe
 3916 0009 1B       		.uleb128 0x1b
 3917 000a 0E       		.uleb128 0xe
 3918 000b 55       		.uleb128 0x55
 3919 000c 17       		.uleb128 0x17
 3920 000d 11       		.uleb128 0x11
 3921 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 90


 3922 000f 10       		.uleb128 0x10
 3923 0010 17       		.uleb128 0x17
 3924 0011 00       		.byte	0
 3925 0012 00       		.byte	0
 3926 0013 02       		.uleb128 0x2
 3927 0014 24       		.uleb128 0x24
 3928 0015 00       		.byte	0
 3929 0016 0B       		.uleb128 0xb
 3930 0017 0B       		.uleb128 0xb
 3931 0018 3E       		.uleb128 0x3e
 3932 0019 0B       		.uleb128 0xb
 3933 001a 03       		.uleb128 0x3
 3934 001b 0E       		.uleb128 0xe
 3935 001c 00       		.byte	0
 3936 001d 00       		.byte	0
 3937 001e 03       		.uleb128 0x3
 3938 001f 16       		.uleb128 0x16
 3939 0020 00       		.byte	0
 3940 0021 03       		.uleb128 0x3
 3941 0022 0E       		.uleb128 0xe
 3942 0023 3A       		.uleb128 0x3a
 3943 0024 0B       		.uleb128 0xb
 3944 0025 3B       		.uleb128 0x3b
 3945 0026 0B       		.uleb128 0xb
 3946 0027 49       		.uleb128 0x49
 3947 0028 13       		.uleb128 0x13
 3948 0029 00       		.byte	0
 3949 002a 00       		.byte	0
 3950 002b 04       		.uleb128 0x4
 3951 002c 24       		.uleb128 0x24
 3952 002d 00       		.byte	0
 3953 002e 0B       		.uleb128 0xb
 3954 002f 0B       		.uleb128 0xb
 3955 0030 3E       		.uleb128 0x3e
 3956 0031 0B       		.uleb128 0xb
 3957 0032 03       		.uleb128 0x3
 3958 0033 08       		.uleb128 0x8
 3959 0034 00       		.byte	0
 3960 0035 00       		.byte	0
 3961 0036 05       		.uleb128 0x5
 3962 0037 16       		.uleb128 0x16
 3963 0038 00       		.byte	0
 3964 0039 03       		.uleb128 0x3
 3965 003a 0E       		.uleb128 0xe
 3966 003b 3A       		.uleb128 0x3a
 3967 003c 0B       		.uleb128 0xb
 3968 003d 3B       		.uleb128 0x3b
 3969 003e 05       		.uleb128 0x5
 3970 003f 49       		.uleb128 0x49
 3971 0040 13       		.uleb128 0x13
 3972 0041 00       		.byte	0
 3973 0042 00       		.byte	0
 3974 0043 06       		.uleb128 0x6
 3975 0044 35       		.uleb128 0x35
 3976 0045 00       		.byte	0
 3977 0046 49       		.uleb128 0x49
 3978 0047 13       		.uleb128 0x13
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 91


 3979 0048 00       		.byte	0
 3980 0049 00       		.byte	0
 3981 004a 07       		.uleb128 0x7
 3982 004b 0F       		.uleb128 0xf
 3983 004c 00       		.byte	0
 3984 004d 0B       		.uleb128 0xb
 3985 004e 0B       		.uleb128 0xb
 3986 004f 49       		.uleb128 0x49
 3987 0050 13       		.uleb128 0x13
 3988 0051 00       		.byte	0
 3989 0052 00       		.byte	0
 3990 0053 08       		.uleb128 0x8
 3991 0054 01       		.uleb128 0x1
 3992 0055 01       		.byte	0x1
 3993 0056 49       		.uleb128 0x49
 3994 0057 13       		.uleb128 0x13
 3995 0058 01       		.uleb128 0x1
 3996 0059 13       		.uleb128 0x13
 3997 005a 00       		.byte	0
 3998 005b 00       		.byte	0
 3999 005c 09       		.uleb128 0x9
 4000 005d 21       		.uleb128 0x21
 4001 005e 00       		.byte	0
 4002 005f 49       		.uleb128 0x49
 4003 0060 13       		.uleb128 0x13
 4004 0061 2F       		.uleb128 0x2f
 4005 0062 0B       		.uleb128 0xb
 4006 0063 00       		.byte	0
 4007 0064 00       		.byte	0
 4008 0065 0A       		.uleb128 0xa
 4009 0066 13       		.uleb128 0x13
 4010 0067 01       		.byte	0x1
 4011 0068 03       		.uleb128 0x3
 4012 0069 0E       		.uleb128 0xe
 4013 006a 0B       		.uleb128 0xb
 4014 006b 0B       		.uleb128 0xb
 4015 006c 3A       		.uleb128 0x3a
 4016 006d 0B       		.uleb128 0xb
 4017 006e 3B       		.uleb128 0x3b
 4018 006f 0B       		.uleb128 0xb
 4019 0070 01       		.uleb128 0x1
 4020 0071 13       		.uleb128 0x13
 4021 0072 00       		.byte	0
 4022 0073 00       		.byte	0
 4023 0074 0B       		.uleb128 0xb
 4024 0075 0D       		.uleb128 0xd
 4025 0076 00       		.byte	0
 4026 0077 03       		.uleb128 0x3
 4027 0078 08       		.uleb128 0x8
 4028 0079 3A       		.uleb128 0x3a
 4029 007a 0B       		.uleb128 0xb
 4030 007b 3B       		.uleb128 0x3b
 4031 007c 0B       		.uleb128 0xb
 4032 007d 49       		.uleb128 0x49
 4033 007e 13       		.uleb128 0x13
 4034 007f 38       		.uleb128 0x38
 4035 0080 0B       		.uleb128 0xb
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 92


 4036 0081 00       		.byte	0
 4037 0082 00       		.byte	0
 4038 0083 0C       		.uleb128 0xc
 4039 0084 2E       		.uleb128 0x2e
 4040 0085 01       		.byte	0x1
 4041 0086 3F       		.uleb128 0x3f
 4042 0087 19       		.uleb128 0x19
 4043 0088 03       		.uleb128 0x3
 4044 0089 0E       		.uleb128 0xe
 4045 008a 3A       		.uleb128 0x3a
 4046 008b 0B       		.uleb128 0xb
 4047 008c 3B       		.uleb128 0x3b
 4048 008d 0B       		.uleb128 0xb
 4049 008e 49       		.uleb128 0x49
 4050 008f 13       		.uleb128 0x13
 4051 0090 11       		.uleb128 0x11
 4052 0091 01       		.uleb128 0x1
 4053 0092 12       		.uleb128 0x12
 4054 0093 06       		.uleb128 0x6
 4055 0094 40       		.uleb128 0x40
 4056 0095 18       		.uleb128 0x18
 4057 0096 9642     		.uleb128 0x2116
 4058 0098 19       		.uleb128 0x19
 4059 0099 01       		.uleb128 0x1
 4060 009a 13       		.uleb128 0x13
 4061 009b 00       		.byte	0
 4062 009c 00       		.byte	0
 4063 009d 0D       		.uleb128 0xd
 4064 009e 34       		.uleb128 0x34
 4065 009f 00       		.byte	0
 4066 00a0 03       		.uleb128 0x3
 4067 00a1 0E       		.uleb128 0xe
 4068 00a2 3A       		.uleb128 0x3a
 4069 00a3 0B       		.uleb128 0xb
 4070 00a4 3B       		.uleb128 0x3b
 4071 00a5 0B       		.uleb128 0xb
 4072 00a6 49       		.uleb128 0x49
 4073 00a7 13       		.uleb128 0x13
 4074 00a8 02       		.uleb128 0x2
 4075 00a9 18       		.uleb128 0x18
 4076 00aa 00       		.byte	0
 4077 00ab 00       		.byte	0
 4078 00ac 0E       		.uleb128 0xe
 4079 00ad 34       		.uleb128 0x34
 4080 00ae 00       		.byte	0
 4081 00af 03       		.uleb128 0x3
 4082 00b0 08       		.uleb128 0x8
 4083 00b1 3A       		.uleb128 0x3a
 4084 00b2 0B       		.uleb128 0xb
 4085 00b3 3B       		.uleb128 0x3b
 4086 00b4 0B       		.uleb128 0xb
 4087 00b5 49       		.uleb128 0x49
 4088 00b6 13       		.uleb128 0x13
 4089 00b7 02       		.uleb128 0x2
 4090 00b8 18       		.uleb128 0x18
 4091 00b9 00       		.byte	0
 4092 00ba 00       		.byte	0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 93


 4093 00bb 0F       		.uleb128 0xf
 4094 00bc 2E       		.uleb128 0x2e
 4095 00bd 00       		.byte	0
 4096 00be 3F       		.uleb128 0x3f
 4097 00bf 19       		.uleb128 0x19
 4098 00c0 03       		.uleb128 0x3
 4099 00c1 0E       		.uleb128 0xe
 4100 00c2 3A       		.uleb128 0x3a
 4101 00c3 0B       		.uleb128 0xb
 4102 00c4 3B       		.uleb128 0x3b
 4103 00c5 05       		.uleb128 0x5
 4104 00c6 27       		.uleb128 0x27
 4105 00c7 19       		.uleb128 0x19
 4106 00c8 11       		.uleb128 0x11
 4107 00c9 01       		.uleb128 0x1
 4108 00ca 12       		.uleb128 0x12
 4109 00cb 06       		.uleb128 0x6
 4110 00cc 40       		.uleb128 0x40
 4111 00cd 18       		.uleb128 0x18
 4112 00ce 9642     		.uleb128 0x2116
 4113 00d0 19       		.uleb128 0x19
 4114 00d1 00       		.byte	0
 4115 00d2 00       		.byte	0
 4116 00d3 10       		.uleb128 0x10
 4117 00d4 2E       		.uleb128 0x2e
 4118 00d5 01       		.byte	0x1
 4119 00d6 3F       		.uleb128 0x3f
 4120 00d7 19       		.uleb128 0x19
 4121 00d8 03       		.uleb128 0x3
 4122 00d9 0E       		.uleb128 0xe
 4123 00da 3A       		.uleb128 0x3a
 4124 00db 0B       		.uleb128 0xb
 4125 00dc 3B       		.uleb128 0x3b
 4126 00dd 05       		.uleb128 0x5
 4127 00de 27       		.uleb128 0x27
 4128 00df 19       		.uleb128 0x19
 4129 00e0 49       		.uleb128 0x49
 4130 00e1 13       		.uleb128 0x13
 4131 00e2 11       		.uleb128 0x11
 4132 00e3 01       		.uleb128 0x1
 4133 00e4 12       		.uleb128 0x12
 4134 00e5 06       		.uleb128 0x6
 4135 00e6 40       		.uleb128 0x40
 4136 00e7 18       		.uleb128 0x18
 4137 00e8 9742     		.uleb128 0x2117
 4138 00ea 19       		.uleb128 0x19
 4139 00eb 01       		.uleb128 0x1
 4140 00ec 13       		.uleb128 0x13
 4141 00ed 00       		.byte	0
 4142 00ee 00       		.byte	0
 4143 00ef 11       		.uleb128 0x11
 4144 00f0 05       		.uleb128 0x5
 4145 00f1 00       		.byte	0
 4146 00f2 03       		.uleb128 0x3
 4147 00f3 0E       		.uleb128 0xe
 4148 00f4 3A       		.uleb128 0x3a
 4149 00f5 0B       		.uleb128 0xb
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 94


 4150 00f6 3B       		.uleb128 0x3b
 4151 00f7 05       		.uleb128 0x5
 4152 00f8 49       		.uleb128 0x49
 4153 00f9 13       		.uleb128 0x13
 4154 00fa 02       		.uleb128 0x2
 4155 00fb 18       		.uleb128 0x18
 4156 00fc 00       		.byte	0
 4157 00fd 00       		.byte	0
 4158 00fe 12       		.uleb128 0x12
 4159 00ff 34       		.uleb128 0x34
 4160 0100 00       		.byte	0
 4161 0101 03       		.uleb128 0x3
 4162 0102 0E       		.uleb128 0xe
 4163 0103 3A       		.uleb128 0x3a
 4164 0104 0B       		.uleb128 0xb
 4165 0105 3B       		.uleb128 0x3b
 4166 0106 05       		.uleb128 0x5
 4167 0107 49       		.uleb128 0x49
 4168 0108 13       		.uleb128 0x13
 4169 0109 02       		.uleb128 0x2
 4170 010a 18       		.uleb128 0x18
 4171 010b 00       		.byte	0
 4172 010c 00       		.byte	0
 4173 010d 13       		.uleb128 0x13
 4174 010e 2E       		.uleb128 0x2e
 4175 010f 01       		.byte	0x1
 4176 0110 3F       		.uleb128 0x3f
 4177 0111 19       		.uleb128 0x19
 4178 0112 03       		.uleb128 0x3
 4179 0113 0E       		.uleb128 0xe
 4180 0114 3A       		.uleb128 0x3a
 4181 0115 0B       		.uleb128 0xb
 4182 0116 3B       		.uleb128 0x3b
 4183 0117 05       		.uleb128 0x5
 4184 0118 27       		.uleb128 0x27
 4185 0119 19       		.uleb128 0x19
 4186 011a 11       		.uleb128 0x11
 4187 011b 01       		.uleb128 0x1
 4188 011c 12       		.uleb128 0x12
 4189 011d 06       		.uleb128 0x6
 4190 011e 40       		.uleb128 0x40
 4191 011f 18       		.uleb128 0x18
 4192 0120 9642     		.uleb128 0x2116
 4193 0122 19       		.uleb128 0x19
 4194 0123 01       		.uleb128 0x1
 4195 0124 13       		.uleb128 0x13
 4196 0125 00       		.byte	0
 4197 0126 00       		.byte	0
 4198 0127 14       		.uleb128 0x14
 4199 0128 34       		.uleb128 0x34
 4200 0129 00       		.byte	0
 4201 012a 03       		.uleb128 0x3
 4202 012b 08       		.uleb128 0x8
 4203 012c 3A       		.uleb128 0x3a
 4204 012d 0B       		.uleb128 0xb
 4205 012e 3B       		.uleb128 0x3b
 4206 012f 05       		.uleb128 0x5
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 95


 4207 0130 49       		.uleb128 0x49
 4208 0131 13       		.uleb128 0x13
 4209 0132 02       		.uleb128 0x2
 4210 0133 18       		.uleb128 0x18
 4211 0134 00       		.byte	0
 4212 0135 00       		.byte	0
 4213 0136 15       		.uleb128 0x15
 4214 0137 34       		.uleb128 0x34
 4215 0138 00       		.byte	0
 4216 0139 03       		.uleb128 0x3
 4217 013a 0E       		.uleb128 0xe
 4218 013b 3A       		.uleb128 0x3a
 4219 013c 0B       		.uleb128 0xb
 4220 013d 3B       		.uleb128 0x3b
 4221 013e 05       		.uleb128 0x5
 4222 013f 49       		.uleb128 0x49
 4223 0140 13       		.uleb128 0x13
 4224 0141 3F       		.uleb128 0x3f
 4225 0142 19       		.uleb128 0x19
 4226 0143 3C       		.uleb128 0x3c
 4227 0144 19       		.uleb128 0x19
 4228 0145 00       		.byte	0
 4229 0146 00       		.byte	0
 4230 0147 16       		.uleb128 0x16
 4231 0148 34       		.uleb128 0x34
 4232 0149 00       		.byte	0
 4233 014a 03       		.uleb128 0x3
 4234 014b 0E       		.uleb128 0xe
 4235 014c 3A       		.uleb128 0x3a
 4236 014d 0B       		.uleb128 0xb
 4237 014e 3B       		.uleb128 0x3b
 4238 014f 0B       		.uleb128 0xb
 4239 0150 49       		.uleb128 0x49
 4240 0151 13       		.uleb128 0x13
 4241 0152 3F       		.uleb128 0x3f
 4242 0153 19       		.uleb128 0x19
 4243 0154 02       		.uleb128 0x2
 4244 0155 18       		.uleb128 0x18
 4245 0156 00       		.byte	0
 4246 0157 00       		.byte	0
 4247 0158 17       		.uleb128 0x17
 4248 0159 21       		.uleb128 0x21
 4249 015a 00       		.byte	0
 4250 015b 49       		.uleb128 0x49
 4251 015c 13       		.uleb128 0x13
 4252 015d 2F       		.uleb128 0x2f
 4253 015e 05       		.uleb128 0x5
 4254 015f 00       		.byte	0
 4255 0160 00       		.byte	0
 4256 0161 00       		.byte	0
 4257              		.section	.debug_aranges,"",%progbits
 4258 0000 4C000000 		.4byte	0x4c
 4259 0004 0200     		.2byte	0x2
 4260 0006 00000000 		.4byte	.Ldebug_info0
 4261 000a 04       		.byte	0x4
 4262 000b 00       		.byte	0
 4263 000c 0000     		.2byte	0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 96


 4264 000e 0000     		.2byte	0
 4265 0010 00000000 		.4byte	.LFB64
 4266 0014 78120000 		.4byte	.LFE64-.LFB64
 4267 0018 00000000 		.4byte	.LFB65
 4268 001c 58010000 		.4byte	.LFE65-.LFB65
 4269 0020 00000000 		.4byte	.LFB66
 4270 0024 30010000 		.4byte	.LFE66-.LFB66
 4271 0028 00000000 		.4byte	.LFB67
 4272 002c 60000000 		.4byte	.LFE67-.LFB67
 4273 0030 00000000 		.4byte	.LFB68
 4274 0034 80010000 		.4byte	.LFE68-.LFB68
 4275 0038 00000000 		.4byte	.LFB69
 4276 003c 22000000 		.4byte	.LFE69-.LFB69
 4277 0040 00000000 		.4byte	.LFB70
 4278 0044 26000000 		.4byte	.LFE70-.LFB70
 4279 0048 00000000 		.4byte	0
 4280 004c 00000000 		.4byte	0
 4281              		.section	.debug_ranges,"",%progbits
 4282              	.Ldebug_ranges0:
 4283 0000 00000000 		.4byte	.LFB64
 4284 0004 78120000 		.4byte	.LFE64
 4285 0008 00000000 		.4byte	.LFB65
 4286 000c 58010000 		.4byte	.LFE65
 4287 0010 00000000 		.4byte	.LFB66
 4288 0014 30010000 		.4byte	.LFE66
 4289 0018 00000000 		.4byte	.LFB67
 4290 001c 60000000 		.4byte	.LFE67
 4291 0020 00000000 		.4byte	.LFB68
 4292 0024 80010000 		.4byte	.LFE68
 4293 0028 00000000 		.4byte	.LFB69
 4294 002c 22000000 		.4byte	.LFE69
 4295 0030 00000000 		.4byte	.LFB70
 4296 0034 26000000 		.4byte	.LFE70
 4297 0038 00000000 		.4byte	0
 4298 003c 00000000 		.4byte	0
 4299              		.section	.debug_line,"",%progbits
 4300              	.Ldebug_line0:
 4301 0000 86040000 		.section	.debug_str,"MS",%progbits,1
 4301      02005801 
 4301      00000201 
 4301      FB0E0D00 
 4301      01010101 
 4302              	.LASF78:
 4303 0000 646D6163 		.ascii	"dmac_tdmem_struct\000"
 4303      5F74646D 
 4303      656D5F73 
 4303      74727563 
 4303      7400
 4304              	.LASF48:
 4305 0012 444D415F 		.ascii	"DMA_Channel_2_TD\000"
 4305      4368616E 
 4305      6E656C5F 
 4305      325F5444 
 4305      00
 4306              	.LASF61:
 4307 0023 74726967 		.ascii	"trigger_source\000"
 4307      6765725F 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 97


 4307      736F7572 
 4307      636500
 4308              	.LASF19:
 4309 0032 72656731 		.ascii	"reg16\000"
 4309      3600
 4310              	.LASF2:
 4311 0038 73686F72 		.ascii	"short int\000"
 4311      7420696E 
 4311      7400
 4312              	.LASF21:
 4313 0042 73697A65 		.ascii	"sizetype\000"
 4313      74797065 
 4313      00
 4314              	.LASF75:
 4315 004b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4315      43313120 
 4315      352E342E 
 4315      31203230 
 4315      31363036 
 4316 007e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4316      20726576 
 4316      6973696F 
 4316      6E203233 
 4316      37373135 
 4317 00b1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4317      66756E63 
 4317      74696F6E 
 4317      2D736563 
 4317      74696F6E 
 4318              	.LASF51:
 4319 00d9 737A5465 		.ascii	"szTempBuffer\000"
 4319      6D704275 
 4319      66666572 
 4319      00
 4320              	.LASF47:
 4321 00e6 444D415F 		.ascii	"DMA_Channel_2_Chan\000"
 4321      4368616E 
 4321      6E656C5F 
 4321      325F4368 
 4321      616E00
 4322              	.LASF28:
 4323 00f9 70686173 		.ascii	"phase_int\000"
 4323      655F696E 
 4323      7400
 4324              	.LASF12:
 4325 0103 75696E74 		.ascii	"uint16\000"
 4325      313600
 4326              	.LASF29:
 4327 010a 70776D5F 		.ascii	"pwm_div\000"
 4327      64697600 
 4328              	.LASF35:
 4329 0112 696E6465 		.ascii	"index\000"
 4329      7800
 4330              	.LASF68:
 4331 0118 57617665 		.ascii	"WaveformB_Buffer\000"
 4331      666F726D 
 4331      425F4275 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 98


 4331      66666572 
 4331      00
 4332              	.LASF11:
 4333 0129 75696E74 		.ascii	"uint8\000"
 4333      3800
 4334              	.LASF79:
 4335 012f 4765744C 		.ascii	"GetLastSampleIndex\000"
 4335      61737453 
 4335      616D706C 
 4335      65496E64 
 4335      657800
 4336              	.LASF33:
 4337 0142 48617264 		.ascii	"Hardware_Config\000"
 4337      77617265 
 4337      5F436F6E 
 4337      66696700 
 4338              	.LASF56:
 4339 0152 63436F6D 		.ascii	"cCommandsReady\000"
 4339      6D616E64 
 4339      73526561 
 4339      647900
 4340              	.LASF58:
 4341 0161 62436F6D 		.ascii	"bCommandReady\000"
 4341      6D616E64 
 4341      52656164 
 4341      7900
 4342              	.LASF32:
 4343 016f 77617665 		.ascii	"wave_temp\000"
 4343      5F74656D 
 4343      7000
 4344              	.LASF30:
 4345 0179 75616464 		.ascii	"uaddr\000"
 4345      7200
 4346              	.LASF34:
 4347 017f 444D415F 		.ascii	"DMA_Config\000"
 4347      436F6E66 
 4347      696700
 4348              	.LASF52:
 4349 018a 63436861 		.ascii	"cCharsReceived\000"
 4349      72735265 
 4349      63656976 
 4349      656400
 4350              	.LASF15:
 4351 0199 666C6F61 		.ascii	"float\000"
 4351      7400
 4352              	.LASF24:
 4353 019f 656E6469 		.ascii	"ending_offset\000"
 4353      6E675F6F 
 4353      66667365 
 4353      7400
 4354              	.LASF31:
 4355 01ad 66726571 		.ascii	"freq\000"
 4355      00
 4356              	.LASF6:
 4357 01b2 6C6F6E67 		.ascii	"long long int\000"
 4357      206C6F6E 
 4357      6720696E 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 99


 4357      7400
 4358              	.LASF72:
 4359 01c0 4E6F6973 		.ascii	"Noise_Adjusted\000"
 4359      655F4164 
 4359      6A757374 
 4359      656400
 4360              	.LASF4:
 4361 01cf 6C6F6E67 		.ascii	"long int\000"
 4361      20696E74 
 4361      00
 4362              	.LASF55:
 4363 01d8 69577269 		.ascii	"iWrite\000"
 4363      746500
 4364              	.LASF41:
 4365 01df 73747269 		.ascii	"string\000"
 4365      6E6700
 4366              	.LASF5:
 4367 01e6 6C6F6E67 		.ascii	"long unsigned int\000"
 4367      20756E73 
 4367      69676E65 
 4367      6420696E 
 4367      7400
 4368              	.LASF27:
 4369 01f8 756C656E 		.ascii	"ulen\000"
 4369      00
 4370              	.LASF43:
 4371 01fd 44617461 		.ascii	"Data\000"
 4371      00
 4372              	.LASF63:
 4373 0202 5553425F 		.ascii	"USB_Out_Buffer\000"
 4373      4F75745F 
 4373      42756666 
 4373      657200
 4374              	.LASF67:
 4375 0211 77617665 		.ascii	"wavea_offset\000"
 4375      615F6F66 
 4375      66736574 
 4375      00
 4376              	.LASF70:
 4377 021e 77617665 		.ascii	"waveb_gain\000"
 4377      625F6761 
 4377      696E00
 4378              	.LASF45:
 4379 0229 444D415F 		.ascii	"DMA_Channel_1_Chan\000"
 4379      4368616E 
 4379      6E656C5F 
 4379      315F4368 
 4379      616E00
 4380              	.LASF20:
 4381 023c 6C6F6E67 		.ascii	"long double\000"
 4381      20646F75 
 4381      626C6500 
 4382              	.LASF42:
 4383 0248 50757443 		.ascii	"PutChar\000"
 4383      68617200 
 4384              	.LASF1:
 4385 0250 756E7369 		.ascii	"unsigned char\000"
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 100


 4385      676E6564 
 4385      20636861 
 4385      7200
 4386              	.LASF25:
 4387 025e 61766172 		.ascii	"avar\000"
 4387      00
 4388              	.LASF37:
 4389 0263 436F6D6D 		.ascii	"CommandCheck\000"
 4389      616E6443 
 4389      6865636B 
 4389      00
 4390              	.LASF53:
 4391 0270 737A436F 		.ascii	"szCommandsBuffer\000"
 4391      6D6D616E 
 4391      64734275 
 4391      66666572 
 4391      00
 4392              	.LASF0:
 4393 0281 7369676E 		.ascii	"signed char\000"
 4393      65642063 
 4393      68617200 
 4394              	.LASF7:
 4395 028d 6C6F6E67 		.ascii	"long long unsigned int\000"
 4395      206C6F6E 
 4395      6720756E 
 4395      7369676E 
 4395      65642069 
 4396              	.LASF8:
 4397 02a4 756E7369 		.ascii	"unsigned int\000"
 4397      676E6564 
 4397      20696E74 
 4397      00
 4398              	.LASF49:
 4399 02b1 4368616E 		.ascii	"Channel_1_Data\000"
 4399      6E656C5F 
 4399      315F4461 
 4399      746100
 4400              	.LASF62:
 4401 02c0 70726561 		.ascii	"preamp_trig\000"
 4401      6D705F74 
 4401      72696700 
 4402              	.LASF22:
 4403 02cc 646D6163 		.ascii	"dmac_tdmem\000"
 4403      5F74646D 
 4403      656D00
 4404              	.LASF3:
 4405 02d7 73686F72 		.ascii	"short unsigned int\000"
 4405      7420756E 
 4405      7369676E 
 4405      65642069 
 4405      6E7400
 4406              	.LASF23:
 4407 02ea 73746174 		.ascii	"status\000"
 4407      757300
 4408              	.LASF73:
 4409 02f1 44696769 		.ascii	"Digital_Input_Status_Last\000"
 4409      74616C5F 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 101


 4409      496E7075 
 4409      745F5374 
 4409      61747573 
 4410              	.LASF17:
 4411 030b 63686172 		.ascii	"char\000"
 4411      00
 4412              	.LASF36:
 4413 0310 6D61696E 		.ascii	"main\000"
 4413      00
 4414              	.LASF10:
 4415 0315 696E7433 		.ascii	"int32_t\000"
 4415      325F7400 
 4416              	.LASF69:
 4417 031d 57617665 		.ascii	"WaveformB_Temp_Buffer\000"
 4417      666F726D 
 4417      425F5465 
 4417      6D705F42 
 4417      75666665 
 4418              	.LASF54:
 4419 0333 69526561 		.ascii	"iRead\000"
 4419      6400
 4420              	.LASF74:
 4421 0339 44696769 		.ascii	"Digital_AutoUpdate\000"
 4421      74616C5F 
 4421      4175746F 
 4421      55706461 
 4421      746500
 4422              	.LASF13:
 4423 034c 75696E74 		.ascii	"uint32\000"
 4423      333200
 4424              	.LASF76:
 4425 0353 6D61696E 		.ascii	"main.c\000"
 4425      2E6300
 4426              	.LASF18:
 4427 035a 72656738 		.ascii	"reg8\000"
 4427      00
 4428              	.LASF77:
 4429 035f 433A5C55 		.ascii	"C:\\Users\\merce\\Documents\\scope\\CyScope\\Twelve"
 4429      73657273 
 4429      5C6D6572 
 4429      63655C44 
 4429      6F63756D 
 4430 038c 2D626974 		.ascii	"-bit-4-chan-59\\ScopePSoC\\Scope-CY8CKIT-59.cydsn\000"
 4430      2D342D63 
 4430      68616E2D 
 4430      35395C53 
 4430      636F7065 
 4431              	.LASF14:
 4432 03bc 696E7433 		.ascii	"int32\000"
 4432      3200
 4433              	.LASF16:
 4434 03c2 646F7562 		.ascii	"double\000"
 4434      6C6500
 4435              	.LASF71:
 4436 03c9 77617665 		.ascii	"waveb_offset\000"
 4436      625F6F66 
 4436      66736574 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 102


 4436      00
 4437              	.LASF40:
 4438 03d6 63684861 		.ascii	"chHandle\000"
 4438      6E646C65 
 4438      00
 4439              	.LASF9:
 4440 03df 5F5F696E 		.ascii	"__int32_t\000"
 4440      7433325F 
 4440      7400
 4441              	.LASF57:
 4442 03e9 737A436F 		.ascii	"szCommand\000"
 4442      6D6D616E 
 4442      6400
 4443              	.LASF59:
 4444 03f3 70726561 		.ascii	"preamp_a\000"
 4444      6D705F61 
 4444      00
 4445              	.LASF60:
 4446 03fc 70726561 		.ascii	"preamp_b\000"
 4446      6D705F62 
 4446      00
 4447              	.LASF64:
 4448 0405 57617665 		.ascii	"WaveformA_Buffer\000"
 4448      666F726D 
 4448      415F4275 
 4448      66666572 
 4448      00
 4449              	.LASF39:
 4450 0416 50757453 		.ascii	"PutString\000"
 4450      7472696E 
 4450      6700
 4451              	.LASF38:
 4452 0420 52656365 		.ascii	"ReceivedBytes\000"
 4452      69766564 
 4452      42797465 
 4452      7300
 4453              	.LASF44:
 4454 042e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4454      52784275 
 4454      66666572 
 4454      00
 4455              	.LASF65:
 4456 043b 57617665 		.ascii	"WaveformA_Temp_Buffer\000"
 4456      666F726D 
 4456      415F5465 
 4456      6D705F42 
 4456      75666665 
 4457              	.LASF66:
 4458 0451 77617665 		.ascii	"wavea_gain\000"
 4458      615F6761 
 4458      696E00
 4459              	.LASF50:
 4460 045c 4368616E 		.ascii	"Channel_2_Data\000"
 4460      6E656C5F 
 4460      325F4461 
 4460      746100
 4461              	.LASF46:
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccFNiIU4.s 			page 103


 4462 046b 444D415F 		.ascii	"DMA_Channel_1_TD\000"
 4462      4368616E 
 4462      6E656C5F 
 4462      315F5444 
 4462      00
 4463              	.LASF26:
 4464 047c 62766172 		.ascii	"bvar\000"
 4464      00
 4465              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
