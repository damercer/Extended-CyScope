ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	DMA_Channel_1_Chan,1,1
  20              		.comm	DMA_Channel_1_TD,1,4
  21              		.comm	DMA_Channel_2_Chan,1,1
  22              		.comm	DMA_Channel_2_TD,1,4
  23              		.comm	Channel_1_Data,2048,4
  24              		.comm	Channel_2_Data,2048,4
  25              		.comm	szTempBuffer,64,4
  26              		.comm	cCharsReceived,1,1
  27              		.comm	szCommandsBuffer,4096,4
  28              		.comm	iRead,2,2
  29              		.comm	iWrite,2,2
  30              		.comm	cCommandsReady,2,2
  31              		.comm	szCommand,64,4
  32              		.comm	bCommandReady,1,1
  33              		.comm	trigger_source,1,1
  34              		.comm	USB_Out_Buffer,64,4
  35              		.comm	WaveformA_Buffer,2048,4
  36              		.comm	WaveformA_Temp_Buffer,2048,4
  37              		.global	wavea_gain
  38              		.bss
  39              		.type	wavea_gain, %object
  40              		.size	wavea_gain, 1
  41              	wavea_gain:
  42 0000 00       		.space	1
  43              		.global	wavea_offset
  44              		.type	wavea_offset, %object
  45              		.size	wavea_offset, 1
  46              	wavea_offset:
  47 0001 00       		.space	1
  48              		.comm	WaveformB_Buffer,2048,4
  49              		.comm	WaveformB_Temp_Buffer,2048,4
  50              		.global	waveb_gain
  51              		.type	waveb_gain, %object
  52              		.size	waveb_gain, 1
  53              	waveb_gain:
  54 0002 00       		.space	1
  55              		.global	waveb_offset
  56              		.type	waveb_offset, %object
  57              		.size	waveb_offset, 1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 2


  58              	waveb_offset:
  59 0003 00       		.space	1
  60              		.comm	Noise_Adjusted,1,1
  61              		.comm	Digital_AutoUpdate,1,1
  62              		.global	__aeabi_ui2f
  63              		.global	__aeabi_fmul
  64              		.global	__aeabi_f2d
  65              		.global	__aeabi_ddiv
  66              		.global	__aeabi_dadd
  67              		.global	__aeabi_d2f
  68              		.global	__aeabi_fcmpgt
  69              		.global	__aeabi_f2uiz
  70              		.section	.rodata
  71              		.align	2
  72              	.LC0:
  73 0000 2000     		.ascii	" \000"
  74 0002 0000     		.align	2
  75              	.LC1:
  76 0004 2A437953 		.ascii	"*CyScope V1.43\012\015\000"
  76      636F7065 
  76      2056312E 
  76      34330A0D 
  76      00
  77 0015 000000   		.align	2
  78              	.LC2:
  79 0018 25687500 		.ascii	"%hu\000"
  80              		.global	__aeabi_dmul
  81              		.global	__aeabi_fdiv
  82              		.global	__aeabi_i2d
  83              		.global	__aeabi_d2uiz
  84              		.align	2
  85              	.LC3:
  86 001c 4572726F 		.ascii	"Error: Unrecognized Scope Command\012\015\000"
  86      723A2055 
  86      6E726563 
  86      6F676E69 
  86      7A656420 
  87              		.align	2
  88              	.LC4:
  89 0040 4572726F 		.ascii	"Error: Unknown Command\012\015\000"
  89      723A2055 
  89      6E6B6E6F 
  89      776E2043 
  89      6F6D6D61 
  90              		.section	.text.main,"ax",%progbits
  91              		.align	2
  92              		.global	main
  93              		.thumb
  94              		.thumb_func
  95              		.type	main, %function
  96              	main:
  97              	.LFB64:
  98              		.file 1 "main.c"
   1:main.c        **** /* ========================================
   2:main.c        ****  *
   3:main.c        ****  * Copyright Cypress Semiconductor, 2016
   4:main.c        ****  * All Rights Reserved
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 3


   5:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:main.c        ****  *
   7:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:main.c        ****  * WHICH IS THE PROPERTY OF Cypress Semiconductor.
   9:main.c        ****  *
  10:main.c        ****  * ========================================
  11:main.c        **** */
  12:main.c        **** #include <device.h>
  13:main.c        **** #include <string.h>
  14:main.c        **** #include <stdio.h>
  15:main.c        **** 
  16:main.c        **** void DMA_Config(void);
  17:main.c        **** void Hardware_Config(void);
  18:main.c        **** uint16 GetLastSampleIndex(uint8 chHandle);
  19:main.c        **** void CommandCheck(void);
  20:main.c        **** void PutString(char * string);  // actually checks to see if the CDC device is ready before sending
  21:main.c        **** void PutChar(char Data);
  22:main.c        **** 
  23:main.c        **** // 2047 is the max buffer size in samples
  24:main.c        **** #define BUFFER_SIZE 1024
  25:main.c        **** 
  26:main.c        **** // trigger setup control register definitions
  27:main.c        **** #define FALLING_EDGE_TRIGGERED 0x01
  28:main.c        **** #define RISING_EDGE_TRIGGERED 0x02
  29:main.c        **** #define EITHER_EDGE_TRIGGERED 0x04
  30:main.c        **** #define EXTERNAL_TRIGGERED 0x08
  31:main.c        **** 
  32:main.c        **** #define TRIGGER_MASK 0x0F
  33:main.c        **** 
  34:main.c        **** #define MANUAL_TRIGGER 0x10
  35:main.c        **** #define TRIGGER_ARM 0x40
  36:main.c        **** #define RESET_PWM 0x80
  37:main.c        **** 
  38:main.c        **** // analog mux channel selection defines
  39:main.c        **** #define SCOPE_CHANNEL_1 0
  40:main.c        **** #define SCOPE_CHANNEL_2 1
  41:main.c        **** #define SCOPE_CHANNEL_3 0
  42:main.c        **** #define SCOPE_CHANNEL_4 1
  43:main.c        **** #define EXT_TRIGGER 2
  44:main.c        **** 
  45:main.c        **** // status register defines
  46:main.c        **** #define COMP_LEVEL 0x01
  47:main.c        **** #define TRIGGERED 0x02
  48:main.c        **** #define CAPTURE_COMPLETE 0x04
  49:main.c        **** 
  50:main.c        **** // Wave_Control control register definitions
  51:main.c        **** #define WAVEA_SELECT_MASK 0x01
  52:main.c        **** #define WAVE_SELECT_WAVE 0x00
  53:main.c        **** #define WAVEA_SELECT_NOISE 0x01
  54:main.c        **** #define WAVEB_SELECT_MASK 0x04
  55:main.c        **** #define WAVEB_SELECT_NOISE 0x04
  56:main.c        **** 
  57:main.c        **** /* DMA Configuration for DMA_Channel_1 */
  58:main.c        **** #define DMA_Channel_1_BYTES_PER_BURST 2
  59:main.c        **** #define DMA_Channel_1_REQUEST_PER_BURST 1
  60:main.c        **** #define DMA_Channel_1_SRC_BASE (CYDEV_PERIPH_BASE)
  61:main.c        **** #define DMA_Channel_1_DST_BASE (CYDEV_SRAM_BASE)
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 4


  62:main.c        **** 
  63:main.c        **** /* DMA Configuration for DMA_Channel_2 */
  64:main.c        **** #define DMA_Channel_2_BYTES_PER_BURST 2
  65:main.c        **** #define DMA_Channel_2_REQUEST_PER_BURST 1
  66:main.c        **** #define DMA_Channel_2_SRC_BASE (CYDEV_PERIPH_BASE)
  67:main.c        **** #define DMA_Channel_2_DST_BASE (CYDEV_SRAM_BASE)
  68:main.c        **** 
  69:main.c        **** /* Variable declarations for DMA_Channel_1 */
  70:main.c        **** /* Move these variable declarations to the top of the function */
  71:main.c        **** uint8 DMA_Channel_1_Chan;
  72:main.c        **** uint8 DMA_Channel_1_TD[1];
  73:main.c        **** 
  74:main.c        **** /* Variable declarations for DMA_Channel_2 */
  75:main.c        **** /* Move these variable declarations to the top of the function */
  76:main.c        **** uint8 DMA_Channel_2_Chan;
  77:main.c        **** uint8 DMA_Channel_2_TD[1];
  78:main.c        **** 
  79:main.c        **** // RAM data arrays for storing the sampled data
  80:main.c        **** uint16 Channel_1_Data[BUFFER_SIZE];
  81:main.c        **** uint16 Channel_2_Data[BUFFER_SIZE];
  82:main.c        **** 
  83:main.c        **** // USB UART variables
  84:main.c        **** #define COMMAND_BUFFER_SIZE 64
  85:main.c        **** char szTempBuffer[COMMAND_BUFFER_SIZE];
  86:main.c        **** uint8 cCharsReceived;
  87:main.c        **** 
  88:main.c        **** #define CIRCULAR_BUFFER_SIZE 4096
  89:main.c        **** char szCommandsBuffer[CIRCULAR_BUFFER_SIZE]; // need to make this many times bigger to deal with th
  90:main.c        **** uint16 iRead, iWrite;
  91:main.c        **** uint16 cCommandsReady;
  92:main.c        **** 
  93:main.c        **** char szCommand[COMMAND_BUFFER_SIZE];
  94:main.c        **** uint8 bCommandReady;
  95:main.c        **** 
  96:main.c        **** // scope status variable
  97:main.c        **** uint8 trigger_source;
  98:main.c        **** 
  99:main.c        **** // for dumping data out (its 64 bytes, but if you want anything less, it has to be a multiple of 4)
 100:main.c        **** // also a good idea to make it a multiple of the ADC buffer size, defined above
 101:main.c        **** #define USBUART_BUFFER_SIZE 64
 102:main.c        **** uint8 USB_Out_Buffer[USBUART_BUFFER_SIZE];
 103:main.c        **** 
 104:main.c        **** // Waveform generator variables
 105:main.c        **** #define WAVEFORM_BUFFER_SIZE 2048
 106:main.c        **** uint8 WaveformA_Buffer[WAVEFORM_BUFFER_SIZE];
 107:main.c        **** uint8 WaveformA_Temp_Buffer[WAVEFORM_BUFFER_SIZE];
 108:main.c        **** uint8 wavea_gain = 0;
 109:main.c        **** uint8 wavea_offset = 0;
 110:main.c        **** uint8 WaveformB_Buffer[WAVEFORM_BUFFER_SIZE];
 111:main.c        **** uint8 WaveformB_Temp_Buffer[WAVEFORM_BUFFER_SIZE];
 112:main.c        **** uint8 waveb_gain = 0;
 113:main.c        **** uint8 waveb_offset = 0;
 114:main.c        **** 
 115:main.c        **** //
 116:main.c        **** // Buffer for noise output after applying amplitude and offset
 117:main.c        **** uint8 Noise_Adjusted;
 118:main.c        **** 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 5


 119:main.c        **** //
 120:main.c        **** //// digital input last state variable
 121:main.c        **** //uint8 Digital_Input_Status_Last;
 122:main.c        **** uint8 Digital_AutoUpdate;
 123:main.c        **** 
 124:main.c        **** // For the SAR ADC to run at 18MHz, it *must* have a 50% duty cycle. 
 125:main.c        **** // There are 3 frequencies from the PLL that satisfy
 126:main.c        **** // generating an 18 Mhz clock from integer divides off the PLL: 36 Mhz
 127:main.c        **** // 54 Mhz and 72 Mhz.  Of these three choices, 54 Mhz requires a divide of
 128:main.c        **** // 3 which does not produce a 50% duty cycle.
 129:main.c        **** 
 130:main.c        **** int main()
 131:main.c        **** {
  99              		.loc 1 131 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 40
 102              		@ frame_needed = 1, uses_anonymous_args = 0
 103 0000 B0B5     		push	{r4, r5, r7, lr}
 104              		.cfi_def_cfa_offset 16
 105              		.cfi_offset 4, -16
 106              		.cfi_offset 5, -12
 107              		.cfi_offset 7, -8
 108              		.cfi_offset 14, -4
 109 0002 8AB0     		sub	sp, sp, #40
 110              		.cfi_def_cfa_offset 56
 111 0004 00AF     		add	r7, sp, #0
 112              		.cfi_def_cfa_register 7
 132:main.c        **** 	uint8 status;
 133:main.c        **** 	uint16 ending_offset;
 134:main.c        **** 	char * psz;
 135:main.c        **** 	uint16 avar, bvar, i, ulen;
 136:main.c        **** 	uint32 phase_int;
 137:main.c        ****     uint32 pwm_div;
 138:main.c        ****     uint32 uaddr;
 139:main.c        **** 	float freq;
 140:main.c        ****     float wave_temp;
 141:main.c        ****  
 142:main.c        ****     Hardware_Config();
 113              		.loc 1 142 0
 114 0006 FFF7FEFF 		bl	Hardware_Config
 143:main.c        ****     DMA_Config();
 115              		.loc 1 143 0
 116 000a FFF7FEFF 		bl	DMA_Config
 117              	.L114:
 144:main.c        **** 
 145:main.c        ****     for(;;)
 146:main.c        ****     {
 147:main.c        **** 		CommandCheck();
 118              		.loc 1 147 0
 119 000e FFF7FEFF 		bl	CommandCheck
 148:main.c        **** 		
 149:main.c        **** 		//Adjust amplitude and offset for noise output
 150:main.c        **** 		wave_temp = (uint8) *PRS_SEED_PTR;
 120              		.loc 1 150 0
 121 0012 9F4B     		ldr	r3, .L122+8
 122 0014 1B88     		ldrh	r3, [r3]	@ movhi
 123 0016 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 6


 124 0018 DBB2     		uxtb	r3, r3
 125 001a 1846     		mov	r0, r3
 126 001c FFF7FEFF 		bl	__aeabi_ui2f
 127 0020 0346     		mov	r3, r0
 128 0022 FB61     		str	r3, [r7, #28]	@ float
 151:main.c        **** 		wave_temp = (((float) wave_temp) * ((float)wavea_gain)/255.0) + ((float)wavea_offset);
 129              		.loc 1 151 0
 130 0024 9B4B     		ldr	r3, .L122+12
 131 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 132 0028 1846     		mov	r0, r3
 133 002a FFF7FEFF 		bl	__aeabi_ui2f
 134 002e 0346     		mov	r3, r0
 135 0030 F969     		ldr	r1, [r7, #28]	@ float
 136 0032 1846     		mov	r0, r3
 137 0034 FFF7FEFF 		bl	__aeabi_fmul
 138 0038 0346     		mov	r3, r0
 139 003a 1846     		mov	r0, r3
 140 003c FFF7FEFF 		bl	__aeabi_f2d
 141 0040 91A3     		adr	r3, .L122
 142 0042 D3E90023 		ldrd	r2, [r3]
 143 0046 FFF7FEFF 		bl	__aeabi_ddiv
 144 004a 0346     		mov	r3, r0
 145 004c 0C46     		mov	r4, r1
 146 004e 2546     		mov	r5, r4
 147 0050 1C46     		mov	r4, r3
 148 0052 914B     		ldr	r3, .L122+16
 149 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 150 0056 1846     		mov	r0, r3
 151 0058 FFF7FEFF 		bl	__aeabi_ui2f
 152 005c 0346     		mov	r3, r0
 153 005e 1846     		mov	r0, r3
 154 0060 FFF7FEFF 		bl	__aeabi_f2d
 155 0064 0246     		mov	r2, r0
 156 0066 0B46     		mov	r3, r1
 157 0068 2046     		mov	r0, r4
 158 006a 2946     		mov	r1, r5
 159 006c FFF7FEFF 		bl	__aeabi_dadd
 160 0070 0346     		mov	r3, r0
 161 0072 0C46     		mov	r4, r1
 162 0074 1846     		mov	r0, r3
 163 0076 2146     		mov	r1, r4
 164 0078 FFF7FEFF 		bl	__aeabi_d2f
 165 007c 0346     		mov	r3, r0
 166 007e FB61     		str	r3, [r7, #28]	@ float
 152:main.c        **** 		if(wave_temp > 255.0)
 167              		.loc 1 152 0
 168 0080 8649     		ldr	r1, .L122+20
 169 0082 F869     		ldr	r0, [r7, #28]	@ float
 170 0084 FFF7FEFF 		bl	__aeabi_fcmpgt
 171 0088 0346     		mov	r3, r0
 172 008a 002B     		cmp	r3, #0
 173 008c 01D0     		beq	.L2
 153:main.c        **** 		{
 154:main.c        **** 			wave_temp = 255.0;
 174              		.loc 1 154 0
 175 008e 834B     		ldr	r3, .L122+20
 176 0090 FB61     		str	r3, [r7, #28]	@ float
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 7


 177              	.L2:
 155:main.c        **** 		}
 156:main.c        **** 		Noise_Adjusted = (uint8) wave_temp;
 178              		.loc 1 156 0
 179 0092 F869     		ldr	r0, [r7, #28]	@ float
 180 0094 FFF7FEFF 		bl	__aeabi_f2uiz
 181 0098 0346     		mov	r3, r0
 182 009a DAB2     		uxtb	r2, r3
 183 009c 804B     		ldr	r3, .L122+24
 184 009e 1A70     		strb	r2, [r3]
 157:main.c        ****                
 158:main.c        **** 		if(bCommandReady != 0)
 185              		.loc 1 158 0
 186 00a0 804B     		ldr	r3, .L122+28
 187 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 188 00a4 002B     		cmp	r3, #0
 189 00a6 01F07980 		beq	.L4
 159:main.c        **** 		{
 160:main.c        **** 			psz = strtok(szCommand, " ");
 190              		.loc 1 160 0
 191 00aa 7F49     		ldr	r1, .L122+32
 192 00ac 7F48     		ldr	r0, .L122+36
 193 00ae FFF7FEFF 		bl	strtok
 194 00b2 B861     		str	r0, [r7, #24]
 161:main.c        **** 			if(*psz == 'i')
 195              		.loc 1 161 0
 196 00b4 BB69     		ldr	r3, [r7, #24]
 197 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 198 00b8 692B     		cmp	r3, #105
 199 00ba 04D1     		bne	.L5
 162:main.c        **** 			{
 163:main.c        **** 				// it all started here.  NOTE!  \n\r THE ORDER MATTERS!
 164:main.c        **** 				PutString("*CyScope V1.43\n\r");
 200              		.loc 1 164 0
 201 00bc 7C48     		ldr	r0, .L122+40
 202 00be FFF7FEFF 		bl	PutString
 203 00c2 01F068B8 		b	.L6
 204              	.L5:
 165:main.c        **** 			}
 166:main.c        **** //DM
 167:main.c        **** 			else if(*psz == 'D')
 205              		.loc 1 167 0
 206 00c6 BB69     		ldr	r3, [r7, #24]
 207 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 208 00ca 442B     		cmp	r3, #68
 209 00cc 40F09280 		bne	.L7
 168:main.c        **** 			{
 169:main.c        **** 				// Digital I/O commands
 170:main.c        **** 				
 171:main.c        **** 				psz = strtok(0, " ");
 210              		.loc 1 171 0
 211 00d0 7549     		ldr	r1, .L122+32
 212 00d2 0020     		movs	r0, #0
 213 00d4 FFF7FEFF 		bl	strtok
 214 00d8 B861     		str	r0, [r7, #24]
 172:main.c        **** 				if(*psz == 'O')
 215              		.loc 1 172 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 8


 216 00da BB69     		ldr	r3, [r7, #24]
 217 00dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 218 00de 4F2B     		cmp	r3, #79
 219 00e0 11D1     		bne	.L8
 173:main.c        **** 				{
 174:main.c        **** 					// Digital output
 175:main.c        **** 					// D O N, where N is the output byte value as an ascii 8 bit number
 176:main.c        **** 					psz = strtok(0, " ");
 220              		.loc 1 176 0
 221 00e2 7149     		ldr	r1, .L122+32
 222 00e4 0020     		movs	r0, #0
 223 00e6 FFF7FEFF 		bl	strtok
 224 00ea B861     		str	r0, [r7, #24]
 177:main.c        **** 					sscanf(psz,"%hu", &avar);
 225              		.loc 1 177 0
 226 00ec 3B1D     		adds	r3, r7, #4
 227 00ee 1A46     		mov	r2, r3
 228 00f0 7049     		ldr	r1, .L122+44
 229 00f2 B869     		ldr	r0, [r7, #24]
 230 00f4 FFF7FEFF 		bl	sscanf
 178:main.c        **** 					Digital_Out_Control_Write((uint8) avar);
 231              		.loc 1 178 0
 232 00f8 BB88     		ldrh	r3, [r7, #4]
 233 00fa DBB2     		uxtb	r3, r3
 234 00fc 1846     		mov	r0, r3
 235 00fe FFF7FEFF 		bl	Digital_Out_Control_Write
 236 0102 01F048B8 		b	.L6
 237              	.L8:
 179:main.c        **** 				}
 180:main.c        **** 				//else if(*psz == 'I')
 181:main.c        **** 				//{
 182:main.c        **** 					// reads digital inputs
 183:main.c        **** 					// returns Ix where x is an 8 bit (binary) value representing the status
 184:main.c        **** 					// of the digital input pins
 185:main.c        **** 					
 186:main.c        **** 					//PutChar('I');
 187:main.c        **** 					//PutChar((uint8) Digital_Input_Status_Read());
 188:main.c        **** 				//}
 189:main.c        **** 				else if(*psz == 'A')
 238              		.loc 1 189 0
 239 0106 BB69     		ldr	r3, [r7, #24]
 240 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 241 010a 412B     		cmp	r3, #65
 242 010c 04D1     		bne	.L9
 190:main.c        **** 				{
 191:main.c        **** 					Digital_AutoUpdate = 1;
 243              		.loc 1 191 0
 244 010e 6A4B     		ldr	r3, .L122+48
 245 0110 0122     		movs	r2, #1
 246 0112 1A70     		strb	r2, [r3]
 247 0114 01F03FB8 		b	.L6
 248              	.L9:
 192:main.c        ****                     //PutChar('I');
 193:main.c        **** 					//PutChar((uint8) Digital_Input_Status_Read());
 194:main.c        **** 				}
 195:main.c        **** 				else if(*psz == 'a')
 249              		.loc 1 195 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 9


 250 0118 BB69     		ldr	r3, [r7, #24]
 251 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 252 011c 612B     		cmp	r3, #97
 253 011e 04D1     		bne	.L10
 196:main.c        **** 				{
 197:main.c        **** 					Digital_AutoUpdate = 0;
 254              		.loc 1 197 0
 255 0120 654B     		ldr	r3, .L122+48
 256 0122 0022     		movs	r2, #0
 257 0124 1A70     		strb	r2, [r3]
 258 0126 01F036B8 		b	.L6
 259              	.L10:
 198:main.c        **** 				}
 199:main.c        **** 				else if(*psz == 'F')
 260              		.loc 1 199 0
 261 012a BB69     		ldr	r3, [r7, #24]
 262 012c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 263 012e 462B     		cmp	r3, #70
 264 0130 27D1     		bne	.L11
 200:main.c        **** 				{
 201:main.c        **** 					// set PWM output frequency
 202:main.c        **** 			    	// D F F_HIGH F_LOW where F_HIGH and F_LOW represent a 16 bit number
 203:main.c        ****                     psz = strtok(0, " ");
 265              		.loc 1 203 0
 266 0132 5D49     		ldr	r1, .L122+32
 267 0134 0020     		movs	r0, #0
 268 0136 FFF7FEFF 		bl	strtok
 269 013a B861     		str	r0, [r7, #24]
 204:main.c        **** 					sscanf(psz,"%hu", &avar);
 270              		.loc 1 204 0
 271 013c 3B1D     		adds	r3, r7, #4
 272 013e 1A46     		mov	r2, r3
 273 0140 5C49     		ldr	r1, .L122+44
 274 0142 B869     		ldr	r0, [r7, #24]
 275 0144 FFF7FEFF 		bl	sscanf
 205:main.c        **** 					pwm_div = ((uint32) avar)*256;
 276              		.loc 1 205 0
 277 0148 BB88     		ldrh	r3, [r7, #4]
 278 014a 1B02     		lsls	r3, r3, #8
 279 014c 7B61     		str	r3, [r7, #20]
 206:main.c        **** 					
 207:main.c        **** 					psz = strtok(0, " ");
 280              		.loc 1 207 0
 281 014e 5649     		ldr	r1, .L122+32
 282 0150 0020     		movs	r0, #0
 283 0152 FFF7FEFF 		bl	strtok
 284 0156 B861     		str	r0, [r7, #24]
 208:main.c        **** 					sscanf(psz,"%hu", &avar);
 285              		.loc 1 208 0
 286 0158 3B1D     		adds	r3, r7, #4
 287 015a 1A46     		mov	r2, r3
 288 015c 5549     		ldr	r1, .L122+44
 289 015e B869     		ldr	r0, [r7, #24]
 290 0160 FFF7FEFF 		bl	sscanf
 209:main.c        **** 					pwm_div += ((uint32) avar);
 291              		.loc 1 209 0
 292 0164 BB88     		ldrh	r3, [r7, #4]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 10


 293 0166 1A46     		mov	r2, r3
 294 0168 7B69     		ldr	r3, [r7, #20]
 295 016a 1344     		add	r3, r3, r2
 296 016c 7B61     		str	r3, [r7, #20]
 210:main.c        **** 					Dig_PWM_Clock_SetDividerValue(pwm_div);
 297              		.loc 1 210 0
 298 016e 7B69     		ldr	r3, [r7, #20]
 299 0170 9BB2     		uxth	r3, r3
 300 0172 013B     		subs	r3, r3, #1
 301 0174 9BB2     		uxth	r3, r3
 302 0176 0121     		movs	r1, #1
 303 0178 1846     		mov	r0, r3
 304 017a FFF7FEFF 		bl	Dig_PWM_Clock_SetDividerRegister
 305 017e 01F00AB8 		b	.L6
 306              	.L11:
 211:main.c        **** 				}
 212:main.c        **** 				else if(*psz == 'D')
 307              		.loc 1 212 0
 308 0182 BB69     		ldr	r3, [r7, #24]
 309 0184 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 310 0186 442B     		cmp	r3, #68
 311 0188 16D1     		bne	.L12
 213:main.c        **** 				{
 214:main.c        **** 					// Set PWM Duty cycle
 215:main.c        **** 					// D D N where N is an 8 bit ascii value representing the duty cycle
 216:main.c        **** 					// from 0 to 249
 217:main.c        **** 					psz = strtok(0, " ");
 312              		.loc 1 217 0
 313 018a 4749     		ldr	r1, .L122+32
 314 018c 0020     		movs	r0, #0
 315 018e FFF7FEFF 		bl	strtok
 316 0192 B861     		str	r0, [r7, #24]
 218:main.c        **** 					sscanf(psz,"%hu", &avar);
 317              		.loc 1 218 0
 318 0194 3B1D     		adds	r3, r7, #4
 319 0196 1A46     		mov	r2, r3
 320 0198 4649     		ldr	r1, .L122+44
 321 019a B869     		ldr	r0, [r7, #24]
 322 019c FFF7FEFF 		bl	sscanf
 219:main.c        **** 					// GJL: Limit upper compare value to 249 since period is 249
 220:main.c        ****                     if(avar > 249)
 323              		.loc 1 220 0
 324 01a0 BB88     		ldrh	r3, [r7, #4]
 325 01a2 F92B     		cmp	r3, #249
 326 01a4 01D9     		bls	.L13
 221:main.c        ****                     {
 222:main.c        ****                         avar = 249;
 327              		.loc 1 222 0
 328 01a6 F923     		movs	r3, #249
 329 01a8 BB80     		strh	r3, [r7, #4]	@ movhi
 330              	.L13:
 223:main.c        ****                     }
 224:main.c        **** 					Dig_PWM_WriteCompare((uint8) avar);
 331              		.loc 1 224 0
 332 01aa BB88     		ldrh	r3, [r7, #4]
 333 01ac DBB2     		uxtb	r3, r3
 334 01ae 1846     		mov	r0, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 11


 335 01b0 FFF7FEFF 		bl	Dig_PWM_WriteCompare
 336 01b4 00F0EFBF 		b	.L6
 337              	.L12:
 225:main.c        **** 					//Dig_PWM_WriteCompare2((uint8) avar);
 226:main.c        **** 				}
 227:main.c        **** 				else if(*psz == '!')
 338              		.loc 1 227 0
 339 01b8 BB69     		ldr	r3, [r7, #24]
 340 01ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 341 01bc 212B     		cmp	r3, #33
 342 01be 40F0EA87 		bne	.L6
 228:main.c        **** 				{
 229:main.c        **** 					// interrupt line configuration.  not implemented yet
 230:main.c        **** 					// sends back a '!' character when the interrupt condition is met
 231:main.c        **** 					// D ! M where M is the mode:
 232:main.c        **** 					// M = D : Disable
 233:main.c        **** 					// M = R : Rising Edge
 234:main.c        **** 					// M = F : Falling Edge
 235:main.c        **** 					// M = H : High Level
 236:main.c        **** 					// M = L : Low Level
 237:main.c        **** 					psz = strtok(0, " ");
 343              		.loc 1 237 0
 344 01c2 3949     		ldr	r1, .L122+32
 345 01c4 0020     		movs	r0, #0
 346 01c6 FFF7FEFF 		bl	strtok
 347 01ca B861     		str	r0, [r7, #24]
 238:main.c        **** 					
 239:main.c        **** 					if(*psz == 'D')
 348              		.loc 1 239 0
 349 01cc BB69     		ldr	r3, [r7, #24]
 350 01ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 351 01d0 442B     		cmp	r3, #68
 352 01d2 00F0E087 		beq	.L6
 240:main.c        **** 					{
 241:main.c        **** 					}
 242:main.c        **** 					else if(*psz == 'R')
 353              		.loc 1 242 0
 354 01d6 BB69     		ldr	r3, [r7, #24]
 355 01d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 356 01da 522B     		cmp	r3, #82
 357 01dc 00F0DB87 		beq	.L6
 243:main.c        **** 					{
 244:main.c        **** 					}
 245:main.c        **** 					else if(*psz == 'F')
 358              		.loc 1 245 0
 359 01e0 BB69     		ldr	r3, [r7, #24]
 360 01e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 361 01e4 462B     		cmp	r3, #70
 362 01e6 00F0D687 		beq	.L6
 246:main.c        **** 					{
 247:main.c        **** 					}
 248:main.c        **** 					else if(*psz == 'H')
 363              		.loc 1 248 0
 364 01ea BB69     		ldr	r3, [r7, #24]
 365 01ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 366 01ee 482B     		cmp	r3, #72
 367 01f0 00F0D1BF 		b	.L6
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 12


 368              	.L7:
 249:main.c        **** 					{
 250:main.c        **** 					}
 251:main.c        **** 					else if(*psz == 'L')
 252:main.c        **** 					{
 253:main.c        **** 					}
 254:main.c        **** 					
 255:main.c        **** 					// if trigger condition is met, send back the '!' character
 256:main.c        **** 					//PutChar('!');
 257:main.c        **** 				}
 258:main.c        **** 			}
 259:main.c        **** 			else if(*psz == 'W')
 369              		.loc 1 259 0
 370 01f4 BB69     		ldr	r3, [r7, #24]
 371 01f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 372 01f8 572B     		cmp	r3, #87
 373 01fa 40F0CD84 		bne	.L14
 260:main.c        **** 			{
 261:main.c        **** 				// waveform generator commands
 262:main.c        **** 				
 263:main.c        **** 				psz = strtok(0, " ");
 374              		.loc 1 263 0
 375 01fe 2A49     		ldr	r1, .L122+32
 376 0200 0020     		movs	r0, #0
 377 0202 FFF7FEFF 		bl	strtok
 378 0206 B861     		str	r0, [r7, #24]
 264:main.c        **** 				if(*psz == 'S') // Upper Case for AWG A
 379              		.loc 1 264 0
 380 0208 BB69     		ldr	r3, [r7, #24]
 381 020a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 382 020c 532B     		cmp	r3, #83
 383 020e 31D1     		bne	.L15
 265:main.c        **** 				{
 266:main.c        **** 					// sample data into the buffer
 267:main.c        **** 					// command is W S H_ADDR L_ADDR DATA
 268:main.c        **** 					// ADDR is the 2 8 bit bytes for address 0 - 255
 269:main.c        **** 					// DATA is the waveform amplitude 0 - 255
 270:main.c        **** 					psz = strtok(0, " ");
 384              		.loc 1 270 0
 385 0210 2549     		ldr	r1, .L122+32
 386 0212 0020     		movs	r0, #0
 387 0214 FFF7FEFF 		bl	strtok
 388 0218 B861     		str	r0, [r7, #24]
 271:main.c        **** 					sscanf(psz,"%hu", &avar);
 389              		.loc 1 271 0
 390 021a 3B1D     		adds	r3, r7, #4
 391 021c 1A46     		mov	r2, r3
 392 021e 2549     		ldr	r1, .L122+44
 393 0220 B869     		ldr	r0, [r7, #24]
 394 0222 FFF7FEFF 		bl	sscanf
 272:main.c        ****                     uaddr = ((uint32) avar)*256;
 395              		.loc 1 272 0
 396 0226 BB88     		ldrh	r3, [r7, #4]
 397 0228 1B02     		lsls	r3, r3, #8
 398 022a 3B61     		str	r3, [r7, #16]
 273:main.c        **** 					//bvar = avar;  // something is wacky with sscanf.  if I dont move the data into bvar, 
 274:main.c        ****                     // then on the next call to sscanf, even
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 13


 275:main.c        **** 					// if I use another variable, avar gets reset to zero!
 276:main.c        **** 					psz = strtok(0, " ");
 399              		.loc 1 276 0
 400 022c 1E49     		ldr	r1, .L122+32
 401 022e 0020     		movs	r0, #0
 402 0230 FFF7FEFF 		bl	strtok
 403 0234 B861     		str	r0, [r7, #24]
 277:main.c        **** 					sscanf(psz,"%hu", &avar);
 404              		.loc 1 277 0
 405 0236 3B1D     		adds	r3, r7, #4
 406 0238 1A46     		mov	r2, r3
 407 023a 1E49     		ldr	r1, .L122+44
 408 023c B869     		ldr	r0, [r7, #24]
 409 023e FFF7FEFF 		bl	sscanf
 278:main.c        ****                     uaddr = uaddr + avar;
 410              		.loc 1 278 0
 411 0242 BB88     		ldrh	r3, [r7, #4]
 412 0244 1A46     		mov	r2, r3
 413 0246 3B69     		ldr	r3, [r7, #16]
 414 0248 1344     		add	r3, r3, r2
 415 024a 3B61     		str	r3, [r7, #16]
 279:main.c        ****                     //got the address
 280:main.c        **** 					psz = strtok(0, " ");
 416              		.loc 1 280 0
 417 024c 1649     		ldr	r1, .L122+32
 418 024e 0020     		movs	r0, #0
 419 0250 FFF7FEFF 		bl	strtok
 420 0254 B861     		str	r0, [r7, #24]
 281:main.c        **** 					sscanf(psz,"%hu", &avar);
 421              		.loc 1 281 0
 422 0256 3B1D     		adds	r3, r7, #4
 423 0258 1A46     		mov	r2, r3
 424 025a 1649     		ldr	r1, .L122+44
 425 025c B869     		ldr	r0, [r7, #24]
 426 025e FFF7FEFF 		bl	sscanf
 282:main.c        **** 					// got the data
 283:main.c        **** 					// store it in the buffer
 284:main.c        **** 					WaveformA_Temp_Buffer[uaddr] = avar;
 427              		.loc 1 284 0
 428 0262 BB88     		ldrh	r3, [r7, #4]
 429 0264 D9B2     		uxtb	r1, r3
 430 0266 154A     		ldr	r2, .L122+52
 431 0268 3B69     		ldr	r3, [r7, #16]
 432 026a 1344     		add	r3, r3, r2
 433 026c 0A46     		mov	r2, r1
 434 026e 1A70     		strb	r2, [r3]
 435 0270 00F091BF 		b	.L6
 436              	.L15:
 285:main.c        **** 				}
 286:main.c        **** 				else if(*psz == 'P') // Upper Case for AWG A
 437              		.loc 1 286 0
 438 0274 BB69     		ldr	r3, [r7, #24]
 439 0276 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 440 0278 502B     		cmp	r3, #80
 441 027a 70D1     		bne	.L17
 287:main.c        **** 				{
 288:main.c        **** 					// program the waveform by copying it into the array that the waveform generator uses
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 14


 289:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 442              		.loc 1 289 0
 443 027c 0023     		movs	r3, #0
 444 027e BB84     		strh	r3, [r7, #36]	@ movhi
 445 0280 67E0     		b	.L18
 446              	.L123:
 447 0282 00BFAFF3 		.align	3
 447      0080
 448              	.L122:
 449 0288 00000000 		.word	0
 450 028c 00E06F40 		.word	1081073664
 451 0290 08650040 		.word	1073767688
 452 0294 00000000 		.word	wavea_gain
 453 0298 00000000 		.word	wavea_offset
 454 029c 00007F43 		.word	1132396544
 455 02a0 00000000 		.word	Noise_Adjusted
 456 02a4 00000000 		.word	bCommandReady
 457 02a8 00000000 		.word	.LC0
 458 02ac 00000000 		.word	szCommand
 459 02b0 04000000 		.word	.LC1
 460 02b4 18000000 		.word	.LC2
 461 02b8 00000000 		.word	Digital_AutoUpdate
 462 02bc 00000000 		.word	WaveformA_Temp_Buffer
 463              	.L21:
 290:main.c        **** 					{
 291:main.c        **** 						// GJL - add offset and max checking
 292:main.c        ****                         wave_temp = (((float) WaveformA_Temp_Buffer[i]) * ((float)wavea_gain)/255.0
 464              		.loc 1 292 0
 465 02c0 BB8C     		ldrh	r3, [r7, #36]
 466 02c2 A54A     		ldr	r2, .L124+8
 467 02c4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 468 02c6 1846     		mov	r0, r3
 469 02c8 FFF7FEFF 		bl	__aeabi_ui2f
 470 02cc 0446     		mov	r4, r0
 471 02ce A34B     		ldr	r3, .L124+12
 472 02d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 473 02d2 1846     		mov	r0, r3
 474 02d4 FFF7FEFF 		bl	__aeabi_ui2f
 475 02d8 0346     		mov	r3, r0
 476 02da 1946     		mov	r1, r3
 477 02dc 2046     		mov	r0, r4
 478 02de FFF7FEFF 		bl	__aeabi_fmul
 479 02e2 0346     		mov	r3, r0
 480 02e4 1846     		mov	r0, r3
 481 02e6 FFF7FEFF 		bl	__aeabi_f2d
 482 02ea 99A3     		adr	r3, .L124
 483 02ec D3E90023 		ldrd	r2, [r3]
 484 02f0 FFF7FEFF 		bl	__aeabi_ddiv
 485 02f4 0346     		mov	r3, r0
 486 02f6 0C46     		mov	r4, r1
 487 02f8 2546     		mov	r5, r4
 488 02fa 1C46     		mov	r4, r3
 489 02fc 984B     		ldr	r3, .L124+16
 490 02fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 491 0300 1846     		mov	r0, r3
 492 0302 FFF7FEFF 		bl	__aeabi_ui2f
 493 0306 0346     		mov	r3, r0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 15


 494 0308 1846     		mov	r0, r3
 495 030a FFF7FEFF 		bl	__aeabi_f2d
 496 030e 0246     		mov	r2, r0
 497 0310 0B46     		mov	r3, r1
 498 0312 2046     		mov	r0, r4
 499 0314 2946     		mov	r1, r5
 500 0316 FFF7FEFF 		bl	__aeabi_dadd
 501 031a 0346     		mov	r3, r0
 502 031c 0C46     		mov	r4, r1
 503 031e 1846     		mov	r0, r3
 504 0320 2146     		mov	r1, r4
 505 0322 FFF7FEFF 		bl	__aeabi_d2f
 506 0326 0346     		mov	r3, r0
 507 0328 FB61     		str	r3, [r7, #28]	@ float
 293:main.c        ****                         if(wave_temp > 255.0)
 508              		.loc 1 293 0
 509 032a 8E49     		ldr	r1, .L124+20
 510 032c F869     		ldr	r0, [r7, #28]	@ float
 511 032e FFF7FEFF 		bl	__aeabi_fcmpgt
 512 0332 0346     		mov	r3, r0
 513 0334 002B     		cmp	r3, #0
 514 0336 01D0     		beq	.L19
 294:main.c        ****                         {
 295:main.c        ****                             wave_temp = 255.0;
 515              		.loc 1 295 0
 516 0338 8A4B     		ldr	r3, .L124+20
 517 033a FB61     		str	r3, [r7, #28]	@ float
 518              	.L19:
 296:main.c        ****                         }
 297:main.c        ****                         WaveformA_Buffer[i] = (uint8) wave_temp;
 519              		.loc 1 297 0 discriminator 2
 520 033c BC8C     		ldrh	r4, [r7, #36]
 521 033e F869     		ldr	r0, [r7, #28]	@ float
 522 0340 FFF7FEFF 		bl	__aeabi_f2uiz
 523 0344 0346     		mov	r3, r0
 524 0346 DAB2     		uxtb	r2, r3
 525 0348 874B     		ldr	r3, .L124+24
 526 034a 1A55     		strb	r2, [r3, r4]
 289:main.c        **** 					{
 527              		.loc 1 289 0 discriminator 2
 528 034c BB8C     		ldrh	r3, [r7, #36]
 529 034e 0133     		adds	r3, r3, #1
 530 0350 BB84     		strh	r3, [r7, #36]	@ movhi
 531              	.L18:
 289:main.c        **** 					{
 532              		.loc 1 289 0 is_stmt 0 discriminator 1
 533 0352 BB8C     		ldrh	r3, [r7, #36]
 534 0354 B3F5006F 		cmp	r3, #2048
 535 0358 B2D3     		bcc	.L21
 536 035a 00F01CBF 		b	.L6
 537              	.L17:
 298:main.c        **** 					}   
 299:main.c        **** 				}
 300:main.c        **** 				else if(*psz == 'A') // Upper Case for AWG A
 538              		.loc 1 300 0 is_stmt 1
 539 035e BB69     		ldr	r3, [r7, #24]
 540 0360 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 16


 541 0362 412B     		cmp	r3, #65
 542 0364 60D1     		bne	.L22
 301:main.c        **** 				{
 302:main.c        **** 					// set the waveform amplitude
 303:main.c        **** 					// W A A0, where A0 is the a bit amplitude, 0 = 0%, 255 = 100%
 304:main.c        **** 					// program the waveform amplitude by copying it into the array that the waveform generator use
 305:main.c        **** 					// but scale it during the copy
 306:main.c        **** 					
 307:main.c        **** 					psz = strtok(0, " ");
 543              		.loc 1 307 0
 544 0366 8149     		ldr	r1, .L124+28
 545 0368 0020     		movs	r0, #0
 546 036a FFF7FEFF 		bl	strtok
 547 036e B861     		str	r0, [r7, #24]
 308:main.c        **** 					sscanf(psz,"%hu", &avar);
 548              		.loc 1 308 0
 549 0370 3B1D     		adds	r3, r7, #4
 550 0372 1A46     		mov	r2, r3
 551 0374 7E49     		ldr	r1, .L124+32
 552 0376 B869     		ldr	r0, [r7, #24]
 553 0378 FFF7FEFF 		bl	sscanf
 309:main.c        **** 					
 310:main.c        **** 					wavea_gain = avar;
 554              		.loc 1 310 0
 555 037c BB88     		ldrh	r3, [r7, #4]
 556 037e DAB2     		uxtb	r2, r3
 557 0380 764B     		ldr	r3, .L124+12
 558 0382 1A70     		strb	r2, [r3]
 311:main.c        **** 					
 312:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 559              		.loc 1 312 0
 560 0384 0023     		movs	r3, #0
 561 0386 BB84     		strh	r3, [r7, #36]	@ movhi
 562 0388 48E0     		b	.L23
 563              	.L26:
 313:main.c        **** 					{
 314:main.c        **** 						// Add offset and max checking
 315:main.c        ****                         wave_temp = (((float) WaveformA_Temp_Buffer[i]) * ((float)wavea_gain)/255.0
 564              		.loc 1 315 0
 565 038a BB8C     		ldrh	r3, [r7, #36]
 566 038c 724A     		ldr	r2, .L124+8
 567 038e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 568 0390 1846     		mov	r0, r3
 569 0392 FFF7FEFF 		bl	__aeabi_ui2f
 570 0396 0446     		mov	r4, r0
 571 0398 704B     		ldr	r3, .L124+12
 572 039a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 573 039c 1846     		mov	r0, r3
 574 039e FFF7FEFF 		bl	__aeabi_ui2f
 575 03a2 0346     		mov	r3, r0
 576 03a4 1946     		mov	r1, r3
 577 03a6 2046     		mov	r0, r4
 578 03a8 FFF7FEFF 		bl	__aeabi_fmul
 579 03ac 0346     		mov	r3, r0
 580 03ae 1846     		mov	r0, r3
 581 03b0 FFF7FEFF 		bl	__aeabi_f2d
 582 03b4 66A3     		adr	r3, .L124
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 17


 583 03b6 D3E90023 		ldrd	r2, [r3]
 584 03ba FFF7FEFF 		bl	__aeabi_ddiv
 585 03be 0346     		mov	r3, r0
 586 03c0 0C46     		mov	r4, r1
 587 03c2 2546     		mov	r5, r4
 588 03c4 1C46     		mov	r4, r3
 589 03c6 664B     		ldr	r3, .L124+16
 590 03c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 591 03ca 1846     		mov	r0, r3
 592 03cc FFF7FEFF 		bl	__aeabi_ui2f
 593 03d0 0346     		mov	r3, r0
 594 03d2 1846     		mov	r0, r3
 595 03d4 FFF7FEFF 		bl	__aeabi_f2d
 596 03d8 0246     		mov	r2, r0
 597 03da 0B46     		mov	r3, r1
 598 03dc 2046     		mov	r0, r4
 599 03de 2946     		mov	r1, r5
 600 03e0 FFF7FEFF 		bl	__aeabi_dadd
 601 03e4 0346     		mov	r3, r0
 602 03e6 0C46     		mov	r4, r1
 603 03e8 1846     		mov	r0, r3
 604 03ea 2146     		mov	r1, r4
 605 03ec FFF7FEFF 		bl	__aeabi_d2f
 606 03f0 0346     		mov	r3, r0
 607 03f2 FB61     		str	r3, [r7, #28]	@ float
 316:main.c        ****                         if(wave_temp > 255.0)
 608              		.loc 1 316 0
 609 03f4 5B49     		ldr	r1, .L124+20
 610 03f6 F869     		ldr	r0, [r7, #28]	@ float
 611 03f8 FFF7FEFF 		bl	__aeabi_fcmpgt
 612 03fc 0346     		mov	r3, r0
 613 03fe 002B     		cmp	r3, #0
 614 0400 01D0     		beq	.L24
 317:main.c        ****                         {
 318:main.c        ****                             wave_temp = 255.0;
 615              		.loc 1 318 0
 616 0402 584B     		ldr	r3, .L124+20
 617 0404 FB61     		str	r3, [r7, #28]	@ float
 618              	.L24:
 319:main.c        ****                         }
 320:main.c        ****                         WaveformA_Buffer[i] = (uint8) wave_temp;
 619              		.loc 1 320 0 discriminator 2
 620 0406 BC8C     		ldrh	r4, [r7, #36]
 621 0408 F869     		ldr	r0, [r7, #28]	@ float
 622 040a FFF7FEFF 		bl	__aeabi_f2uiz
 623 040e 0346     		mov	r3, r0
 624 0410 DAB2     		uxtb	r2, r3
 625 0412 554B     		ldr	r3, .L124+24
 626 0414 1A55     		strb	r2, [r3, r4]
 312:main.c        **** 					{
 627              		.loc 1 312 0 discriminator 2
 628 0416 BB8C     		ldrh	r3, [r7, #36]
 629 0418 0133     		adds	r3, r3, #1
 630 041a BB84     		strh	r3, [r7, #36]	@ movhi
 631              	.L23:
 312:main.c        **** 					{
 632              		.loc 1 312 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 18


 633 041c BB8C     		ldrh	r3, [r7, #36]
 634 041e B3F5006F 		cmp	r3, #2048
 635 0422 B2D3     		bcc	.L26
 636 0424 00F0B7BE 		b	.L6
 637              	.L22:
 321:main.c        **** 					}              
 322:main.c        ****                     
 323:main.c        **** 				}
 324:main.c        **** 				// Add offset functionality
 325:main.c        ****                 else if(*psz == 'O') // Upper Case for AWG A
 638              		.loc 1 325 0 is_stmt 1
 639 0428 BB69     		ldr	r3, [r7, #24]
 640 042a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 641 042c 4F2B     		cmp	r3, #79
 642 042e 60D1     		bne	.L27
 326:main.c        ****                 {
 327:main.c        ****                     // set waveform offset
 328:main.c        ****                     // W O O0 where O0 is the offset - 0 = 0%, 255 = 100%
 329:main.c        ****                     // program teh offset by copying it into the array that the waveform generator 
 330:main.c        ****                     // but adjust the values upwards during the copy
 331:main.c        ****                     
 332:main.c        ****                     psz = strtok(0, " ");
 643              		.loc 1 332 0
 644 0430 4E49     		ldr	r1, .L124+28
 645 0432 0020     		movs	r0, #0
 646 0434 FFF7FEFF 		bl	strtok
 647 0438 B861     		str	r0, [r7, #24]
 333:main.c        **** 					sscanf(psz,"%hu", &avar);
 648              		.loc 1 333 0
 649 043a 3B1D     		adds	r3, r7, #4
 650 043c 1A46     		mov	r2, r3
 651 043e 4C49     		ldr	r1, .L124+32
 652 0440 B869     		ldr	r0, [r7, #24]
 653 0442 FFF7FEFF 		bl	sscanf
 334:main.c        **** 					
 335:main.c        **** 					wavea_offset = avar;
 654              		.loc 1 335 0
 655 0446 BB88     		ldrh	r3, [r7, #4]
 656 0448 DAB2     		uxtb	r2, r3
 657 044a 454B     		ldr	r3, .L124+16
 658 044c 1A70     		strb	r2, [r3]
 336:main.c        **** 					
 337:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 659              		.loc 1 337 0
 660 044e 0023     		movs	r3, #0
 661 0450 BB84     		strh	r3, [r7, #36]	@ movhi
 662 0452 48E0     		b	.L28
 663              	.L31:
 338:main.c        **** 					{
 339:main.c        **** 						// Add offset
 340:main.c        ****                         wave_temp = (((float) WaveformA_Temp_Buffer[i]) * ((float)wavea_gain)/255.0
 664              		.loc 1 340 0
 665 0454 BB8C     		ldrh	r3, [r7, #36]
 666 0456 404A     		ldr	r2, .L124+8
 667 0458 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 668 045a 1846     		mov	r0, r3
 669 045c FFF7FEFF 		bl	__aeabi_ui2f
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 19


 670 0460 0446     		mov	r4, r0
 671 0462 3E4B     		ldr	r3, .L124+12
 672 0464 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 673 0466 1846     		mov	r0, r3
 674 0468 FFF7FEFF 		bl	__aeabi_ui2f
 675 046c 0346     		mov	r3, r0
 676 046e 1946     		mov	r1, r3
 677 0470 2046     		mov	r0, r4
 678 0472 FFF7FEFF 		bl	__aeabi_fmul
 679 0476 0346     		mov	r3, r0
 680 0478 1846     		mov	r0, r3
 681 047a FFF7FEFF 		bl	__aeabi_f2d
 682 047e 34A3     		adr	r3, .L124
 683 0480 D3E90023 		ldrd	r2, [r3]
 684 0484 FFF7FEFF 		bl	__aeabi_ddiv
 685 0488 0346     		mov	r3, r0
 686 048a 0C46     		mov	r4, r1
 687 048c 2546     		mov	r5, r4
 688 048e 1C46     		mov	r4, r3
 689 0490 334B     		ldr	r3, .L124+16
 690 0492 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 691 0494 1846     		mov	r0, r3
 692 0496 FFF7FEFF 		bl	__aeabi_ui2f
 693 049a 0346     		mov	r3, r0
 694 049c 1846     		mov	r0, r3
 695 049e FFF7FEFF 		bl	__aeabi_f2d
 696 04a2 0246     		mov	r2, r0
 697 04a4 0B46     		mov	r3, r1
 698 04a6 2046     		mov	r0, r4
 699 04a8 2946     		mov	r1, r5
 700 04aa FFF7FEFF 		bl	__aeabi_dadd
 701 04ae 0346     		mov	r3, r0
 702 04b0 0C46     		mov	r4, r1
 703 04b2 1846     		mov	r0, r3
 704 04b4 2146     		mov	r1, r4
 705 04b6 FFF7FEFF 		bl	__aeabi_d2f
 706 04ba 0346     		mov	r3, r0
 707 04bc FB61     		str	r3, [r7, #28]	@ float
 341:main.c        ****                         if(wave_temp > 255.0)
 708              		.loc 1 341 0
 709 04be 2949     		ldr	r1, .L124+20
 710 04c0 F869     		ldr	r0, [r7, #28]	@ float
 711 04c2 FFF7FEFF 		bl	__aeabi_fcmpgt
 712 04c6 0346     		mov	r3, r0
 713 04c8 002B     		cmp	r3, #0
 714 04ca 01D0     		beq	.L29
 342:main.c        ****                         {
 343:main.c        ****                             wave_temp = 255.0;
 715              		.loc 1 343 0
 716 04cc 254B     		ldr	r3, .L124+20
 717 04ce FB61     		str	r3, [r7, #28]	@ float
 718              	.L29:
 344:main.c        ****                         }
 345:main.c        ****                         WaveformA_Buffer[i] = (uint8) wave_temp;
 719              		.loc 1 345 0 discriminator 2
 720 04d0 BC8C     		ldrh	r4, [r7, #36]
 721 04d2 F869     		ldr	r0, [r7, #28]	@ float
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 20


 722 04d4 FFF7FEFF 		bl	__aeabi_f2uiz
 723 04d8 0346     		mov	r3, r0
 724 04da DAB2     		uxtb	r2, r3
 725 04dc 224B     		ldr	r3, .L124+24
 726 04de 1A55     		strb	r2, [r3, r4]
 337:main.c        **** 					{
 727              		.loc 1 337 0 discriminator 2
 728 04e0 BB8C     		ldrh	r3, [r7, #36]
 729 04e2 0133     		adds	r3, r3, #1
 730 04e4 BB84     		strh	r3, [r7, #36]	@ movhi
 731              	.L28:
 337:main.c        **** 					{
 732              		.loc 1 337 0 is_stmt 0 discriminator 1
 733 04e6 BB8C     		ldrh	r3, [r7, #36]
 734 04e8 B3F5006F 		cmp	r3, #2048
 735 04ec B2D3     		bcc	.L31
 736 04ee 00F052BE 		b	.L6
 737              	.L27:
 346:main.c        **** 					}              
 347:main.c        ****                 }
 348:main.c        ****                 else if(*psz == 'W') // Upper Case for AWG A
 738              		.loc 1 348 0 is_stmt 1
 739 04f2 BB69     		ldr	r3, [r7, #24]
 740 04f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 741 04f6 572B     		cmp	r3, #87
 742 04f8 10D1     		bne	.L32
 349:main.c        **** 				{
 350:main.c        **** 					// select the waveform output
 351:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEA_SELECT_MASK);
 743              		.loc 1 351 0
 744 04fa FFF7FEFF 		bl	Wave_Control_Read
 745 04fe 0346     		mov	r3, r0
 746 0500 23F00103 		bic	r3, r3, #1
 747 0504 DBB2     		uxtb	r3, r3
 748 0506 1846     		mov	r0, r3
 749 0508 FFF7FEFF 		bl	Wave_Control_Write
 352:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 750              		.loc 1 352 0
 751 050c FFF7FEFF 		bl	Wave_Control_Read
 752 0510 0346     		mov	r3, r0
 753 0512 1846     		mov	r0, r3
 754 0514 FFF7FEFF 		bl	Wave_Control_Write
 755 0518 00F03DBE 		b	.L6
 756              	.L32:
 353:main.c        **** 				}
 354:main.c        **** 				else if(*psz == 'N') // Upper Case for AWG A
 757              		.loc 1 354 0
 758 051c BB69     		ldr	r3, [r7, #24]
 759 051e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 760 0520 4E2B     		cmp	r3, #78
 761 0522 27D1     		bne	.L33
 355:main.c        **** 				{
 356:main.c        **** 					// select the noise output
 357:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEA_SELECT_MASK);
 762              		.loc 1 357 0
 763 0524 FFF7FEFF 		bl	Wave_Control_Read
 764 0528 0346     		mov	r3, r0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 21


 765 052a 23F00103 		bic	r3, r3, #1
 766 052e DBB2     		uxtb	r3, r3
 767 0530 1846     		mov	r0, r3
 768 0532 FFF7FEFF 		bl	Wave_Control_Write
 358:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVEA_SELECT_NOISE);
 769              		.loc 1 358 0
 770 0536 FFF7FEFF 		bl	Wave_Control_Read
 771 053a 0346     		mov	r3, r0
 772 053c 43F00103 		orr	r3, r3, #1
 773 0540 DBB2     		uxtb	r3, r3
 774 0542 1846     		mov	r0, r3
 775 0544 FFF7FEFF 		bl	Wave_Control_Write
 776 0548 00F025BE 		b	.L6
 777              	.L125:
 778 054c AFF30080 		.align	3
 779              	.L124:
 780 0550 00000000 		.word	0
 781 0554 00E06F40 		.word	1081073664
 782 0558 00000000 		.word	WaveformA_Temp_Buffer
 783 055c 00000000 		.word	wavea_gain
 784 0560 00000000 		.word	wavea_offset
 785 0564 00007F43 		.word	1132396544
 786 0568 00000000 		.word	WaveformA_Buffer
 787 056c 00000000 		.word	.LC0
 788 0570 18000000 		.word	.LC2
 789              	.L33:
 359:main.c        **** 				}
 360:main.c        **** 				else if(*psz == 'F') // Upper Case for AWG A
 790              		.loc 1 360 0
 791 0574 BB69     		ldr	r3, [r7, #24]
 792 0576 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 793 0578 462B     		cmp	r3, #70
 794 057a 7BD1     		bne	.L34
 361:main.c        **** 				{
 362:main.c        **** 					// set the frequency output of the waveform generator
 363:main.c        **** 					// best thing to have here is an actual DDS in the hardware
 364:main.c        **** 					// but to get this working, I'm just going to fake it by setting
 365:main.c        **** 					// the clock divider.  It wont work for everything, but it should be
 366:main.c        **** 					// passable.  The command is W F F3 F2 F1 F0 where Fn are 8 bit ascii
 367:main.c        **** 					// numbers that are combined into a 32 bit phase accumulator value
 368:main.c        **** 					// phase value = desired output frequency / 0.09313225746 Hz
 369:main.c        **** 					
 370:main.c        **** 					psz = strtok(0, " ");
 795              		.loc 1 370 0
 796 057c B049     		ldr	r1, .L126+16
 797 057e 0020     		movs	r0, #0
 798 0580 FFF7FEFF 		bl	strtok
 799 0584 B861     		str	r0, [r7, #24]
 371:main.c        **** 					sscanf(psz,"%hu", &avar);
 800              		.loc 1 371 0
 801 0586 3B1D     		adds	r3, r7, #4
 802 0588 1A46     		mov	r2, r3
 803 058a AE49     		ldr	r1, .L126+20
 804 058c B869     		ldr	r0, [r7, #24]
 805 058e FFF7FEFF 		bl	sscanf
 372:main.c        **** 					phase_int = ((uint32) avar)*16777216;
 806              		.loc 1 372 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 22


 807 0592 BB88     		ldrh	r3, [r7, #4]
 808 0594 1B06     		lsls	r3, r3, #24
 809 0596 3B62     		str	r3, [r7, #32]
 373:main.c        **** 					
 374:main.c        **** 					psz = strtok(0, " ");
 810              		.loc 1 374 0
 811 0598 A949     		ldr	r1, .L126+16
 812 059a 0020     		movs	r0, #0
 813 059c FFF7FEFF 		bl	strtok
 814 05a0 B861     		str	r0, [r7, #24]
 375:main.c        **** 					sscanf(psz,"%hu", &avar);
 815              		.loc 1 375 0
 816 05a2 3B1D     		adds	r3, r7, #4
 817 05a4 1A46     		mov	r2, r3
 818 05a6 A749     		ldr	r1, .L126+20
 819 05a8 B869     		ldr	r0, [r7, #24]
 820 05aa FFF7FEFF 		bl	sscanf
 376:main.c        **** 					phase_int += ((uint32) avar)*65536;
 821              		.loc 1 376 0
 822 05ae BB88     		ldrh	r3, [r7, #4]
 823 05b0 1B04     		lsls	r3, r3, #16
 824 05b2 3A6A     		ldr	r2, [r7, #32]
 825 05b4 1344     		add	r3, r3, r2
 826 05b6 3B62     		str	r3, [r7, #32]
 377:main.c        **** 					
 378:main.c        **** 					psz = strtok(0, " ");
 827              		.loc 1 378 0
 828 05b8 A149     		ldr	r1, .L126+16
 829 05ba 0020     		movs	r0, #0
 830 05bc FFF7FEFF 		bl	strtok
 831 05c0 B861     		str	r0, [r7, #24]
 379:main.c        **** 					sscanf(psz,"%hu", &avar);
 832              		.loc 1 379 0
 833 05c2 3B1D     		adds	r3, r7, #4
 834 05c4 1A46     		mov	r2, r3
 835 05c6 9F49     		ldr	r1, .L126+20
 836 05c8 B869     		ldr	r0, [r7, #24]
 837 05ca FFF7FEFF 		bl	sscanf
 380:main.c        **** 					phase_int += ((uint32) avar)*256;
 838              		.loc 1 380 0
 839 05ce BB88     		ldrh	r3, [r7, #4]
 840 05d0 1B02     		lsls	r3, r3, #8
 841 05d2 3A6A     		ldr	r2, [r7, #32]
 842 05d4 1344     		add	r3, r3, r2
 843 05d6 3B62     		str	r3, [r7, #32]
 381:main.c        **** 					
 382:main.c        **** 					psz = strtok(0, " ");
 844              		.loc 1 382 0
 845 05d8 9949     		ldr	r1, .L126+16
 846 05da 0020     		movs	r0, #0
 847 05dc FFF7FEFF 		bl	strtok
 848 05e0 B861     		str	r0, [r7, #24]
 383:main.c        **** 					sscanf(psz,"%hu", &avar);
 849              		.loc 1 383 0
 850 05e2 3B1D     		adds	r3, r7, #4
 851 05e4 1A46     		mov	r2, r3
 852 05e6 9749     		ldr	r1, .L126+20
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 23


 853 05e8 B869     		ldr	r0, [r7, #24]
 854 05ea FFF7FEFF 		bl	sscanf
 384:main.c        **** 					phase_int += ((uint32) avar);
 855              		.loc 1 384 0
 856 05ee BB88     		ldrh	r3, [r7, #4]
 857 05f0 1A46     		mov	r2, r3
 858 05f2 3B6A     		ldr	r3, [r7, #32]
 859 05f4 1344     		add	r3, r3, r2
 860 05f6 3B62     		str	r3, [r7, #32]
 385:main.c        **** 					
 386:main.c        **** 					freq = ((float) phase_int)*.09313225746;
 861              		.loc 1 386 0
 862 05f8 386A     		ldr	r0, [r7, #32]
 863 05fa FFF7FEFF 		bl	__aeabi_ui2f
 864 05fe 0346     		mov	r3, r0
 865 0600 1846     		mov	r0, r3
 866 0602 FFF7FEFF 		bl	__aeabi_f2d
 867 0606 8AA3     		adr	r3, .L126
 868 0608 D3E90023 		ldrd	r2, [r3]
 869 060c FFF7FEFF 		bl	__aeabi_dmul
 870 0610 0346     		mov	r3, r0
 871 0612 0C46     		mov	r4, r1
 872 0614 1846     		mov	r0, r3
 873 0616 2146     		mov	r1, r4
 874 0618 FFF7FEFF 		bl	__aeabi_d2f
 875 061c 0346     		mov	r3, r0
 876 061e FB60     		str	r3, [r7, #12]	@ float
 387:main.c        **** 					
 388:main.c        **** 					// calculate the clock divider
 389:main.c        **** 					phase_int = (int32) (36000000.0/((float) WAVEFORM_BUFFER_SIZE))/freq;
 877              		.loc 1 389 0
 878 0620 F968     		ldr	r1, [r7, #12]	@ float
 879 0622 8948     		ldr	r0, .L126+24
 880 0624 FFF7FEFF 		bl	__aeabi_fdiv
 881 0628 0346     		mov	r3, r0
 882 062a 1846     		mov	r0, r3
 883 062c FFF7FEFF 		bl	__aeabi_f2uiz
 884 0630 0346     		mov	r3, r0
 885 0632 3B62     		str	r3, [r7, #32]
 390:main.c        **** 					
 391:main.c        **** 					if(phase_int >= 65535)
 886              		.loc 1 391 0
 887 0634 3B6A     		ldr	r3, [r7, #32]
 888 0636 4FF6FE72 		movw	r2, #65534
 889 063a 9342     		cmp	r3, r2
 890 063c 03D9     		bls	.L35
 392:main.c        **** 					{
 393:main.c        **** 						phase_int = 65535;
 891              		.loc 1 393 0
 892 063e 4FF6FF73 		movw	r3, #65535
 893 0642 3B62     		str	r3, [r7, #32]
 894 0644 04E0     		b	.L36
 895              	.L35:
 394:main.c        **** 					}
 395:main.c        **** 					else if(phase_int <= 15) // anything less than this and the DMA doesn't have time to execute
 896              		.loc 1 395 0
 897 0646 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 24


 898 0648 0F2B     		cmp	r3, #15
 899 064a 01D8     		bhi	.L36
 396:main.c        **** 					{
 397:main.c        **** 						phase_int = 15;
 900              		.loc 1 397 0
 901 064c 0F23     		movs	r3, #15
 902 064e 3B62     		str	r3, [r7, #32]
 903              	.L36:
 398:main.c        **** 					}
 399:main.c        **** 					
 400:main.c        **** 					WaveA_Clock_SetDividerValue((uint16) phase_int);
 904              		.loc 1 400 0
 905 0650 3B6A     		ldr	r3, [r7, #32]
 906 0652 9BB2     		uxth	r3, r3
 907 0654 013B     		subs	r3, r3, #1
 908 0656 9BB2     		uxth	r3, r3
 909 0658 0121     		movs	r1, #1
 910 065a 1846     		mov	r0, r3
 911 065c FFF7FEFF 		bl	WaveA_Clock_SetDividerRegister
 401:main.c        ****                     NoiseA_Clock_SetDividerValue((uint16) phase_int);
 912              		.loc 1 401 0
 913 0660 3B6A     		ldr	r3, [r7, #32]
 914 0662 9BB2     		uxth	r3, r3
 915 0664 013B     		subs	r3, r3, #1
 916 0666 9BB2     		uxth	r3, r3
 917 0668 0121     		movs	r1, #1
 918 066a 1846     		mov	r0, r3
 919 066c FFF7FEFF 		bl	NoiseA_Clock_SetDividerRegister
 920 0670 00F091BD 		b	.L6
 921              	.L34:
 402:main.c        **** 					
 403:main.c        **** 				}
 404:main.c        ****                 else if(*psz == 'L') // Set AWG Buffer Length Upper Case for AWG A
 922              		.loc 1 404 0
 923 0674 BB69     		ldr	r3, [r7, #24]
 924 0676 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 925 0678 4C2B     		cmp	r3, #76
 926 067a 23D1     		bne	.L37
 405:main.c        ****                 {
 406:main.c        ****                     psz = strtok(0, " ");
 927              		.loc 1 406 0
 928 067c 7049     		ldr	r1, .L126+16
 929 067e 0020     		movs	r0, #0
 930 0680 FFF7FEFF 		bl	strtok
 931 0684 B861     		str	r0, [r7, #24]
 407:main.c        **** 					sscanf(psz,"%hu", &avar); // Upper Byte
 932              		.loc 1 407 0
 933 0686 3B1D     		adds	r3, r7, #4
 934 0688 1A46     		mov	r2, r3
 935 068a 6E49     		ldr	r1, .L126+20
 936 068c B869     		ldr	r0, [r7, #24]
 937 068e FFF7FEFF 		bl	sscanf
 408:main.c        ****                     ulen = ((uint32) avar)*256;
 938              		.loc 1 408 0
 939 0692 BB88     		ldrh	r3, [r7, #4]
 940 0694 1B02     		lsls	r3, r3, #8
 941 0696 7B81     		strh	r3, [r7, #10]	@ movhi
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 25


 409:main.c        **** 					//
 410:main.c        **** 					psz = strtok(0, " ");
 942              		.loc 1 410 0
 943 0698 6949     		ldr	r1, .L126+16
 944 069a 0020     		movs	r0, #0
 945 069c FFF7FEFF 		bl	strtok
 946 06a0 B861     		str	r0, [r7, #24]
 411:main.c        **** 					sscanf(psz,"%hu", &avar); // Lower Byte
 947              		.loc 1 411 0
 948 06a2 3B1D     		adds	r3, r7, #4
 949 06a4 1A46     		mov	r2, r3
 950 06a6 6749     		ldr	r1, .L126+20
 951 06a8 B869     		ldr	r0, [r7, #24]
 952 06aa FFF7FEFF 		bl	sscanf
 412:main.c        ****                     ulen = ulen + avar;
 953              		.loc 1 412 0
 954 06ae BA88     		ldrh	r2, [r7, #4]
 955 06b0 7B89     		ldrh	r3, [r7, #10]	@ movhi
 956 06b2 1344     		add	r3, r3, r2
 957 06b4 7B81     		strh	r3, [r7, #10]	@ movhi
 413:main.c        ****                     //got the Length
 414:main.c        ****                     WaveA_DAC_Wave1Setup(&WaveformA_Buffer[0], ulen);
 958              		.loc 1 414 0
 959 06b6 7B89     		ldrh	r3, [r7, #10]
 960 06b8 1946     		mov	r1, r3
 961 06ba 6448     		ldr	r0, .L126+28
 962 06bc FFF7FEFF 		bl	WaveA_DAC_Wave1Setup
 963 06c0 00F069BD 		b	.L6
 964              	.L37:
 415:main.c        ****                 }
 416:main.c        ****                 else if(*psz == 'l') // Set AWG Buffer Length Lower Case for AWG B
 965              		.loc 1 416 0
 966 06c4 BB69     		ldr	r3, [r7, #24]
 967 06c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 968 06c8 6C2B     		cmp	r3, #108
 969 06ca 23D1     		bne	.L38
 417:main.c        ****                 {
 418:main.c        ****                     psz = strtok(0, " ");
 970              		.loc 1 418 0
 971 06cc 5C49     		ldr	r1, .L126+16
 972 06ce 0020     		movs	r0, #0
 973 06d0 FFF7FEFF 		bl	strtok
 974 06d4 B861     		str	r0, [r7, #24]
 419:main.c        **** 					sscanf(psz,"%hu", &avar); // Upper Byte
 975              		.loc 1 419 0
 976 06d6 3B1D     		adds	r3, r7, #4
 977 06d8 1A46     		mov	r2, r3
 978 06da 5A49     		ldr	r1, .L126+20
 979 06dc B869     		ldr	r0, [r7, #24]
 980 06de FFF7FEFF 		bl	sscanf
 420:main.c        ****                     ulen = ((uint32) avar)*256;
 981              		.loc 1 420 0
 982 06e2 BB88     		ldrh	r3, [r7, #4]
 983 06e4 1B02     		lsls	r3, r3, #8
 984 06e6 7B81     		strh	r3, [r7, #10]	@ movhi
 421:main.c        **** 					//
 422:main.c        **** 					psz = strtok(0, " ");
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 26


 985              		.loc 1 422 0
 986 06e8 5549     		ldr	r1, .L126+16
 987 06ea 0020     		movs	r0, #0
 988 06ec FFF7FEFF 		bl	strtok
 989 06f0 B861     		str	r0, [r7, #24]
 423:main.c        **** 					sscanf(psz,"%hu", &avar); // Lower Byte
 990              		.loc 1 423 0
 991 06f2 3B1D     		adds	r3, r7, #4
 992 06f4 1A46     		mov	r2, r3
 993 06f6 5349     		ldr	r1, .L126+20
 994 06f8 B869     		ldr	r0, [r7, #24]
 995 06fa FFF7FEFF 		bl	sscanf
 424:main.c        ****                     ulen = ulen + avar;
 996              		.loc 1 424 0
 997 06fe BA88     		ldrh	r2, [r7, #4]
 998 0700 7B89     		ldrh	r3, [r7, #10]	@ movhi
 999 0702 1344     		add	r3, r3, r2
 1000 0704 7B81     		strh	r3, [r7, #10]	@ movhi
 425:main.c        ****                     //got the Length
 426:main.c        ****                     WaveB_DAC_Wave1Setup(&WaveformB_Buffer[0], ulen);
 1001              		.loc 1 426 0
 1002 0706 7B89     		ldrh	r3, [r7, #10]
 1003 0708 1946     		mov	r1, r3
 1004 070a 5148     		ldr	r0, .L126+32
 1005 070c FFF7FEFF 		bl	WaveB_DAC_Wave1Setup
 1006 0710 00F041BD 		b	.L6
 1007              	.L38:
 427:main.c        ****                 }
 428:main.c        **** 				else if(*psz == 's') // Lower Case for AWG B
 1008              		.loc 1 428 0
 1009 0714 BB69     		ldr	r3, [r7, #24]
 1010 0716 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1011 0718 732B     		cmp	r3, #115
 1012 071a 31D1     		bne	.L39
 429:main.c        **** 				{
 430:main.c        **** 					// sample data into the buffer
 431:main.c        **** 					// command is W s H_ADDR L_ADDR DATA
 432:main.c        **** 					// ADDR is the 16 bits
 433:main.c        **** 					// DATA is the waveform amplitude 0 - 255
 434:main.c        **** 					psz = strtok(0, " ");
 1013              		.loc 1 434 0
 1014 071c 4849     		ldr	r1, .L126+16
 1015 071e 0020     		movs	r0, #0
 1016 0720 FFF7FEFF 		bl	strtok
 1017 0724 B861     		str	r0, [r7, #24]
 435:main.c        **** 					sscanf(psz,"%hu", &avar);
 1018              		.loc 1 435 0
 1019 0726 3B1D     		adds	r3, r7, #4
 1020 0728 1A46     		mov	r2, r3
 1021 072a 4649     		ldr	r1, .L126+20
 1022 072c B869     		ldr	r0, [r7, #24]
 1023 072e FFF7FEFF 		bl	sscanf
 436:main.c        ****                     uaddr = ((uint32) avar)*256;
 1024              		.loc 1 436 0
 1025 0732 BB88     		ldrh	r3, [r7, #4]
 1026 0734 1B02     		lsls	r3, r3, #8
 1027 0736 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 27


 437:main.c        **** 					//bvar = avar;  // something is wacky with sscanf.  if I dont move the data into bvar, then on
 438:main.c        **** 					// if I use another variable, avar gets reset to zero!
 439:main.c        **** 					psz = strtok(0, " ");
 1028              		.loc 1 439 0
 1029 0738 4149     		ldr	r1, .L126+16
 1030 073a 0020     		movs	r0, #0
 1031 073c FFF7FEFF 		bl	strtok
 1032 0740 B861     		str	r0, [r7, #24]
 440:main.c        **** 					sscanf(psz,"%hu", &avar);
 1033              		.loc 1 440 0
 1034 0742 3B1D     		adds	r3, r7, #4
 1035 0744 1A46     		mov	r2, r3
 1036 0746 3F49     		ldr	r1, .L126+20
 1037 0748 B869     		ldr	r0, [r7, #24]
 1038 074a FFF7FEFF 		bl	sscanf
 441:main.c        ****                     uaddr = uaddr + avar;
 1039              		.loc 1 441 0
 1040 074e BB88     		ldrh	r3, [r7, #4]
 1041 0750 1A46     		mov	r2, r3
 1042 0752 3B69     		ldr	r3, [r7, #16]
 1043 0754 1344     		add	r3, r3, r2
 1044 0756 3B61     		str	r3, [r7, #16]
 442:main.c        ****                     // got the address
 443:main.c        **** 					psz = strtok(0, " ");
 1045              		.loc 1 443 0
 1046 0758 3949     		ldr	r1, .L126+16
 1047 075a 0020     		movs	r0, #0
 1048 075c FFF7FEFF 		bl	strtok
 1049 0760 B861     		str	r0, [r7, #24]
 444:main.c        **** 					sscanf(psz,"%hu", &avar);
 1050              		.loc 1 444 0
 1051 0762 3B1D     		adds	r3, r7, #4
 1052 0764 1A46     		mov	r2, r3
 1053 0766 3749     		ldr	r1, .L126+20
 1054 0768 B869     		ldr	r0, [r7, #24]
 1055 076a FFF7FEFF 		bl	sscanf
 445:main.c        **** 					// got the data
 446:main.c        **** 					// store it in the buffer
 447:main.c        **** 					WaveformB_Temp_Buffer[uaddr] = avar;
 1056              		.loc 1 447 0
 1057 076e BB88     		ldrh	r3, [r7, #4]
 1058 0770 D9B2     		uxtb	r1, r3
 1059 0772 384A     		ldr	r2, .L126+36
 1060 0774 3B69     		ldr	r3, [r7, #16]
 1061 0776 1344     		add	r3, r3, r2
 1062 0778 0A46     		mov	r2, r1
 1063 077a 1A70     		strb	r2, [r3]
 1064 077c 00F00BBD 		b	.L6
 1065              	.L39:
 448:main.c        **** 				}
 449:main.c        **** 				else if(*psz == 'p') // Lower Case for AWG B
 1066              		.loc 1 449 0
 1067 0780 BB69     		ldr	r3, [r7, #24]
 1068 0782 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1069 0784 702B     		cmp	r3, #112
 1070 0786 6DD1     		bne	.L40
 450:main.c        **** 				{
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 28


 451:main.c        **** 					// program the waveform by copying it into the array that the waveform generator uses
 452:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 1071              		.loc 1 452 0
 1072 0788 0023     		movs	r3, #0
 1073 078a BB84     		strh	r3, [r7, #36]	@ movhi
 1074 078c 48E0     		b	.L41
 1075              	.L44:
 453:main.c        **** 					{
 454:main.c        **** 						// GJL - add offset and max checking
 455:main.c        ****                         wave_temp = (((float) WaveformB_Temp_Buffer[i]) * ((float)waveb_gain)/255.0
 1076              		.loc 1 455 0
 1077 078e BB8C     		ldrh	r3, [r7, #36]
 1078 0790 304A     		ldr	r2, .L126+36
 1079 0792 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1080 0794 1846     		mov	r0, r3
 1081 0796 FFF7FEFF 		bl	__aeabi_ui2f
 1082 079a 0446     		mov	r4, r0
 1083 079c 2E4B     		ldr	r3, .L126+40
 1084 079e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1085 07a0 1846     		mov	r0, r3
 1086 07a2 FFF7FEFF 		bl	__aeabi_ui2f
 1087 07a6 0346     		mov	r3, r0
 1088 07a8 1946     		mov	r1, r3
 1089 07aa 2046     		mov	r0, r4
 1090 07ac FFF7FEFF 		bl	__aeabi_fmul
 1091 07b0 0346     		mov	r3, r0
 1092 07b2 1846     		mov	r0, r3
 1093 07b4 FFF7FEFF 		bl	__aeabi_f2d
 1094 07b8 1FA3     		adr	r3, .L126+8
 1095 07ba D3E90023 		ldrd	r2, [r3]
 1096 07be FFF7FEFF 		bl	__aeabi_ddiv
 1097 07c2 0346     		mov	r3, r0
 1098 07c4 0C46     		mov	r4, r1
 1099 07c6 2546     		mov	r5, r4
 1100 07c8 1C46     		mov	r4, r3
 1101 07ca 244B     		ldr	r3, .L126+44
 1102 07cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1103 07ce 1846     		mov	r0, r3
 1104 07d0 FFF7FEFF 		bl	__aeabi_ui2f
 1105 07d4 0346     		mov	r3, r0
 1106 07d6 1846     		mov	r0, r3
 1107 07d8 FFF7FEFF 		bl	__aeabi_f2d
 1108 07dc 0246     		mov	r2, r0
 1109 07de 0B46     		mov	r3, r1
 1110 07e0 2046     		mov	r0, r4
 1111 07e2 2946     		mov	r1, r5
 1112 07e4 FFF7FEFF 		bl	__aeabi_dadd
 1113 07e8 0346     		mov	r3, r0
 1114 07ea 0C46     		mov	r4, r1
 1115 07ec 1846     		mov	r0, r3
 1116 07ee 2146     		mov	r1, r4
 1117 07f0 FFF7FEFF 		bl	__aeabi_d2f
 1118 07f4 0346     		mov	r3, r0
 1119 07f6 FB61     		str	r3, [r7, #28]	@ float
 456:main.c        ****                         if(wave_temp > 255.0)
 1120              		.loc 1 456 0
 1121 07f8 1949     		ldr	r1, .L126+48
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 29


 1122 07fa F869     		ldr	r0, [r7, #28]	@ float
 1123 07fc FFF7FEFF 		bl	__aeabi_fcmpgt
 1124 0800 0346     		mov	r3, r0
 1125 0802 002B     		cmp	r3, #0
 1126 0804 01D0     		beq	.L42
 457:main.c        ****                         {
 458:main.c        ****                             wave_temp = 255.0;
 1127              		.loc 1 458 0
 1128 0806 164B     		ldr	r3, .L126+48
 1129 0808 FB61     		str	r3, [r7, #28]	@ float
 1130              	.L42:
 459:main.c        ****                         }
 460:main.c        ****                         WaveformB_Buffer[i] = (uint8) wave_temp;
 1131              		.loc 1 460 0 discriminator 2
 1132 080a BC8C     		ldrh	r4, [r7, #36]
 1133 080c F869     		ldr	r0, [r7, #28]	@ float
 1134 080e FFF7FEFF 		bl	__aeabi_f2uiz
 1135 0812 0346     		mov	r3, r0
 1136 0814 DAB2     		uxtb	r2, r3
 1137 0816 0E4B     		ldr	r3, .L126+32
 1138 0818 1A55     		strb	r2, [r3, r4]
 452:main.c        **** 					{
 1139              		.loc 1 452 0 discriminator 2
 1140 081a BB8C     		ldrh	r3, [r7, #36]
 1141 081c 0133     		adds	r3, r3, #1
 1142 081e BB84     		strh	r3, [r7, #36]	@ movhi
 1143              	.L41:
 452:main.c        **** 					{
 1144              		.loc 1 452 0 is_stmt 0 discriminator 1
 1145 0820 BB8C     		ldrh	r3, [r7, #36]
 1146 0822 B3F5006F 		cmp	r3, #2048
 1147 0826 B2D3     		bcc	.L44
 1148 0828 00F0B5BC 		b	.L6
 1149              	.L127:
 1150 082c AFF30080 		.align	3
 1151              	.L126:
 1152 0830 524CFEFF 		.word	-111534
 1153 0834 83D7B73F 		.word	1069012867
 1154 0838 00000000 		.word	0
 1155 083c 00E06F40 		.word	1081073664
 1156 0840 00000000 		.word	.LC0
 1157 0844 18000000 		.word	.LC2
 1158 0848 00548946 		.word	1183405056
 1159 084c 00000000 		.word	WaveformA_Buffer
 1160 0850 00000000 		.word	WaveformB_Buffer
 1161 0854 00000000 		.word	WaveformB_Temp_Buffer
 1162 0858 00000000 		.word	waveb_gain
 1163 085c 00000000 		.word	waveb_offset
 1164 0860 00007F43 		.word	1132396544
 1165              	.L40:
 461:main.c        **** 					}   
 462:main.c        **** 				}
 463:main.c        **** 				else if(*psz == 'a') // Lower Case for AWG B
 1166              		.loc 1 463 0 is_stmt 1
 1167 0864 BB69     		ldr	r3, [r7, #24]
 1168 0866 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1169 0868 612B     		cmp	r3, #97
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 30


 1170 086a 60D1     		bne	.L45
 464:main.c        **** 				{
 465:main.c        **** 					// set the waveform amplitude
 466:main.c        **** 					// W a A0, where A0 is the a bit amplitude, 0 = 0%, 255 = 100%
 467:main.c        **** 					// program the waveform amplitude by copying it into the array that the waveform generator use
 468:main.c        **** 					// but scale it during the copy
 469:main.c        **** 					
 470:main.c        **** 					psz = strtok(0, " ");
 1171              		.loc 1 470 0
 1172 086c B049     		ldr	r1, .L128+16
 1173 086e 0020     		movs	r0, #0
 1174 0870 FFF7FEFF 		bl	strtok
 1175 0874 B861     		str	r0, [r7, #24]
 471:main.c        **** 					sscanf(psz,"%hu", &avar);
 1176              		.loc 1 471 0
 1177 0876 3B1D     		adds	r3, r7, #4
 1178 0878 1A46     		mov	r2, r3
 1179 087a AE49     		ldr	r1, .L128+20
 1180 087c B869     		ldr	r0, [r7, #24]
 1181 087e FFF7FEFF 		bl	sscanf
 472:main.c        **** 					
 473:main.c        **** 					waveb_gain = avar;
 1182              		.loc 1 473 0
 1183 0882 BB88     		ldrh	r3, [r7, #4]
 1184 0884 DAB2     		uxtb	r2, r3
 1185 0886 AC4B     		ldr	r3, .L128+24
 1186 0888 1A70     		strb	r2, [r3]
 474:main.c        **** 					
 475:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 1187              		.loc 1 475 0
 1188 088a 0023     		movs	r3, #0
 1189 088c BB84     		strh	r3, [r7, #36]	@ movhi
 1190 088e 48E0     		b	.L46
 1191              	.L49:
 476:main.c        **** 					{
 477:main.c        **** 						// GJL - add offset and max checking
 478:main.c        ****                         wave_temp = (((float) WaveformB_Temp_Buffer[i]) * ((float)waveb_gain)/255.0
 1192              		.loc 1 478 0
 1193 0890 BB8C     		ldrh	r3, [r7, #36]
 1194 0892 AA4A     		ldr	r2, .L128+28
 1195 0894 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1196 0896 1846     		mov	r0, r3
 1197 0898 FFF7FEFF 		bl	__aeabi_ui2f
 1198 089c 0446     		mov	r4, r0
 1199 089e A64B     		ldr	r3, .L128+24
 1200 08a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1201 08a2 1846     		mov	r0, r3
 1202 08a4 FFF7FEFF 		bl	__aeabi_ui2f
 1203 08a8 0346     		mov	r3, r0
 1204 08aa 1946     		mov	r1, r3
 1205 08ac 2046     		mov	r0, r4
 1206 08ae FFF7FEFF 		bl	__aeabi_fmul
 1207 08b2 0346     		mov	r3, r0
 1208 08b4 1846     		mov	r0, r3
 1209 08b6 FFF7FEFF 		bl	__aeabi_f2d
 1210 08ba 99A3     		adr	r3, .L128
 1211 08bc D3E90023 		ldrd	r2, [r3]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 31


 1212 08c0 FFF7FEFF 		bl	__aeabi_ddiv
 1213 08c4 0346     		mov	r3, r0
 1214 08c6 0C46     		mov	r4, r1
 1215 08c8 2546     		mov	r5, r4
 1216 08ca 1C46     		mov	r4, r3
 1217 08cc 9C4B     		ldr	r3, .L128+32
 1218 08ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1219 08d0 1846     		mov	r0, r3
 1220 08d2 FFF7FEFF 		bl	__aeabi_ui2f
 1221 08d6 0346     		mov	r3, r0
 1222 08d8 1846     		mov	r0, r3
 1223 08da FFF7FEFF 		bl	__aeabi_f2d
 1224 08de 0246     		mov	r2, r0
 1225 08e0 0B46     		mov	r3, r1
 1226 08e2 2046     		mov	r0, r4
 1227 08e4 2946     		mov	r1, r5
 1228 08e6 FFF7FEFF 		bl	__aeabi_dadd
 1229 08ea 0346     		mov	r3, r0
 1230 08ec 0C46     		mov	r4, r1
 1231 08ee 1846     		mov	r0, r3
 1232 08f0 2146     		mov	r1, r4
 1233 08f2 FFF7FEFF 		bl	__aeabi_d2f
 1234 08f6 0346     		mov	r3, r0
 1235 08f8 FB61     		str	r3, [r7, #28]	@ float
 479:main.c        ****                         if(wave_temp > 255.0)
 1236              		.loc 1 479 0
 1237 08fa 9249     		ldr	r1, .L128+36
 1238 08fc F869     		ldr	r0, [r7, #28]	@ float
 1239 08fe FFF7FEFF 		bl	__aeabi_fcmpgt
 1240 0902 0346     		mov	r3, r0
 1241 0904 002B     		cmp	r3, #0
 1242 0906 01D0     		beq	.L47
 480:main.c        ****                         {
 481:main.c        ****                             wave_temp = 255.0;
 1243              		.loc 1 481 0
 1244 0908 8E4B     		ldr	r3, .L128+36
 1245 090a FB61     		str	r3, [r7, #28]	@ float
 1246              	.L47:
 482:main.c        ****                         }
 483:main.c        ****                         WaveformB_Buffer[i] = (uint8) wave_temp;
 1247              		.loc 1 483 0 discriminator 2
 1248 090c BC8C     		ldrh	r4, [r7, #36]
 1249 090e F869     		ldr	r0, [r7, #28]	@ float
 1250 0910 FFF7FEFF 		bl	__aeabi_f2uiz
 1251 0914 0346     		mov	r3, r0
 1252 0916 DAB2     		uxtb	r2, r3
 1253 0918 8B4B     		ldr	r3, .L128+40
 1254 091a 1A55     		strb	r2, [r3, r4]
 475:main.c        **** 					{
 1255              		.loc 1 475 0 discriminator 2
 1256 091c BB8C     		ldrh	r3, [r7, #36]
 1257 091e 0133     		adds	r3, r3, #1
 1258 0920 BB84     		strh	r3, [r7, #36]	@ movhi
 1259              	.L46:
 475:main.c        **** 					{
 1260              		.loc 1 475 0 is_stmt 0 discriminator 1
 1261 0922 BB8C     		ldrh	r3, [r7, #36]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 32


 1262 0924 B3F5006F 		cmp	r3, #2048
 1263 0928 B2D3     		bcc	.L49
 1264 092a 00F034BC 		b	.L6
 1265              	.L45:
 484:main.c        **** 					}              
 485:main.c        ****                     
 486:main.c        **** 				}
 487:main.c        **** 				// GJL - add offset functionality
 488:main.c        ****                 else if(*psz == 'o') // Lower Case for AWG B
 1266              		.loc 1 488 0 is_stmt 1
 1267 092e BB69     		ldr	r3, [r7, #24]
 1268 0930 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1269 0932 6F2B     		cmp	r3, #111
 1270 0934 5FD1     		bne	.L50
 489:main.c        ****                 {
 490:main.c        ****                     // set waveform offset
 491:main.c        ****                     // W o O0 where O0 is the offset - 0 = 0%, 255 = 100%
 492:main.c        ****                     // program teh offset by copying it into the array that the waveform generator 
 493:main.c        ****                     // but adjust the values upwards during the copy
 494:main.c        ****                     
 495:main.c        ****                     psz = strtok(0, " ");
 1271              		.loc 1 495 0
 1272 0936 7E49     		ldr	r1, .L128+16
 1273 0938 0020     		movs	r0, #0
 1274 093a FFF7FEFF 		bl	strtok
 1275 093e B861     		str	r0, [r7, #24]
 496:main.c        **** 					sscanf(psz,"%hu", &avar);
 1276              		.loc 1 496 0
 1277 0940 3B1D     		adds	r3, r7, #4
 1278 0942 1A46     		mov	r2, r3
 1279 0944 7B49     		ldr	r1, .L128+20
 1280 0946 B869     		ldr	r0, [r7, #24]
 1281 0948 FFF7FEFF 		bl	sscanf
 497:main.c        **** 					
 498:main.c        **** 					waveb_offset = avar;
 1282              		.loc 1 498 0
 1283 094c BB88     		ldrh	r3, [r7, #4]
 1284 094e DAB2     		uxtb	r2, r3
 1285 0950 7B4B     		ldr	r3, .L128+32
 1286 0952 1A70     		strb	r2, [r3]
 499:main.c        **** 					
 500:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 1287              		.loc 1 500 0
 1288 0954 0023     		movs	r3, #0
 1289 0956 BB84     		strh	r3, [r7, #36]	@ movhi
 1290 0958 48E0     		b	.L51
 1291              	.L54:
 501:main.c        **** 					{
 502:main.c        **** 						// GJL temp - add offset
 503:main.c        ****                         wave_temp = (((float) WaveformB_Temp_Buffer[i]) * ((float)waveb_gain)/255.0
 1292              		.loc 1 503 0
 1293 095a BB8C     		ldrh	r3, [r7, #36]
 1294 095c 774A     		ldr	r2, .L128+28
 1295 095e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1296 0960 1846     		mov	r0, r3
 1297 0962 FFF7FEFF 		bl	__aeabi_ui2f
 1298 0966 0446     		mov	r4, r0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 33


 1299 0968 734B     		ldr	r3, .L128+24
 1300 096a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1301 096c 1846     		mov	r0, r3
 1302 096e FFF7FEFF 		bl	__aeabi_ui2f
 1303 0972 0346     		mov	r3, r0
 1304 0974 1946     		mov	r1, r3
 1305 0976 2046     		mov	r0, r4
 1306 0978 FFF7FEFF 		bl	__aeabi_fmul
 1307 097c 0346     		mov	r3, r0
 1308 097e 1846     		mov	r0, r3
 1309 0980 FFF7FEFF 		bl	__aeabi_f2d
 1310 0984 66A3     		adr	r3, .L128
 1311 0986 D3E90023 		ldrd	r2, [r3]
 1312 098a FFF7FEFF 		bl	__aeabi_ddiv
 1313 098e 0346     		mov	r3, r0
 1314 0990 0C46     		mov	r4, r1
 1315 0992 2546     		mov	r5, r4
 1316 0994 1C46     		mov	r4, r3
 1317 0996 6A4B     		ldr	r3, .L128+32
 1318 0998 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1319 099a 1846     		mov	r0, r3
 1320 099c FFF7FEFF 		bl	__aeabi_ui2f
 1321 09a0 0346     		mov	r3, r0
 1322 09a2 1846     		mov	r0, r3
 1323 09a4 FFF7FEFF 		bl	__aeabi_f2d
 1324 09a8 0246     		mov	r2, r0
 1325 09aa 0B46     		mov	r3, r1
 1326 09ac 2046     		mov	r0, r4
 1327 09ae 2946     		mov	r1, r5
 1328 09b0 FFF7FEFF 		bl	__aeabi_dadd
 1329 09b4 0346     		mov	r3, r0
 1330 09b6 0C46     		mov	r4, r1
 1331 09b8 1846     		mov	r0, r3
 1332 09ba 2146     		mov	r1, r4
 1333 09bc FFF7FEFF 		bl	__aeabi_d2f
 1334 09c0 0346     		mov	r3, r0
 1335 09c2 FB61     		str	r3, [r7, #28]	@ float
 504:main.c        ****                         if(wave_temp > 255.0)
 1336              		.loc 1 504 0
 1337 09c4 5F49     		ldr	r1, .L128+36
 1338 09c6 F869     		ldr	r0, [r7, #28]	@ float
 1339 09c8 FFF7FEFF 		bl	__aeabi_fcmpgt
 1340 09cc 0346     		mov	r3, r0
 1341 09ce 002B     		cmp	r3, #0
 1342 09d0 01D0     		beq	.L52
 505:main.c        ****                         {
 506:main.c        ****                             wave_temp = 255.0;
 1343              		.loc 1 506 0
 1344 09d2 5C4B     		ldr	r3, .L128+36
 1345 09d4 FB61     		str	r3, [r7, #28]	@ float
 1346              	.L52:
 507:main.c        ****                         }
 508:main.c        ****                         WaveformB_Buffer[i] = (uint8) wave_temp;
 1347              		.loc 1 508 0 discriminator 2
 1348 09d6 BC8C     		ldrh	r4, [r7, #36]
 1349 09d8 F869     		ldr	r0, [r7, #28]	@ float
 1350 09da FFF7FEFF 		bl	__aeabi_f2uiz
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 34


 1351 09de 0346     		mov	r3, r0
 1352 09e0 DAB2     		uxtb	r2, r3
 1353 09e2 594B     		ldr	r3, .L128+40
 1354 09e4 1A55     		strb	r2, [r3, r4]
 500:main.c        **** 					{
 1355              		.loc 1 500 0 discriminator 2
 1356 09e6 BB8C     		ldrh	r3, [r7, #36]
 1357 09e8 0133     		adds	r3, r3, #1
 1358 09ea BB84     		strh	r3, [r7, #36]	@ movhi
 1359              	.L51:
 500:main.c        **** 					{
 1360              		.loc 1 500 0 is_stmt 0 discriminator 1
 1361 09ec BB8C     		ldrh	r3, [r7, #36]
 1362 09ee B3F5006F 		cmp	r3, #2048
 1363 09f2 B2D3     		bcc	.L54
 1364 09f4 CFE3     		b	.L6
 1365              	.L50:
 509:main.c        **** 					}              
 510:main.c        ****                 }
 511:main.c        ****                 else if(*psz == 'w') // Lower Case for AWG B
 1366              		.loc 1 511 0 is_stmt 1
 1367 09f6 BB69     		ldr	r3, [r7, #24]
 1368 09f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1369 09fa 772B     		cmp	r3, #119
 1370 09fc 0FD1     		bne	.L55
 512:main.c        **** 				{
 513:main.c        **** 					// select the waveform output
 514:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEB_SELECT_MASK);
 1371              		.loc 1 514 0
 1372 09fe FFF7FEFF 		bl	Wave_Control_Read
 1373 0a02 0346     		mov	r3, r0
 1374 0a04 23F00403 		bic	r3, r3, #4
 1375 0a08 DBB2     		uxtb	r3, r3
 1376 0a0a 1846     		mov	r0, r3
 1377 0a0c FFF7FEFF 		bl	Wave_Control_Write
 515:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 1378              		.loc 1 515 0
 1379 0a10 FFF7FEFF 		bl	Wave_Control_Read
 1380 0a14 0346     		mov	r3, r0
 1381 0a16 1846     		mov	r0, r3
 1382 0a18 FFF7FEFF 		bl	Wave_Control_Write
 1383 0a1c BBE3     		b	.L6
 1384              	.L55:
 516:main.c        **** 				}
 517:main.c        **** 				else if(*psz == 'n') // Lower Case for AWG B
 1385              		.loc 1 517 0
 1386 0a1e BB69     		ldr	r3, [r7, #24]
 1387 0a20 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1388 0a22 6E2B     		cmp	r3, #110
 1389 0a24 12D1     		bne	.L56
 518:main.c        **** 				{
 519:main.c        **** 					// select the noise output
 520:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEB_SELECT_MASK);
 1390              		.loc 1 520 0
 1391 0a26 FFF7FEFF 		bl	Wave_Control_Read
 1392 0a2a 0346     		mov	r3, r0
 1393 0a2c 23F00403 		bic	r3, r3, #4
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 35


 1394 0a30 DBB2     		uxtb	r3, r3
 1395 0a32 1846     		mov	r0, r3
 1396 0a34 FFF7FEFF 		bl	Wave_Control_Write
 521:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVEB_SELECT_NOISE);
 1397              		.loc 1 521 0
 1398 0a38 FFF7FEFF 		bl	Wave_Control_Read
 1399 0a3c 0346     		mov	r3, r0
 1400 0a3e 43F00403 		orr	r3, r3, #4
 1401 0a42 DBB2     		uxtb	r3, r3
 1402 0a44 1846     		mov	r0, r3
 1403 0a46 FFF7FEFF 		bl	Wave_Control_Write
 1404 0a4a A4E3     		b	.L6
 1405              	.L56:
 522:main.c        **** 				}
 523:main.c        **** 				else if(*psz == 'f') // Lower Case for AWG B
 1406              		.loc 1 523 0
 1407 0a4c BB69     		ldr	r3, [r7, #24]
 1408 0a4e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1409 0a50 662B     		cmp	r3, #102
 1410 0a52 40F08B80 		bne	.L57
 524:main.c        **** 				{
 525:main.c        **** 					// set the frequency output of the waveform generator
 526:main.c        **** 					// best thing to have here is an actual DDS in the hardware
 527:main.c        **** 					// but to get this working, I'm just going to fake it by setting
 528:main.c        **** 					// the clock divider.  It wont work for everything, but it should be
 529:main.c        **** 					// passable.  The command is W f F3 F2 F1 F0 where Fn are 8 bit ascii
 530:main.c        **** 					// numbers that are combined into a 32 bit phase accumulator value
 531:main.c        **** 					// phase value = desired output frequency / 0.09313225746 Hz
 532:main.c        **** 					
 533:main.c        **** 					psz = strtok(0, " ");
 1411              		.loc 1 533 0
 1412 0a56 3649     		ldr	r1, .L128+16
 1413 0a58 0020     		movs	r0, #0
 1414 0a5a FFF7FEFF 		bl	strtok
 1415 0a5e B861     		str	r0, [r7, #24]
 534:main.c        **** 					sscanf(psz,"%hu", &avar);
 1416              		.loc 1 534 0
 1417 0a60 3B1D     		adds	r3, r7, #4
 1418 0a62 1A46     		mov	r2, r3
 1419 0a64 3349     		ldr	r1, .L128+20
 1420 0a66 B869     		ldr	r0, [r7, #24]
 1421 0a68 FFF7FEFF 		bl	sscanf
 535:main.c        **** 					phase_int = ((uint32) avar)*16777216;
 1422              		.loc 1 535 0
 1423 0a6c BB88     		ldrh	r3, [r7, #4]
 1424 0a6e 1B06     		lsls	r3, r3, #24
 1425 0a70 3B62     		str	r3, [r7, #32]
 536:main.c        **** 					
 537:main.c        **** 					psz = strtok(0, " ");
 1426              		.loc 1 537 0
 1427 0a72 2F49     		ldr	r1, .L128+16
 1428 0a74 0020     		movs	r0, #0
 1429 0a76 FFF7FEFF 		bl	strtok
 1430 0a7a B861     		str	r0, [r7, #24]
 538:main.c        **** 					sscanf(psz,"%hu", &avar);
 1431              		.loc 1 538 0
 1432 0a7c 3B1D     		adds	r3, r7, #4
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 36


 1433 0a7e 1A46     		mov	r2, r3
 1434 0a80 2C49     		ldr	r1, .L128+20
 1435 0a82 B869     		ldr	r0, [r7, #24]
 1436 0a84 FFF7FEFF 		bl	sscanf
 539:main.c        **** 					phase_int += ((uint32) avar)*65536;
 1437              		.loc 1 539 0
 1438 0a88 BB88     		ldrh	r3, [r7, #4]
 1439 0a8a 1B04     		lsls	r3, r3, #16
 1440 0a8c 3A6A     		ldr	r2, [r7, #32]
 1441 0a8e 1344     		add	r3, r3, r2
 1442 0a90 3B62     		str	r3, [r7, #32]
 540:main.c        **** 					
 541:main.c        **** 					psz = strtok(0, " ");
 1443              		.loc 1 541 0
 1444 0a92 2749     		ldr	r1, .L128+16
 1445 0a94 0020     		movs	r0, #0
 1446 0a96 FFF7FEFF 		bl	strtok
 1447 0a9a B861     		str	r0, [r7, #24]
 542:main.c        **** 					sscanf(psz,"%hu", &avar);
 1448              		.loc 1 542 0
 1449 0a9c 3B1D     		adds	r3, r7, #4
 1450 0a9e 1A46     		mov	r2, r3
 1451 0aa0 2449     		ldr	r1, .L128+20
 1452 0aa2 B869     		ldr	r0, [r7, #24]
 1453 0aa4 FFF7FEFF 		bl	sscanf
 543:main.c        **** 					phase_int += ((uint32) avar)*256;
 1454              		.loc 1 543 0
 1455 0aa8 BB88     		ldrh	r3, [r7, #4]
 1456 0aaa 1B02     		lsls	r3, r3, #8
 1457 0aac 3A6A     		ldr	r2, [r7, #32]
 1458 0aae 1344     		add	r3, r3, r2
 1459 0ab0 3B62     		str	r3, [r7, #32]
 544:main.c        **** 					
 545:main.c        **** 					psz = strtok(0, " ");
 1460              		.loc 1 545 0
 1461 0ab2 1F49     		ldr	r1, .L128+16
 1462 0ab4 0020     		movs	r0, #0
 1463 0ab6 FFF7FEFF 		bl	strtok
 1464 0aba B861     		str	r0, [r7, #24]
 546:main.c        **** 					sscanf(psz,"%hu", &avar);
 1465              		.loc 1 546 0
 1466 0abc 3B1D     		adds	r3, r7, #4
 1467 0abe 1A46     		mov	r2, r3
 1468 0ac0 1C49     		ldr	r1, .L128+20
 1469 0ac2 B869     		ldr	r0, [r7, #24]
 1470 0ac4 FFF7FEFF 		bl	sscanf
 547:main.c        **** 					phase_int += ((uint32) avar);
 1471              		.loc 1 547 0
 1472 0ac8 BB88     		ldrh	r3, [r7, #4]
 1473 0aca 1A46     		mov	r2, r3
 1474 0acc 3B6A     		ldr	r3, [r7, #32]
 1475 0ace 1344     		add	r3, r3, r2
 1476 0ad0 3B62     		str	r3, [r7, #32]
 548:main.c        **** 					
 549:main.c        **** 					freq = ((float) phase_int)*.09313225746;
 1477              		.loc 1 549 0
 1478 0ad2 386A     		ldr	r0, [r7, #32]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 37


 1479 0ad4 FFF7FEFF 		bl	__aeabi_ui2f
 1480 0ad8 0346     		mov	r3, r0
 1481 0ada 1846     		mov	r0, r3
 1482 0adc FFF7FEFF 		bl	__aeabi_f2d
 1483 0ae0 11A3     		adr	r3, .L128+8
 1484 0ae2 D3E90023 		ldrd	r2, [r3]
 1485 0ae6 FFF7FEFF 		bl	__aeabi_dmul
 1486 0aea 0346     		mov	r3, r0
 1487 0aec 0C46     		mov	r4, r1
 1488 0aee 1846     		mov	r0, r3
 1489 0af0 2146     		mov	r1, r4
 1490 0af2 FFF7FEFF 		bl	__aeabi_d2f
 1491 0af6 0346     		mov	r3, r0
 1492 0af8 FB60     		str	r3, [r7, #12]	@ float
 550:main.c        **** 					
 551:main.c        **** 					// calculate the clock divider
 552:main.c        **** 					phase_int = (int32) (36000000.0/((float) WAVEFORM_BUFFER_SIZE))/freq;
 1493              		.loc 1 552 0
 1494 0afa F968     		ldr	r1, [r7, #12]	@ float
 1495 0afc 1348     		ldr	r0, .L128+44
 1496 0afe FFF7FEFF 		bl	__aeabi_fdiv
 1497 0b02 0346     		mov	r3, r0
 1498 0b04 1846     		mov	r0, r3
 1499 0b06 FFF7FEFF 		bl	__aeabi_f2uiz
 1500 0b0a 0346     		mov	r3, r0
 1501 0b0c 3B62     		str	r3, [r7, #32]
 553:main.c        **** 					
 554:main.c        **** 					if(phase_int >= 65535)
 1502              		.loc 1 554 0
 1503 0b0e 3B6A     		ldr	r3, [r7, #32]
 1504 0b10 4FF6FE72 		movw	r2, #65534
 1505 0b14 9342     		cmp	r3, r2
 1506 0b16 1BD9     		bls	.L58
 555:main.c        **** 					{
 556:main.c        **** 						phase_int = 65535;
 1507              		.loc 1 556 0
 1508 0b18 4FF6FF73 		movw	r3, #65535
 1509 0b1c 3B62     		str	r3, [r7, #32]
 1510 0b1e 1CE0     		b	.L59
 1511              	.L129:
 1512              		.align	3
 1513              	.L128:
 1514 0b20 00000000 		.word	0
 1515 0b24 00E06F40 		.word	1081073664
 1516 0b28 524CFEFF 		.word	-111534
 1517 0b2c 83D7B73F 		.word	1069012867
 1518 0b30 00000000 		.word	.LC0
 1519 0b34 18000000 		.word	.LC2
 1520 0b38 00000000 		.word	waveb_gain
 1521 0b3c 00000000 		.word	WaveformB_Temp_Buffer
 1522 0b40 00000000 		.word	waveb_offset
 1523 0b44 00007F43 		.word	1132396544
 1524 0b48 00000000 		.word	WaveformB_Buffer
 1525 0b4c 00548946 		.word	1183405056
 1526              	.L58:
 557:main.c        **** 					}
 558:main.c        **** 					else if(phase_int <= 15) // anything less than this and the DMA doesn't have time to execute
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 38


 1527              		.loc 1 558 0
 1528 0b50 3B6A     		ldr	r3, [r7, #32]
 1529 0b52 0F2B     		cmp	r3, #15
 1530 0b54 01D8     		bhi	.L59
 559:main.c        **** 					{
 560:main.c        **** 						phase_int = 15;
 1531              		.loc 1 560 0
 1532 0b56 0F23     		movs	r3, #15
 1533 0b58 3B62     		str	r3, [r7, #32]
 1534              	.L59:
 561:main.c        **** 					}
 562:main.c        **** 					
 563:main.c        **** 					WaveB_Clock_SetDividerValue((uint16) phase_int);
 1535              		.loc 1 563 0
 1536 0b5a 3B6A     		ldr	r3, [r7, #32]
 1537 0b5c 9BB2     		uxth	r3, r3
 1538 0b5e 013B     		subs	r3, r3, #1
 1539 0b60 9BB2     		uxth	r3, r3
 1540 0b62 0121     		movs	r1, #1
 1541 0b64 1846     		mov	r0, r3
 1542 0b66 FFF7FEFF 		bl	WaveB_Clock_SetDividerRegister
 1543 0b6a 14E3     		b	.L6
 1544              	.L57:
 564:main.c        ****                     // NoiseB_Clock_SetDividerValue((uint16) phase_int);
 565:main.c        **** 					
 566:main.c        **** 				}
 567:main.c        ****                 else if(*psz == 'X')
 1545              		.loc 1 567 0
 1546 0b6c BB69     		ldr	r3, [r7, #24]
 1547 0b6e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1548 0b70 582B     		cmp	r3, #88
 1549 0b72 40F01083 		bne	.L6
 568:main.c        **** 				{
 569:main.c        **** 					// set the Aux DAC level
 570:main.c        **** 					// Data comes back as a single byte representing the value to write to the DAC
 571:main.c        **** 					// W X VAL
 572:main.c        ****                     // Grab the byte value from the USB and write it to the DAC
 573:main.c        **** 					psz = strtok(0, " ");
 1550              		.loc 1 573 0
 1551 0b76 BE49     		ldr	r1, .L130
 1552 0b78 0020     		movs	r0, #0
 1553 0b7a FFF7FEFF 		bl	strtok
 1554 0b7e B861     		str	r0, [r7, #24]
 574:main.c        **** 					sscanf(psz,"%hu", &avar);
 1555              		.loc 1 574 0
 1556 0b80 3B1D     		adds	r3, r7, #4
 1557 0b82 1A46     		mov	r2, r3
 1558 0b84 BB49     		ldr	r1, .L130+4
 1559 0b86 B869     		ldr	r0, [r7, #24]
 1560 0b88 FFF7FEFF 		bl	sscanf
 575:main.c        **** 					AuxDAC_1_SetValue((uint8) avar);
 1561              		.loc 1 575 0
 1562 0b8c BB88     		ldrh	r3, [r7, #4]
 1563 0b8e DBB2     		uxtb	r3, r3
 1564 0b90 1846     		mov	r0, r3
 1565 0b92 FFF7FEFF 		bl	AuxDAC_1_SetValue
 1566 0b96 FEE2     		b	.L6
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 39


 1567              	.L14:
 576:main.c        **** 				}
 577:main.c        **** 			}
 578:main.c        **** 			else if(*psz == 'S')
 1568              		.loc 1 578 0
 1569 0b98 BB69     		ldr	r3, [r7, #24]
 1570 0b9a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1571 0b9c 532B     		cmp	r3, #83
 1572 0b9e 40F0F782 		bne	.L60
 579:main.c        **** 			{
 580:main.c        **** 				// scope commands
 581:main.c        **** 				
 582:main.c        **** 				psz = strtok(0, " ");
 1573              		.loc 1 582 0
 1574 0ba2 B349     		ldr	r1, .L130
 1575 0ba4 0020     		movs	r0, #0
 1576 0ba6 FFF7FEFF 		bl	strtok
 1577 0baa B861     		str	r0, [r7, #24]
 583:main.c        **** 				if(*psz == 'O')
 1578              		.loc 1 583 0
 1579 0bac BB69     		ldr	r3, [r7, #24]
 1580 0bae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1581 0bb0 4F2B     		cmp	r3, #79
 1582 0bb2 0FD1     		bne	.L61
 584:main.c        **** 				{
 585:main.c        **** 					// read offset from EEPROM command
 586:main.c        **** 					PutChar('O');
 1583              		.loc 1 586 0
 1584 0bb4 4F20     		movs	r0, #79
 1585 0bb6 FFF7FEFF 		bl	PutChar
 587:main.c        **** 					PutChar(128); // A
 1586              		.loc 1 587 0
 1587 0bba 8020     		movs	r0, #128
 1588 0bbc FFF7FEFF 		bl	PutChar
 588:main.c        **** 					PutChar(128); // a
 1589              		.loc 1 588 0
 1590 0bc0 8020     		movs	r0, #128
 1591 0bc2 FFF7FEFF 		bl	PutChar
 589:main.c        **** 					PutChar(128); // B
 1592              		.loc 1 589 0
 1593 0bc6 8020     		movs	r0, #128
 1594 0bc8 FFF7FEFF 		bl	PutChar
 590:main.c        **** 					PutChar(128); // b
 1595              		.loc 1 590 0
 1596 0bcc 8020     		movs	r0, #128
 1597 0bce FFF7FEFF 		bl	PutChar
 1598 0bd2 E0E2     		b	.L6
 1599              	.L61:
 591:main.c        **** 					
 592:main.c        **** 				}
 593:main.c        **** 				else if(*psz == 'T')
 1600              		.loc 1 593 0
 1601 0bd4 BB69     		ldr	r3, [r7, #24]
 1602 0bd6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1603 0bd8 542B     		cmp	r3, #84
 1604 0bda 10D1     		bne	.L63
 594:main.c        **** 				{
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 40


 595:main.c        **** 					// set the trigger level
 596:main.c        **** 					// Data comes back as a single byte representing the value to write to the DAC
 597:main.c        **** 					// S T VAL
 598:main.c        ****                     // Grab the trigger byte value from the USB and write it to the DAC
 599:main.c        **** 					psz = strtok(0, " ");
 1605              		.loc 1 599 0
 1606 0bdc A449     		ldr	r1, .L130
 1607 0bde 0020     		movs	r0, #0
 1608 0be0 FFF7FEFF 		bl	strtok
 1609 0be4 B861     		str	r0, [r7, #24]
 600:main.c        **** 					sscanf(psz,"%hu", &avar);
 1610              		.loc 1 600 0
 1611 0be6 3B1D     		adds	r3, r7, #4
 1612 0be8 1A46     		mov	r2, r3
 1613 0bea A249     		ldr	r1, .L130+4
 1614 0bec B869     		ldr	r0, [r7, #24]
 1615 0bee FFF7FEFF 		bl	sscanf
 601:main.c        **** 					Vtrigger_SetValue((uint8) avar);
 1616              		.loc 1 601 0
 1617 0bf2 BB88     		ldrh	r3, [r7, #4]
 1618 0bf4 DBB2     		uxtb	r3, r3
 1619 0bf6 1846     		mov	r0, r3
 1620 0bf8 FFF7FEFF 		bl	Vtrigger_SetValue
 1621 0bfc CBE2     		b	.L6
 1622              	.L63:
 602:main.c        **** 				}
 603:main.c        **** 				else if(*psz == 'C')
 1623              		.loc 1 603 0
 1624 0bfe BB69     		ldr	r3, [r7, #24]
 1625 0c00 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1626 0c02 432B     		cmp	r3, #67
 1627 0c04 33D1     		bne	.L64
 604:main.c        **** 				{
 605:main.c        **** 					// Post trigger buffer size
 606:main.c        **** 					// data comes back as two ascii strings, each representing an 8 bit value
 607:main.c        **** 					// S C C_HIGH C_LOW where C_HIGH and C_LOW represent a 10 bit number
 608:main.c        **** 					psz = strtok(0, " ");
 1628              		.loc 1 608 0
 1629 0c06 9A49     		ldr	r1, .L130
 1630 0c08 0020     		movs	r0, #0
 1631 0c0a FFF7FEFF 		bl	strtok
 1632 0c0e B861     		str	r0, [r7, #24]
 609:main.c        **** 					sscanf(psz,"%hu", &avar);
 1633              		.loc 1 609 0
 1634 0c10 3B1D     		adds	r3, r7, #4
 1635 0c12 1A46     		mov	r2, r3
 1636 0c14 9749     		ldr	r1, .L130+4
 1637 0c16 B869     		ldr	r0, [r7, #24]
 1638 0c18 FFF7FEFF 		bl	sscanf
 610:main.c        **** 					bvar = avar*256;
 1639              		.loc 1 610 0
 1640 0c1c BB88     		ldrh	r3, [r7, #4]
 1641 0c1e 1B02     		lsls	r3, r3, #8
 1642 0c20 FB84     		strh	r3, [r7, #38]	@ movhi
 611:main.c        **** 					
 612:main.c        **** 					psz = strtok(0, " ");
 1643              		.loc 1 612 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 41


 1644 0c22 9349     		ldr	r1, .L130
 1645 0c24 0020     		movs	r0, #0
 1646 0c26 FFF7FEFF 		bl	strtok
 1647 0c2a B861     		str	r0, [r7, #24]
 613:main.c        **** 					sscanf(psz,"%hu", &avar);
 1648              		.loc 1 613 0
 1649 0c2c 3B1D     		adds	r3, r7, #4
 1650 0c2e 1A46     		mov	r2, r3
 1651 0c30 9049     		ldr	r1, .L130+4
 1652 0c32 B869     		ldr	r0, [r7, #24]
 1653 0c34 FFF7FEFF 		bl	sscanf
 614:main.c        **** 					bvar += avar;
 1654              		.loc 1 614 0
 1655 0c38 BA88     		ldrh	r2, [r7, #4]
 1656 0c3a FB8C     		ldrh	r3, [r7, #38]	@ movhi
 1657 0c3c 1344     		add	r3, r3, r2
 1658 0c3e FB84     		strh	r3, [r7, #38]	@ movhi
 615:main.c        **** 					
 616:main.c        **** 					if(bvar >= (BUFFER_SIZE-1))
 1659              		.loc 1 616 0
 1660 0c40 FB8C     		ldrh	r3, [r7, #38]
 1661 0c42 40F2FE32 		movw	r2, #1022
 1662 0c46 9342     		cmp	r3, r2
 1663 0c48 03D9     		bls	.L65
 617:main.c        **** 					{
 618:main.c        **** 						bvar = (BUFFER_SIZE-1);  // maximum post trigger buffer size
 1664              		.loc 1 618 0
 1665 0c4a 40F2FF33 		movw	r3, #1023
 1666 0c4e FB84     		strh	r3, [r7, #38]	@ movhi
 1667 0c50 04E0     		b	.L66
 1668              	.L65:
 619:main.c        **** 					}
 620:main.c        **** 					else if(bvar <= 2)
 1669              		.loc 1 620 0
 1670 0c52 FB8C     		ldrh	r3, [r7, #38]
 1671 0c54 022B     		cmp	r3, #2
 1672 0c56 01D8     		bhi	.L66
 621:main.c        **** 					{
 622:main.c        **** 						bvar = 2; // minimum post trigger buffer size
 1673              		.loc 1 622 0
 1674 0c58 0223     		movs	r3, #2
 1675 0c5a FB84     		strh	r3, [r7, #38]	@ movhi
 1676              	.L66:
 623:main.c        **** 					}
 624:main.c        **** 					
 625:main.c        **** 					// update the period to match the trigger buffer size post trigger capture
 626:main.c        **** 					PWM_Sample_Buffer_WritePeriod(bvar); // post trigger buffer
 1677              		.loc 1 626 0
 1678 0c5c FB8C     		ldrh	r3, [r7, #38]
 1679 0c5e 1846     		mov	r0, r3
 1680 0c60 FFF7FEFF 		bl	PWM_Sample_Buffer_WritePeriod
 627:main.c        **** 					// after setting the period, need to set the count to the proper value as well
 628:main.c        **** 					PWM_Sample_Buffer_WriteCounter(bvar); // post trigger buffer					
 1681              		.loc 1 628 0
 1682 0c64 FB8C     		ldrh	r3, [r7, #38]
 1683 0c66 1846     		mov	r0, r3
 1684 0c68 FFF7FEFF 		bl	PWM_Sample_Buffer_WriteCounter
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 42


 1685 0c6c 93E2     		b	.L6
 1686              	.L64:
 629:main.c        **** 				}
 630:main.c        **** 				else if(*psz == 'R')
 1687              		.loc 1 630 0
 1688 0c6e BB69     		ldr	r3, [r7, #24]
 1689 0c70 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1690 0c72 522B     		cmp	r3, #82
 1691 0c74 40F00281 		bne	.L67
 631:main.c        **** 				{
 632:main.c        **** 					// Scope control register update
 633:main.c        **** 					// data comes back as an ascii number, representing an 8 bit value
 634:main.c        **** 					// bit 7: unused
 635:main.c        **** 					// bit 6: Internal (0, a or b as defined later) or External Trigger (1)
 636:main.c        **** 					// bit 5: trigger polarity, rising (0) or falling (1)
 637:main.c        **** 					// bit 4: trigger source, A (0) or B (1)
 638:main.c        **** 					// bits 3:0 -> sample rate 20 Msps / (2^thisval) this val can be 0 - 15
 639:main.c        **** 					psz = strtok(0, " ");
 1692              		.loc 1 639 0
 1693 0c78 7D49     		ldr	r1, .L130
 1694 0c7a 0020     		movs	r0, #0
 1695 0c7c FFF7FEFF 		bl	strtok
 1696 0c80 B861     		str	r0, [r7, #24]
 640:main.c        **** 					sscanf(psz,"%hu", &avar);
 1697              		.loc 1 640 0
 1698 0c82 3B1D     		adds	r3, r7, #4
 1699 0c84 1A46     		mov	r2, r3
 1700 0c86 7B49     		ldr	r1, .L130+4
 1701 0c88 B869     		ldr	r0, [r7, #24]
 1702 0c8a FFF7FEFF 		bl	sscanf
 641:main.c        **** 					
 642:main.c        **** 					// internal versus external trigger
 643:main.c        **** 					// bit 6
 644:main.c        **** 					if((avar & 0x40) == 0)
 1703              		.loc 1 644 0
 1704 0c8e BB88     		ldrh	r3, [r7, #4]
 1705 0c90 03F04003 		and	r3, r3, #64
 1706 0c94 002B     		cmp	r3, #0
 1707 0c96 2AD1     		bne	.L68
 645:main.c        **** 					{
 646:main.c        **** 						// internal trigger
 647:main.c        **** 						// trigger polarity
 648:main.c        **** 						// bit 5
 649:main.c        **** 						if((avar & 0x20) == 0)
 1708              		.loc 1 649 0
 1709 0c98 BB88     		ldrh	r3, [r7, #4]
 1710 0c9a 03F02003 		and	r3, r3, #32
 1711 0c9e 002B     		cmp	r3, #0
 1712 0ca0 12D1     		bne	.L69
 650:main.c        **** 						{
 651:main.c        **** 							// rising edge
 652:main.c        **** 							Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1713              		.loc 1 652 0
 1714 0ca2 FFF7FEFF 		bl	Trigger_Control_Read
 1715 0ca6 0346     		mov	r3, r0
 1716 0ca8 23F00F03 		bic	r3, r3, #15
 1717 0cac DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 43


 1718 0cae 1846     		mov	r0, r3
 1719 0cb0 FFF7FEFF 		bl	Trigger_Control_Write
 653:main.c        ****     						Trigger_Control_Write(Trigger_Control_Read() | RISING_EDGE_TRIGGERED);
 1720              		.loc 1 653 0
 1721 0cb4 FFF7FEFF 		bl	Trigger_Control_Read
 1722 0cb8 0346     		mov	r3, r0
 1723 0cba 43F00203 		orr	r3, r3, #2
 1724 0cbe DBB2     		uxtb	r3, r3
 1725 0cc0 1846     		mov	r0, r3
 1726 0cc2 FFF7FEFF 		bl	Trigger_Control_Write
 1727 0cc6 24E0     		b	.L71
 1728              	.L69:
 654:main.c        **** 						}
 655:main.c        **** 						else
 656:main.c        **** 						{
 657:main.c        **** 							// falling edge
 658:main.c        **** 							Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1729              		.loc 1 658 0
 1730 0cc8 FFF7FEFF 		bl	Trigger_Control_Read
 1731 0ccc 0346     		mov	r3, r0
 1732 0cce 23F00F03 		bic	r3, r3, #15
 1733 0cd2 DBB2     		uxtb	r3, r3
 1734 0cd4 1846     		mov	r0, r3
 1735 0cd6 FFF7FEFF 		bl	Trigger_Control_Write
 659:main.c        ****     						Trigger_Control_Write(Trigger_Control_Read() | FALLING_EDGE_TRIGGERED);
 1736              		.loc 1 659 0
 1737 0cda FFF7FEFF 		bl	Trigger_Control_Read
 1738 0cde 0346     		mov	r3, r0
 1739 0ce0 43F00103 		orr	r3, r3, #1
 1740 0ce4 DBB2     		uxtb	r3, r3
 1741 0ce6 1846     		mov	r0, r3
 1742 0ce8 FFF7FEFF 		bl	Trigger_Control_Write
 1743 0cec 11E0     		b	.L71
 1744              	.L68:
 660:main.c        **** 						}
 661:main.c        **** 					}
 662:main.c        **** 					else
 663:main.c        **** 					{
 664:main.c        **** 						// external trigger
 665:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1745              		.loc 1 665 0
 1746 0cee FFF7FEFF 		bl	Trigger_Control_Read
 1747 0cf2 0346     		mov	r3, r0
 1748 0cf4 23F00F03 		bic	r3, r3, #15
 1749 0cf8 DBB2     		uxtb	r3, r3
 1750 0cfa 1846     		mov	r0, r3
 1751 0cfc FFF7FEFF 		bl	Trigger_Control_Write
 666:main.c        ****     					Trigger_Control_Write(Trigger_Control_Read() | EXTERNAL_TRIGGERED);
 1752              		.loc 1 666 0
 1753 0d00 FFF7FEFF 		bl	Trigger_Control_Read
 1754 0d04 0346     		mov	r3, r0
 1755 0d06 43F00803 		orr	r3, r3, #8
 1756 0d0a DBB2     		uxtb	r3, r3
 1757 0d0c 1846     		mov	r0, r3
 1758 0d0e FFF7FEFF 		bl	Trigger_Control_Write
 1759              	.L71:
 667:main.c        **** 					}
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 44


 668:main.c        **** 					// bit 4
 669:main.c        **** 					// trigger source select
 670:main.c        **** 					if((avar & 0x10) == 0)
 1760              		.loc 1 670 0
 1761 0d12 BB88     		ldrh	r3, [r7, #4]
 1762 0d14 03F01003 		and	r3, r3, #16
 1763 0d18 002B     		cmp	r3, #0
 1764 0d1a 06D1     		bne	.L72
 671:main.c        **** 					{
 672:main.c        **** 						// channel 1 / A
 673:main.c        **** 						trigger_source = SCOPE_CHANNEL_1;
 1765              		.loc 1 673 0
 1766 0d1c 564B     		ldr	r3, .L130+8
 1767 0d1e 0022     		movs	r2, #0
 1768 0d20 1A70     		strb	r2, [r3]
 674:main.c        **** 						Amux_Trigger_Select(SCOPE_CHANNEL_1);
 1769              		.loc 1 674 0
 1770 0d22 0020     		movs	r0, #0
 1771 0d24 FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1772 0d28 05E0     		b	.L73
 1773              	.L72:
 675:main.c        **** 					}
 676:main.c        **** 					else
 677:main.c        **** 					{
 678:main.c        **** 					    // channel 2 / B
 679:main.c        **** 						trigger_source = SCOPE_CHANNEL_2;
 1774              		.loc 1 679 0
 1775 0d2a 534B     		ldr	r3, .L130+8
 1776 0d2c 0122     		movs	r2, #1
 1777 0d2e 1A70     		strb	r2, [r3]
 680:main.c        **** 						Amux_Trigger_Select(SCOPE_CHANNEL_2);
 1778              		.loc 1 680 0
 1779 0d30 0120     		movs	r0, #1
 1780 0d32 FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1781              	.L73:
 681:main.c        **** 					}   
 682:main.c        ****                     if((avar & 0x80) != 0)
 1782              		.loc 1 682 0
 1783 0d36 BB88     		ldrh	r3, [r7, #4]
 1784 0d38 03F08003 		and	r3, r3, #128
 1785 0d3c 002B     		cmp	r3, #0
 1786 0d3e 05D0     		beq	.L74
 683:main.c        ****                     {
 684:main.c        ****                         // select external trigger input pin
 685:main.c        ****                         trigger_source = EXT_TRIGGER;
 1787              		.loc 1 685 0
 1788 0d40 4D4B     		ldr	r3, .L130+8
 1789 0d42 0222     		movs	r2, #2
 1790 0d44 1A70     		strb	r2, [r3]
 686:main.c        **** 						Amux_Trigger_Select(EXT_TRIGGER);
 1791              		.loc 1 686 0
 1792 0d46 0220     		movs	r0, #2
 1793 0d48 FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1794              	.L74:
 687:main.c        ****                     }
 688:main.c        **** 					// sample rate
 689:main.c        **** 					// bit 3:0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 45


 690:main.c        **** 					if((avar & 0x0f) <= 0) // 818.2 Ksps "maximum" sample rate
 1795              		.loc 1 690 0
 1796 0d4c BB88     		ldrh	r3, [r7, #4]
 1797 0d4e 03F00F03 		and	r3, r3, #15
 1798 0d52 002B     		cmp	r3, #0
 1799 0d54 04DC     		bgt	.L75
 691:main.c        **** 					{
 692:main.c        ****                         // 36 Mhz master clock divided by this number and then divided by 
 693:main.c        ****                         // 18 due to the freq divider set the ADC sample rate.
 694:main.c        **** 						SampleClock_SetDividerValue(1); 
 1800              		.loc 1 694 0
 1801 0d56 0121     		movs	r1, #1
 1802 0d58 0020     		movs	r0, #0
 1803 0d5a FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1804 0d5e 1AE2     		b	.L6
 1805              	.L75:
 695:main.c        **** 					}
 696:main.c        **** 					else if((avar & 0x0f) == 1) // 409.1 ksps
 1806              		.loc 1 696 0
 1807 0d60 BB88     		ldrh	r3, [r7, #4]
 1808 0d62 03F00F03 		and	r3, r3, #15
 1809 0d66 012B     		cmp	r3, #1
 1810 0d68 04D1     		bne	.L77
 697:main.c        **** 					{
 698:main.c        **** 						SampleClock_SetDividerValue(2);
 1811              		.loc 1 698 0
 1812 0d6a 0121     		movs	r1, #1
 1813 0d6c 0120     		movs	r0, #1
 1814 0d6e FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1815 0d72 10E2     		b	.L6
 1816              	.L77:
 699:main.c        **** 					}
 700:main.c        **** 					else if((avar & 0x0f) == 2) // 204.5 ksps
 1817              		.loc 1 700 0
 1818 0d74 BB88     		ldrh	r3, [r7, #4]
 1819 0d76 03F00F03 		and	r3, r3, #15
 1820 0d7a 022B     		cmp	r3, #2
 1821 0d7c 04D1     		bne	.L78
 701:main.c        **** 					{
 702:main.c        **** 						SampleClock_SetDividerValue(4);
 1822              		.loc 1 702 0
 1823 0d7e 0121     		movs	r1, #1
 1824 0d80 0320     		movs	r0, #3
 1825 0d82 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1826 0d86 06E2     		b	.L6
 1827              	.L78:
 703:main.c        **** 					}
 704:main.c        **** 					else if((avar & 0x0f) == 3) // 102.3 ksps
 1828              		.loc 1 704 0
 1829 0d88 BB88     		ldrh	r3, [r7, #4]
 1830 0d8a 03F00F03 		and	r3, r3, #15
 1831 0d8e 032B     		cmp	r3, #3
 1832 0d90 04D1     		bne	.L79
 705:main.c        **** 					{
 706:main.c        **** 						SampleClock_SetDividerValue(8);
 1833              		.loc 1 706 0
 1834 0d92 0121     		movs	r1, #1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 46


 1835 0d94 0720     		movs	r0, #7
 1836 0d96 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1837 0d9a FCE1     		b	.L6
 1838              	.L79:
 707:main.c        **** 					}
 708:main.c        **** 					else if((avar & 0x0f) == 4) // 51.1 ksps
 1839              		.loc 1 708 0
 1840 0d9c BB88     		ldrh	r3, [r7, #4]
 1841 0d9e 03F00F03 		and	r3, r3, #15
 1842 0da2 042B     		cmp	r3, #4
 1843 0da4 04D1     		bne	.L80
 709:main.c        **** 					{ 
 710:main.c        **** 						SampleClock_SetDividerValue(16);
 1844              		.loc 1 710 0
 1845 0da6 0121     		movs	r1, #1
 1846 0da8 0F20     		movs	r0, #15
 1847 0daa FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1848 0dae F2E1     		b	.L6
 1849              	.L80:
 711:main.c        **** 					}
 712:main.c        **** 					else if((avar & 0x0f) == 5) // 25.6 ksps
 1850              		.loc 1 712 0
 1851 0db0 BB88     		ldrh	r3, [r7, #4]
 1852 0db2 03F00F03 		and	r3, r3, #15
 1853 0db6 052B     		cmp	r3, #5
 1854 0db8 04D1     		bne	.L81
 713:main.c        **** 					{
 714:main.c        **** 						SampleClock_SetDividerValue(32);
 1855              		.loc 1 714 0
 1856 0dba 0121     		movs	r1, #1
 1857 0dbc 1F20     		movs	r0, #31
 1858 0dbe FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1859 0dc2 E8E1     		b	.L6
 1860              	.L81:
 715:main.c        **** 					}
 716:main.c        **** 					else if((avar & 0x0f) == 6) // 12.8 ksps
 1861              		.loc 1 716 0
 1862 0dc4 BB88     		ldrh	r3, [r7, #4]
 1863 0dc6 03F00F03 		and	r3, r3, #15
 1864 0dca 062B     		cmp	r3, #6
 1865 0dcc 04D1     		bne	.L82
 717:main.c        **** 					{
 718:main.c        **** 						SampleClock_SetDividerValue(64);
 1866              		.loc 1 718 0
 1867 0dce 0121     		movs	r1, #1
 1868 0dd0 3F20     		movs	r0, #63
 1869 0dd2 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1870 0dd6 DEE1     		b	.L6
 1871              	.L82:
 719:main.c        **** 					}
 720:main.c        **** 					else if((avar & 0x0f) == 7) // 6.4 ksps
 1872              		.loc 1 720 0
 1873 0dd8 BB88     		ldrh	r3, [r7, #4]
 1874 0dda 03F00F03 		and	r3, r3, #15
 1875 0dde 072B     		cmp	r3, #7
 1876 0de0 04D1     		bne	.L83
 721:main.c        **** 					{ 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 47


 722:main.c        **** 						SampleClock_SetDividerValue(128);
 1877              		.loc 1 722 0
 1878 0de2 0121     		movs	r1, #1
 1879 0de4 7F20     		movs	r0, #127
 1880 0de6 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1881 0dea D4E1     		b	.L6
 1882              	.L83:
 723:main.c        **** 					}
 724:main.c        **** 					else if((avar & 0x0f) == 8) // 3.2 ksps
 1883              		.loc 1 724 0
 1884 0dec BB88     		ldrh	r3, [r7, #4]
 1885 0dee 03F00F03 		and	r3, r3, #15
 1886 0df2 082B     		cmp	r3, #8
 1887 0df4 04D1     		bne	.L84
 725:main.c        **** 					{
 726:main.c        **** 						SampleClock_SetDividerValue(256);
 1888              		.loc 1 726 0
 1889 0df6 0121     		movs	r1, #1
 1890 0df8 FF20     		movs	r0, #255
 1891 0dfa FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1892 0dfe CAE1     		b	.L6
 1893              	.L84:
 727:main.c        **** 					}
 728:main.c        **** 					else if((avar & 0x0f) == 9) // 1.6 ksps
 1894              		.loc 1 728 0
 1895 0e00 BB88     		ldrh	r3, [r7, #4]
 1896 0e02 03F00F03 		and	r3, r3, #15
 1897 0e06 092B     		cmp	r3, #9
 1898 0e08 05D1     		bne	.L85
 729:main.c        **** 					{
 730:main.c        **** 						SampleClock_SetDividerValue(512);
 1899              		.loc 1 730 0
 1900 0e0a 0121     		movs	r1, #1
 1901 0e0c 40F2FF10 		movw	r0, #511
 1902 0e10 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1903 0e14 BFE1     		b	.L6
 1904              	.L85:
 731:main.c        **** 					}
 732:main.c        **** 					else if((avar & 0x0f) == 10) // 799 sps 
 1905              		.loc 1 732 0
 1906 0e16 BB88     		ldrh	r3, [r7, #4]
 1907 0e18 03F00F03 		and	r3, r3, #15
 1908 0e1c 0A2B     		cmp	r3, #10
 1909 0e1e 05D1     		bne	.L86
 733:main.c        **** 					{ 
 734:main.c        **** 						SampleClock_SetDividerValue(1024);
 1910              		.loc 1 734 0
 1911 0e20 0121     		movs	r1, #1
 1912 0e22 40F2FF30 		movw	r0, #1023
 1913 0e26 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1914 0e2a B4E1     		b	.L6
 1915              	.L86:
 735:main.c        **** 					}
 736:main.c        **** 					else if((avar & 0x0f) == 11) // 400 sps
 1916              		.loc 1 736 0
 1917 0e2c BB88     		ldrh	r3, [r7, #4]
 1918 0e2e 03F00F03 		and	r3, r3, #15
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 48


 1919 0e32 0B2B     		cmp	r3, #11
 1920 0e34 05D1     		bne	.L87
 737:main.c        **** 					{ 
 738:main.c        **** 						SampleClock_SetDividerValue(2048);
 1921              		.loc 1 738 0
 1922 0e36 0121     		movs	r1, #1
 1923 0e38 40F2FF70 		movw	r0, #2047
 1924 0e3c FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1925 0e40 A9E1     		b	.L6
 1926              	.L87:
 739:main.c        **** 					}                    
 740:main.c        **** 					else if((avar & 0x0f) == 12) // 200 sps
 1927              		.loc 1 740 0
 1928 0e42 BB88     		ldrh	r3, [r7, #4]
 1929 0e44 03F00F03 		and	r3, r3, #15
 1930 0e48 0C2B     		cmp	r3, #12
 1931 0e4a 05D1     		bne	.L88
 741:main.c        **** 					{ 
 742:main.c        **** 						SampleClock_SetDividerValue(4096);
 1932              		.loc 1 742 0
 1933 0e4c 0121     		movs	r1, #1
 1934 0e4e 40F6FF70 		movw	r0, #4095
 1935 0e52 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1936 0e56 9EE1     		b	.L6
 1937              	.L88:
 743:main.c        **** 					}
 744:main.c        **** 					else if((avar & 0x0f) >= 13) // 100 sps
 1938              		.loc 1 744 0
 1939 0e58 BB88     		ldrh	r3, [r7, #4]
 1940 0e5a 03F00F03 		and	r3, r3, #15
 1941 0e5e 0C2B     		cmp	r3, #12
 1942 0e60 40F39981 		ble	.L6
 745:main.c        **** 					{ 
 746:main.c        **** 						SampleClock_SetDividerValue(8192);
 1943              		.loc 1 746 0
 1944 0e64 0121     		movs	r1, #1
 1945 0e66 41F6FF70 		movw	r0, #8191
 1946 0e6a FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1947 0e6e 92E1     		b	.L6
 1948              	.L131:
 1949              		.align	2
 1950              	.L130:
 1951 0e70 00000000 		.word	.LC0
 1952 0e74 18000000 		.word	.LC2
 1953 0e78 00000000 		.word	trigger_source
 1954              	.L67:
 747:main.c        **** 					}
 748:main.c        ****                 }
 749:main.c        **** 				else if(*psz == 'D')
 1955              		.loc 1 749 0
 1956 0e7c BB69     		ldr	r3, [r7, #24]
 1957 0e7e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1958 0e80 442B     		cmp	r3, #68
 1959 0e82 59D1     		bne	.L89
 750:main.c        **** 				{
 751:main.c        **** 					// Scope debug hardware command
 752:main.c        **** 					// data comes back as an ascii number, representing a single value
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 49


 753:main.c        **** 					// 0 set reset to 0
 754:main.c        **** 					// 1 set reset to 1
 755:main.c        **** 					// 2 set REQ = 0
 756:main.c        **** 					// 3 set REQ = 1
 757:main.c        **** 					// 4 set MAN_TRIG = 1
 758:main.c        **** 					// 5 set MAN_TRIG = 0
 759:main.c        **** 					psz = strtok(0, " ");
 1960              		.loc 1 759 0
 1961 0e84 B649     		ldr	r1, .L132+8
 1962 0e86 0020     		movs	r0, #0
 1963 0e88 FFF7FEFF 		bl	strtok
 1964 0e8c B861     		str	r0, [r7, #24]
 760:main.c        **** 					sscanf(psz,"%hu", &avar);
 1965              		.loc 1 760 0
 1966 0e8e 3B1D     		adds	r3, r7, #4
 1967 0e90 1A46     		mov	r2, r3
 1968 0e92 B449     		ldr	r1, .L132+12
 1969 0e94 B869     		ldr	r0, [r7, #24]
 1970 0e96 FFF7FEFF 		bl	sscanf
 761:main.c        **** 					
 762:main.c        **** 					if(avar == 0) // reset PWM = 0
 1971              		.loc 1 762 0
 1972 0e9a BB88     		ldrh	r3, [r7, #4]
 1973 0e9c 002B     		cmp	r3, #0
 1974 0e9e 09D1     		bne	.L90
 763:main.c        **** 					{
 764:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~RESET_PWM);
 1975              		.loc 1 764 0
 1976 0ea0 FFF7FEFF 		bl	Trigger_Control_Read
 1977 0ea4 0346     		mov	r3, r0
 1978 0ea6 03F07F03 		and	r3, r3, #127
 1979 0eaa DBB2     		uxtb	r3, r3
 1980 0eac 1846     		mov	r0, r3
 1981 0eae FFF7FEFF 		bl	Trigger_Control_Write
 1982 0eb2 70E1     		b	.L6
 1983              	.L90:
 765:main.c        **** 					}
 766:main.c        **** 					else if(avar == 1) // reset PWM = 1
 1984              		.loc 1 766 0
 1985 0eb4 BB88     		ldrh	r3, [r7, #4]
 1986 0eb6 012B     		cmp	r3, #1
 1987 0eb8 09D1     		bne	.L92
 767:main.c        **** 					{
 768:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | RESET_PWM);
 1988              		.loc 1 768 0
 1989 0eba FFF7FEFF 		bl	Trigger_Control_Read
 1990 0ebe 0346     		mov	r3, r0
 1991 0ec0 63F07F03 		orn	r3, r3, #127
 1992 0ec4 DBB2     		uxtb	r3, r3
 1993 0ec6 1846     		mov	r0, r3
 1994 0ec8 FFF7FEFF 		bl	Trigger_Control_Write
 1995 0ecc 63E1     		b	.L6
 1996              	.L92:
 769:main.c        **** 					}
 770:main.c        **** 					else if(avar == 2) // set REQ = 0
 1997              		.loc 1 770 0
 1998 0ece BB88     		ldrh	r3, [r7, #4]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 50


 1999 0ed0 022B     		cmp	r3, #2
 2000 0ed2 09D1     		bne	.L93
 771:main.c        **** 					{
 772:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 2001              		.loc 1 772 0
 2002 0ed4 FFF7FEFF 		bl	Trigger_Control_Read
 2003 0ed8 0346     		mov	r3, r0
 2004 0eda 23F04003 		bic	r3, r3, #64
 2005 0ede DBB2     		uxtb	r3, r3
 2006 0ee0 1846     		mov	r0, r3
 2007 0ee2 FFF7FEFF 		bl	Trigger_Control_Write
 2008 0ee6 56E1     		b	.L6
 2009              	.L93:
 773:main.c        **** 					}
 774:main.c        **** 					else if(avar == 3) // set REQ = 1
 2010              		.loc 1 774 0
 2011 0ee8 BB88     		ldrh	r3, [r7, #4]
 2012 0eea 032B     		cmp	r3, #3
 2013 0eec 09D1     		bne	.L94
 775:main.c        **** 					{
 776:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 2014              		.loc 1 776 0
 2015 0eee FFF7FEFF 		bl	Trigger_Control_Read
 2016 0ef2 0346     		mov	r3, r0
 2017 0ef4 43F04003 		orr	r3, r3, #64
 2018 0ef8 DBB2     		uxtb	r3, r3
 2019 0efa 1846     		mov	r0, r3
 2020 0efc FFF7FEFF 		bl	Trigger_Control_Write
 2021 0f00 49E1     		b	.L6
 2022              	.L94:
 777:main.c        **** 					}
 778:main.c        **** 					else if(avar == 4) // manual trigger = 0
 2023              		.loc 1 778 0
 2024 0f02 BB88     		ldrh	r3, [r7, #4]
 2025 0f04 042B     		cmp	r3, #4
 2026 0f06 09D1     		bne	.L95
 779:main.c        **** 					{
 780:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~MANUAL_TRIGGER);
 2027              		.loc 1 780 0
 2028 0f08 FFF7FEFF 		bl	Trigger_Control_Read
 2029 0f0c 0346     		mov	r3, r0
 2030 0f0e 23F01003 		bic	r3, r3, #16
 2031 0f12 DBB2     		uxtb	r3, r3
 2032 0f14 1846     		mov	r0, r3
 2033 0f16 FFF7FEFF 		bl	Trigger_Control_Write
 2034 0f1a 3CE1     		b	.L6
 2035              	.L95:
 781:main.c        **** 					}
 782:main.c        **** 					else if(avar == 5) // manual trigger = 1
 2036              		.loc 1 782 0
 2037 0f1c BB88     		ldrh	r3, [r7, #4]
 2038 0f1e 052B     		cmp	r3, #5
 2039 0f20 40F03981 		bne	.L6
 783:main.c        **** 					{
 784:main.c        **** 						//Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 785:main.c        **** 						//Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 786:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | MANUAL_TRIGGER);
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 51


 2040              		.loc 1 786 0
 2041 0f24 FFF7FEFF 		bl	Trigger_Control_Read
 2042 0f28 0346     		mov	r3, r0
 2043 0f2a 43F01003 		orr	r3, r3, #16
 2044 0f2e DBB2     		uxtb	r3, r3
 2045 0f30 1846     		mov	r0, r3
 2046 0f32 FFF7FEFF 		bl	Trigger_Control_Write
 2047 0f36 2EE1     		b	.L6
 2048              	.L89:
 787:main.c        **** 					}
 788:main.c        **** 					
 789:main.c        **** 				}
 790:main.c        **** 				else if(*psz == 'G')
 2049              		.loc 1 790 0
 2050 0f38 BB69     		ldr	r3, [r7, #24]
 2051 0f3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2052 0f3c 472B     		cmp	r3, #71
 2053 0f3e 12D1     		bne	.L96
 791:main.c        **** 				{
 792:main.c        **** 					// Scope GO, arms the scope and waits for a trigger event
 793:main.c        **** 					// if a trigger occurs, sends back the character 'A' followed
 794:main.c        **** 					// by a 2nd and 3rd byte in binary format indicating the address
 795:main.c        **** 					// where the capture ended in the buffer (10 bits).  I'm assuming Aa format
 796:main.c        **** 					
 797:main.c        **** 					// arm the scope
 798:main.c        **** 					Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 2054              		.loc 1 798 0
 2055 0f40 FFF7FEFF 		bl	Trigger_Control_Read
 2056 0f44 0346     		mov	r3, r0
 2057 0f46 43F04003 		orr	r3, r3, #64
 2058 0f4a DBB2     		uxtb	r3, r3
 2059 0f4c 1846     		mov	r0, r3
 2060 0f4e FFF7FEFF 		bl	Trigger_Control_Write
 799:main.c        **** 					Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 2061              		.loc 1 799 0
 2062 0f52 FFF7FEFF 		bl	Trigger_Control_Read
 2063 0f56 0346     		mov	r3, r0
 2064 0f58 23F04003 		bic	r3, r3, #64
 2065 0f5c DBB2     		uxtb	r3, r3
 2066 0f5e 1846     		mov	r0, r3
 2067 0f60 FFF7FEFF 		bl	Trigger_Control_Write
 2068 0f64 17E1     		b	.L6
 2069              	.L96:
 800:main.c        **** 					
 801:main.c        **** 				}
 802:main.c        **** 				else if(*psz == 'B')
 2070              		.loc 1 802 0
 2071 0f66 BB69     		ldr	r3, [r7, #24]
 2072 0f68 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2073 0f6a 422B     		cmp	r3, #66
 2074 0f6c 40F08480 		bne	.L97
 803:main.c        **** 				{
 804:main.c        **** 					// dump the scope buffer
 805:main.c        **** 					PutChar('D');
 2075              		.loc 1 805 0
 2076 0f70 4420     		movs	r0, #68
 2077 0f72 FFF7FEFF 		bl	PutChar
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 52


 806:main.c        **** 					
 807:main.c        **** 					for(i = 0; i < BUFFER_SIZE; i++)
 2078              		.loc 1 807 0
 2079 0f76 0023     		movs	r3, #0
 2080 0f78 BB84     		strh	r3, [r7, #36]	@ movhi
 2081 0f7a 78E0     		b	.L98
 2082              	.L104:
 808:main.c        **** 					{
 809:main.c        **** 						// truncate to 12 bits
 810:main.c        **** 						avar = (uint16) Channel_1_Data[i]/1.005;
 2083              		.loc 1 810 0
 2084 0f7c BB8C     		ldrh	r3, [r7, #36]
 2085 0f7e 7A4A     		ldr	r2, .L132+16
 2086 0f80 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 2087 0f84 1846     		mov	r0, r3
 2088 0f86 FFF7FEFF 		bl	__aeabi_i2d
 2089 0f8a 73A3     		adr	r3, .L132
 2090 0f8c D3E90023 		ldrd	r2, [r3]
 2091 0f90 FFF7FEFF 		bl	__aeabi_ddiv
 2092 0f94 0346     		mov	r3, r0
 2093 0f96 0C46     		mov	r4, r1
 2094 0f98 1846     		mov	r0, r3
 2095 0f9a 2146     		mov	r1, r4
 2096 0f9c FFF7FEFF 		bl	__aeabi_d2uiz
 2097 0fa0 0346     		mov	r3, r0
 2098 0fa2 9BB2     		uxth	r3, r3
 2099 0fa4 BB80     		strh	r3, [r7, #4]	@ movhi
 811:main.c        **** 						bvar = (uint16) Channel_2_Data[i]/1.005;
 2100              		.loc 1 811 0
 2101 0fa6 BB8C     		ldrh	r3, [r7, #36]
 2102 0fa8 704A     		ldr	r2, .L132+20
 2103 0faa 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 2104 0fae 1846     		mov	r0, r3
 2105 0fb0 FFF7FEFF 		bl	__aeabi_i2d
 2106 0fb4 68A3     		adr	r3, .L132
 2107 0fb6 D3E90023 		ldrd	r2, [r3]
 2108 0fba FFF7FEFF 		bl	__aeabi_ddiv
 2109 0fbe 0346     		mov	r3, r0
 2110 0fc0 0C46     		mov	r4, r1
 2111 0fc2 1846     		mov	r0, r3
 2112 0fc4 2146     		mov	r1, r4
 2113 0fc6 FFF7FEFF 		bl	__aeabi_d2uiz
 2114 0fca 0346     		mov	r3, r0
 2115 0fcc FB84     		strh	r3, [r7, #38]	@ movhi
 812:main.c        **** 						
 813:main.c        **** 						// send the data out to the terminal
 814:main.c        **** 						USB_Out_Buffer[(i*4+0) % USBUART_BUFFER_SIZE] = (uint8) (avar >> 8); // address of the end, M
 2116              		.loc 1 814 0
 2117 0fce BB8C     		ldrh	r3, [r7, #36]
 2118 0fd0 9B00     		lsls	r3, r3, #2
 2119 0fd2 03F03C03 		and	r3, r3, #60
 2120 0fd6 BA88     		ldrh	r2, [r7, #4]
 2121 0fd8 120A     		lsrs	r2, r2, #8
 2122 0fda 92B2     		uxth	r2, r2
 2123 0fdc D1B2     		uxtb	r1, r2
 2124 0fde 644A     		ldr	r2, .L132+24
 2125 0fe0 D154     		strb	r1, [r2, r3]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 53


 815:main.c        **** 						USB_Out_Buffer[(i*4+1) % USBUART_BUFFER_SIZE] = (uint8) (avar & 0x00FF); // address of the en
 2126              		.loc 1 815 0
 2127 0fe2 BB8C     		ldrh	r3, [r7, #36]
 2128 0fe4 9B00     		lsls	r3, r3, #2
 2129 0fe6 5A1C     		adds	r2, r3, #1
 2130 0fe8 624B     		ldr	r3, .L132+28
 2131 0fea 1340     		ands	r3, r3, r2
 2132 0fec 002B     		cmp	r3, #0
 2133 0fee 03DA     		bge	.L99
 2134 0ff0 013B     		subs	r3, r3, #1
 2135 0ff2 63F03F03 		orn	r3, r3, #63
 2136 0ff6 0133     		adds	r3, r3, #1
 2137              	.L99:
 2138 0ff8 1A46     		mov	r2, r3
 2139 0ffa BB88     		ldrh	r3, [r7, #4]
 2140 0ffc D9B2     		uxtb	r1, r3
 2141 0ffe 5C4B     		ldr	r3, .L132+24
 2142 1000 9954     		strb	r1, [r3, r2]
 816:main.c        **** 						USB_Out_Buffer[(i*4+2) % USBUART_BUFFER_SIZE] = (uint8) (bvar >> 8); // address of the end, M
 2143              		.loc 1 816 0
 2144 1002 BB8C     		ldrh	r3, [r7, #36]
 2145 1004 9B00     		lsls	r3, r3, #2
 2146 1006 9A1C     		adds	r2, r3, #2
 2147 1008 5A4B     		ldr	r3, .L132+28
 2148 100a 1340     		ands	r3, r3, r2
 2149 100c 002B     		cmp	r3, #0
 2150 100e 03DA     		bge	.L100
 2151 1010 013B     		subs	r3, r3, #1
 2152 1012 63F03F03 		orn	r3, r3, #63
 2153 1016 0133     		adds	r3, r3, #1
 2154              	.L100:
 2155 1018 1A46     		mov	r2, r3
 2156 101a FB8C     		ldrh	r3, [r7, #38]
 2157 101c 1B0A     		lsrs	r3, r3, #8
 2158 101e 9BB2     		uxth	r3, r3
 2159 1020 D9B2     		uxtb	r1, r3
 2160 1022 534B     		ldr	r3, .L132+24
 2161 1024 9954     		strb	r1, [r3, r2]
 817:main.c        **** 						USB_Out_Buffer[(i*4+3) % USBUART_BUFFER_SIZE] = (uint8) (bvar & 0x00FF); // address of the en
 2162              		.loc 1 817 0
 2163 1026 BB8C     		ldrh	r3, [r7, #36]
 2164 1028 9B00     		lsls	r3, r3, #2
 2165 102a DA1C     		adds	r2, r3, #3
 2166 102c 514B     		ldr	r3, .L132+28
 2167 102e 1340     		ands	r3, r3, r2
 2168 1030 002B     		cmp	r3, #0
 2169 1032 03DA     		bge	.L101
 2170 1034 013B     		subs	r3, r3, #1
 2171 1036 63F03F03 		orn	r3, r3, #63
 2172 103a 0133     		adds	r3, r3, #1
 2173              	.L101:
 2174 103c 1A46     		mov	r2, r3
 2175 103e FB8C     		ldrh	r3, [r7, #38]	@ movhi
 2176 1040 D9B2     		uxtb	r1, r3
 2177 1042 4B4B     		ldr	r3, .L132+24
 2178 1044 9954     		strb	r1, [r3, r2]
 818:main.c        **** 						
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 54


 819:main.c        **** 						// our buffer has been filled up, dump the data out the serial port
 820:main.c        **** 						if(((i*4+4) % USBUART_BUFFER_SIZE) == 0)
 2179              		.loc 1 820 0
 2180 1046 BB8C     		ldrh	r3, [r7, #36]
 2181 1048 0133     		adds	r3, r3, #1
 2182 104a 9B00     		lsls	r3, r3, #2
 2183 104c 03F03C03 		and	r3, r3, #60
 2184 1050 002B     		cmp	r3, #0
 2185 1052 09D1     		bne	.L102
 821:main.c        **** 						{
 822:main.c        **** 							while(USBUART_CDCIsReady() == 0){};
 2186              		.loc 1 822 0
 2187 1054 00BF     		nop
 2188              	.L103:
 2189              		.loc 1 822 0 is_stmt 0 discriminator 1
 2190 1056 FFF7FEFF 		bl	USBUART_CDCIsReady
 2191 105a 0346     		mov	r3, r0
 2192 105c 002B     		cmp	r3, #0
 2193 105e FAD0     		beq	.L103
 823:main.c        **** 							USBUART_PutData(USB_Out_Buffer, USBUART_BUFFER_SIZE);
 2194              		.loc 1 823 0 is_stmt 1
 2195 1060 4021     		movs	r1, #64
 2196 1062 4348     		ldr	r0, .L132+24
 2197 1064 FFF7FEFF 		bl	USBUART_PutData
 2198              	.L102:
 807:main.c        **** 					{
 2199              		.loc 1 807 0 discriminator 2
 2200 1068 BB8C     		ldrh	r3, [r7, #36]
 2201 106a 0133     		adds	r3, r3, #1
 2202 106c BB84     		strh	r3, [r7, #36]	@ movhi
 2203              	.L98:
 807:main.c        **** 					{
 2204              		.loc 1 807 0 is_stmt 0 discriminator 1
 2205 106e BB8C     		ldrh	r3, [r7, #36]
 2206 1070 B3F5806F 		cmp	r3, #1024
 2207 1074 82D3     		bcc	.L104
 2208 1076 8EE0     		b	.L6
 2209              	.L97:
 824:main.c        **** 						}
 825:main.c        **** 					}
 826:main.c        **** 				}
 827:main.c        **** 				else if(*psz == 'P')
 2210              		.loc 1 827 0 is_stmt 1
 2211 1078 BB69     		ldr	r3, [r7, #24]
 2212 107a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2213 107c 502B     		cmp	r3, #80
 2214 107e 58D1     		bne	.L105
 828:main.c        **** 				{
 829:main.c        **** 					// Scope Preamp settings
 830:main.c        **** 					// S P [A,B] Val can be 1,2,4,8,16,24,32,48,50
 831:main.c        ****                     // Grab the preamp gain value and set the gain
 832:main.c        **** 					//
 833:main.c        **** 					psz = strtok(0, " ");
 2215              		.loc 1 833 0
 2216 1080 3749     		ldr	r1, .L132+8
 2217 1082 0020     		movs	r0, #0
 2218 1084 FFF7FEFF 		bl	strtok
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 55


 2219 1088 B861     		str	r0, [r7, #24]
 834:main.c        **** 					
 835:main.c        **** 					if(*psz == 'A')
 2220              		.loc 1 835 0
 2221 108a BB69     		ldr	r3, [r7, #24]
 2222 108c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2223 108e 412B     		cmp	r3, #65
 2224 1090 10D1     		bne	.L106
 836:main.c        **** 					{
 837:main.c        ****                         psz = strtok(0, " ");
 2225              		.loc 1 837 0
 2226 1092 3349     		ldr	r1, .L132+8
 2227 1094 0020     		movs	r0, #0
 2228 1096 FFF7FEFF 		bl	strtok
 2229 109a B861     		str	r0, [r7, #24]
 838:main.c        ****                         sscanf(psz,"%hu", &avar);
 2230              		.loc 1 838 0
 2231 109c 3B1D     		adds	r3, r7, #4
 2232 109e 1A46     		mov	r2, r3
 2233 10a0 3049     		ldr	r1, .L132+12
 2234 10a2 B869     		ldr	r0, [r7, #24]
 2235 10a4 FFF7FEFF 		bl	sscanf
 839:main.c        **** 						//preamp_a = (uint8) avar;
 840:main.c        ****                         ScopeA_Buf_SetGain((uint8) avar);
 2236              		.loc 1 840 0
 2237 10a8 BB88     		ldrh	r3, [r7, #4]
 2238 10aa DBB2     		uxtb	r3, r3
 2239 10ac 1846     		mov	r0, r3
 2240 10ae FFF7FEFF 		bl	ScopeA_Buf_SetGain
 2241 10b2 70E0     		b	.L6
 2242              	.L106:
 841:main.c        **** 					}
 842:main.c        **** 					else if(*psz == 'B')
 2243              		.loc 1 842 0
 2244 10b4 BB69     		ldr	r3, [r7, #24]
 2245 10b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2246 10b8 422B     		cmp	r3, #66
 2247 10ba 10D1     		bne	.L108
 843:main.c        **** 					{
 844:main.c        **** 						psz = strtok(0, " ");
 2248              		.loc 1 844 0
 2249 10bc 2849     		ldr	r1, .L132+8
 2250 10be 0020     		movs	r0, #0
 2251 10c0 FFF7FEFF 		bl	strtok
 2252 10c4 B861     		str	r0, [r7, #24]
 845:main.c        ****                         sscanf(psz,"%hu", &avar);
 2253              		.loc 1 845 0
 2254 10c6 3B1D     		adds	r3, r7, #4
 2255 10c8 1A46     		mov	r2, r3
 2256 10ca 2649     		ldr	r1, .L132+12
 2257 10cc B869     		ldr	r0, [r7, #24]
 2258 10ce FFF7FEFF 		bl	sscanf
 846:main.c        **** 						//preamp_b = (uint8) avar;
 847:main.c        ****                         ScopeB_Buf_SetGain((uint8) avar);
 2259              		.loc 1 847 0
 2260 10d2 BB88     		ldrh	r3, [r7, #4]
 2261 10d4 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 56


 2262 10d6 1846     		mov	r0, r3
 2263 10d8 FFF7FEFF 		bl	ScopeB_Buf_SetGain
 2264 10dc 5BE0     		b	.L6
 2265              	.L108:
 848:main.c        **** 					}
 849:main.c        ****                     else if(*psz == 'C')
 2266              		.loc 1 849 0
 2267 10de BB69     		ldr	r3, [r7, #24]
 2268 10e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2269 10e2 432B     		cmp	r3, #67
 2270 10e4 10D1     		bne	.L109
 850:main.c        **** 					{
 851:main.c        ****                         psz = strtok(0, " ");
 2271              		.loc 1 851 0
 2272 10e6 1E49     		ldr	r1, .L132+8
 2273 10e8 0020     		movs	r0, #0
 2274 10ea FFF7FEFF 		bl	strtok
 2275 10ee B861     		str	r0, [r7, #24]
 852:main.c        ****                         sscanf(psz,"%hu", &avar);
 2276              		.loc 1 852 0
 2277 10f0 3B1D     		adds	r3, r7, #4
 2278 10f2 1A46     		mov	r2, r3
 2279 10f4 1B49     		ldr	r1, .L132+12
 2280 10f6 B869     		ldr	r0, [r7, #24]
 2281 10f8 FFF7FEFF 		bl	sscanf
 853:main.c        **** 						//preamp_a = (uint8) avar;
 854:main.c        ****                         ScopeC_Buf_SetGain((uint8) avar);
 2282              		.loc 1 854 0
 2283 10fc BB88     		ldrh	r3, [r7, #4]
 2284 10fe DBB2     		uxtb	r3, r3
 2285 1100 1846     		mov	r0, r3
 2286 1102 FFF7FEFF 		bl	ScopeC_Buf_SetGain
 2287 1106 46E0     		b	.L6
 2288              	.L109:
 855:main.c        **** 					}
 856:main.c        **** 					else if(*psz == 'D')
 2289              		.loc 1 856 0
 2290 1108 BB69     		ldr	r3, [r7, #24]
 2291 110a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2292 110c 442B     		cmp	r3, #68
 2293 110e 42D1     		bne	.L6
 857:main.c        **** 					{
 858:main.c        **** 						psz = strtok(0, " ");
 2294              		.loc 1 858 0
 2295 1110 1349     		ldr	r1, .L132+8
 2296 1112 0020     		movs	r0, #0
 2297 1114 FFF7FEFF 		bl	strtok
 2298 1118 B861     		str	r0, [r7, #24]
 859:main.c        ****                         sscanf(psz,"%hu", &avar);
 2299              		.loc 1 859 0
 2300 111a 3B1D     		adds	r3, r7, #4
 2301 111c 1A46     		mov	r2, r3
 2302 111e 1149     		ldr	r1, .L132+12
 2303 1120 B869     		ldr	r0, [r7, #24]
 2304 1122 FFF7FEFF 		bl	sscanf
 860:main.c        **** 						//preamp_b = (uint8) avar;
 861:main.c        ****                         ScopeC_Buf_SetGain((uint8) avar);
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 57


 2305              		.loc 1 861 0
 2306 1126 BB88     		ldrh	r3, [r7, #4]
 2307 1128 DBB2     		uxtb	r3, r3
 2308 112a 1846     		mov	r0, r3
 2309 112c FFF7FEFF 		bl	ScopeC_Buf_SetGain
 2310 1130 31E0     		b	.L6
 2311              	.L105:
 862:main.c        **** 					}
 863:main.c        **** 				}
 864:main.c        ****                 else if(*psz == 'M')
 2312              		.loc 1 864 0
 2313 1132 BB69     		ldr	r3, [r7, #24]
 2314 1134 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2315 1136 4D2B     		cmp	r3, #77
 2316 1138 26D1     		bne	.L110
 865:main.c        **** 				{
 866:main.c        **** 					// Select scope input mux channel A or C and B or D
 867:main.c        **** 					psz = strtok(0, " ");
 2317              		.loc 1 867 0
 2318 113a 0949     		ldr	r1, .L132+8
 2319 113c 0020     		movs	r0, #0
 2320 113e FFF7FEFF 		bl	strtok
 2321 1142 B861     		str	r0, [r7, #24]
 868:main.c        **** 					if(*psz == 'A')
 2322              		.loc 1 868 0
 2323 1144 BB69     		ldr	r3, [r7, #24]
 2324 1146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2325 1148 412B     		cmp	r3, #65
 2326 114a 15D1     		bne	.L111
 869:main.c        **** 					{
 870:main.c        ****                         AMux_1_Select(SCOPE_CHANNEL_1);
 2327              		.loc 1 870 0
 2328 114c 0020     		movs	r0, #0
 2329 114e FFF7FEFF 		bl	AMux_1_FastSelect
 2330 1152 20E0     		b	.L6
 2331              	.L133:
 2332 1154 AFF30080 		.align	3
 2333              	.L132:
 2334 1158 14AE47E1 		.word	-515396076
 2335 115c 7A14F03F 		.word	1072698490
 2336 1160 00000000 		.word	.LC0
 2337 1164 18000000 		.word	.LC2
 2338 1168 00000000 		.word	Channel_1_Data
 2339 116c 00000000 		.word	Channel_2_Data
 2340 1170 00000000 		.word	USB_Out_Buffer
 2341 1174 3F000080 		.word	-2147483585
 2342              	.L111:
 871:main.c        **** 					}
 872:main.c        ****                     else if(*psz == 'C')
 2343              		.loc 1 872 0
 2344 1178 BB69     		ldr	r3, [r7, #24]
 2345 117a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2346 117c 432B     		cmp	r3, #67
 2347 117e 0AD1     		bne	.L6
 873:main.c        ****                     {
 874:main.c        ****                         AMux_1_Select(SCOPE_CHANNEL_2);
 2348              		.loc 1 874 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 58


 2349 1180 0120     		movs	r0, #1
 2350 1182 FFF7FEFF 		bl	AMux_1_FastSelect
 2351 1186 06E0     		b	.L6
 2352              	.L110:
 875:main.c        ****                     }
 876:main.c        **** 				}
 877:main.c        **** 				else
 878:main.c        **** 				{
 879:main.c        **** 					PutString("Error: Unrecognized Scope Command\n\r");
 2353              		.loc 1 879 0
 2354 1188 1748     		ldr	r0, .L134
 2355 118a FFF7FEFF 		bl	PutString
 2356 118e 02E0     		b	.L6
 2357              	.L60:
 880:main.c        **** 				}
 881:main.c        **** 			// END OF SCOPE 'S' COMMANDS
 882:main.c        **** 			}
 883:main.c        **** 			else
 884:main.c        **** 			{
 885:main.c        **** 				// command not recognized, toss it
 886:main.c        **** 				PutString("Error: Unknown Command\n\r");
 2358              		.loc 1 886 0
 2359 1190 1648     		ldr	r0, .L134+4
 2360 1192 FFF7FEFF 		bl	PutString
 2361              	.L6:
 887:main.c        **** 			}
 888:main.c        **** 			bCommandReady = 0;
 2362              		.loc 1 888 0
 2363 1196 164B     		ldr	r3, .L134+8
 2364 1198 0022     		movs	r2, #0
 2365 119a 1A70     		strb	r2, [r3]
 2366              	.L4:
 889:main.c        **** 		}
 890:main.c        **** 		
 891:main.c        **** 		status = Trigger_Status_Read();
 2367              		.loc 1 891 0
 2368 119c FFF7FEFF 		bl	Trigger_Status_Read
 2369 11a0 0346     		mov	r3, r0
 2370 11a2 7B72     		strb	r3, [r7, #9]
 892:main.c        **** 						
 893:main.c        **** 		// if we have completed a capture, get the index of the last sample
 894:main.c        **** 		if((status & CAPTURE_COMPLETE ) != 0)
 2371              		.loc 1 894 0
 2372 11a4 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 2373 11a6 03F00403 		and	r3, r3, #4
 2374 11aa 002B     		cmp	r3, #0
 2375 11ac 3EF42FAF 		beq	.L114
 895:main.c        **** 		{
 896:main.c        **** 			ending_offset = GetLastSampleIndex(DMA_Channel_1_Chan);
 2376              		.loc 1 896 0
 2377 11b0 104B     		ldr	r3, .L134+12
 2378 11b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2379 11b4 1846     		mov	r0, r3
 2380 11b6 FFF7FEFF 		bl	GetLastSampleIndex
 2381 11ba 0346     		mov	r3, r0
 2382 11bc FB80     		strh	r3, [r7, #6]	@ movhi
 897:main.c        **** 			
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 59


 898:main.c        **** 			// return the capture info
 899:main.c        **** 			PutChar('A');
 2383              		.loc 1 899 0
 2384 11be 4120     		movs	r0, #65
 2385 11c0 FFF7FEFF 		bl	PutChar
 900:main.c        **** 			PutChar((uint8) ((ending_offset >> 8) & 0x000F)); // address of the end, MSbits
 2386              		.loc 1 900 0
 2387 11c4 FB88     		ldrh	r3, [r7, #6]
 2388 11c6 1B0A     		lsrs	r3, r3, #8
 2389 11c8 9BB2     		uxth	r3, r3
 2390 11ca DBB2     		uxtb	r3, r3
 2391 11cc 03F00F03 		and	r3, r3, #15
 2392 11d0 DBB2     		uxtb	r3, r3
 2393 11d2 1846     		mov	r0, r3
 2394 11d4 FFF7FEFF 		bl	PutChar
 901:main.c        **** 			PutChar((uint8) (ending_offset & 0x00FF)); // address of the end, LSbits
 2395              		.loc 1 901 0
 2396 11d8 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2397 11da DBB2     		uxtb	r3, r3
 2398 11dc 1846     		mov	r0, r3
 2399 11de FFF7FEFF 		bl	PutChar
 902:main.c        **** 			//PutChar('\n'); // terminate the return data, through testing, there is no need to send this ch
 903:main.c        **** 		}
 904:main.c        **** 
 905:main.c        ****         //GJL
 906:main.c        **** //		// digital input update
 907:main.c        **** //		if((Digital_Input_Status_Last != Digital_Input_Status_Read()) && (Digital_AutoUpdate != 0))
 908:main.c        **** //		{
 909:main.c        **** //			PutChar('I');
 910:main.c        **** //			PutChar((uint8) Digital_Input_Status_Read());
 911:main.c        **** //			Digital_Input_Status_Last = Digital_Input_Status_Read();
 912:main.c        **** //		}
 913:main.c        **** 	}
 2400              		.loc 1 913 0
 2401 11e2 FEF714BF 		b	.L114
 2402              	.L135:
 2403 11e6 00BF     		.align	2
 2404              	.L134:
 2405 11e8 1C000000 		.word	.LC3
 2406 11ec 40000000 		.word	.LC4
 2407 11f0 00000000 		.word	bCommandReady
 2408 11f4 00000000 		.word	DMA_Channel_1_Chan
 2409              		.cfi_endproc
 2410              	.LFE64:
 2411              		.size	main, .-main
 2412              		.section	.text.Hardware_Config,"ax",%progbits
 2413              		.align	2
 2414              		.global	Hardware_Config
 2415              		.thumb
 2416              		.thumb_func
 2417              		.type	Hardware_Config, %function
 2418              	Hardware_Config:
 2419              	.LFB65:
 914:main.c        **** }
 915:main.c        **** 
 916:main.c        **** void Hardware_Config(void)
 917:main.c        **** {
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 60


 2420              		.loc 1 917 0
 2421              		.cfi_startproc
 2422              		@ args = 0, pretend = 0, frame = 0
 2423              		@ frame_needed = 1, uses_anonymous_args = 0
 2424 0000 80B5     		push	{r7, lr}
 2425              		.cfi_def_cfa_offset 8
 2426              		.cfi_offset 7, -8
 2427              		.cfi_offset 14, -4
 2428 0002 00AF     		add	r7, sp, #0
 2429              		.cfi_def_cfa_register 7
 918:main.c        ****     CyGlobalIntEnable;
 2430              		.loc 1 918 0
 2431              		.syntax unified
 2432              	@ 918 "main.c" 1
 2433 0004 62B6     		CPSIE   i
 2434              	@ 0 "" 2
 919:main.c        **** 	
 920:main.c        **** 	cCommandsReady = 0;
 2435              		.loc 1 920 0
 2436              		.thumb
 2437              		.syntax unified
 2438 0006 494B     		ldr	r3, .L138
 2439 0008 0022     		movs	r2, #0
 2440 000a 1A80     		strh	r2, [r3]	@ movhi
 921:main.c        **** 	bCommandReady = 0;
 2441              		.loc 1 921 0
 2442 000c 484B     		ldr	r3, .L138+4
 2443 000e 0022     		movs	r2, #0
 2444 0010 1A70     		strb	r2, [r3]
 922:main.c        ****     
 923:main.c        ****     USBUART_Start(0, USBUART_5V_OPERATION);
 2445              		.loc 1 923 0
 2446 0012 0121     		movs	r1, #1
 2447 0014 0020     		movs	r0, #0
 2448 0016 FFF7FEFF 		bl	USBUART_Start
 924:main.c        **** 	while(!USBUART_GetConfiguration())
 2449              		.loc 1 924 0
 2450 001a 00BF     		nop
 2451              	.L137:
 2452              		.loc 1 924 0 is_stmt 0 discriminator 1
 2453 001c FFF7FEFF 		bl	USBUART_GetConfiguration
 2454 0020 0346     		mov	r3, r0
 2455 0022 002B     		cmp	r3, #0
 2456 0024 FAD0     		beq	.L137
 925:main.c        ****     {
 926:main.c        ****         /* Wait for USBUART to complete configuration */
 927:main.c        ****     }
 928:main.c        ****     USBUART_CDC_Init();
 2457              		.loc 1 928 0 is_stmt 1
 2458 0026 FFF7FEFF 		bl	USBUART_CDC_Init
 929:main.c        **** 	
 930:main.c        **** 	Amux_Trigger_Select(SCOPE_CHANNEL_1);
 2459              		.loc 1 930 0
 2460 002a 0020     		movs	r0, #0
 2461 002c FFF7FEFF 		bl	Amux_Trigger_FastSelect
 931:main.c        ****     
 932:main.c        ****     ADC_1_Start();
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 61


 2462              		.loc 1 932 0
 2463 0030 FFF7FEFF 		bl	ADC_1_Start
 933:main.c        ****     ADC_2_Start();
 2464              		.loc 1 933 0
 2465 0034 FFF7FEFF 		bl	ADC_2_Start
 934:main.c        ****     ScopeA_Buf_Start();
 2466              		.loc 1 934 0
 2467 0038 FFF7FEFF 		bl	ScopeA_Buf_Start
 935:main.c        ****     ScopeB_Buf_Start();
 2468              		.loc 1 935 0
 2469 003c FFF7FEFF 		bl	ScopeB_Buf_Start
 936:main.c        ****     ScopeC_Buf_Start();
 2470              		.loc 1 936 0
 2471 0040 FFF7FEFF 		bl	ScopeC_Buf_Start
 937:main.c        ****     Vtrigger_Start();
 2472              		.loc 1 937 0
 2473 0044 FFF7FEFF 		bl	Vtrigger_Start
 938:main.c        ****     Trigger_Comp_Start();
 2474              		.loc 1 938 0
 2475 0048 FFF7FEFF 		bl	Trigger_Comp_Start
 939:main.c        ****     
 940:main.c        ****     // The extras
 941:main.c        ****     AuxDAC_Buf_Start();
 2476              		.loc 1 941 0
 2477 004c FFF7FEFF 		bl	AuxDAC_Buf_Start
 942:main.c        ****     AuxDAC_1_Start();
 2478              		.loc 1 942 0
 2479 0050 FFF7FEFF 		bl	AuxDAC_1_Start
 943:main.c        ****     
 944:main.c        ****     PWM_Sample_Buffer_Start();
 2480              		.loc 1 944 0
 2481 0054 FFF7FEFF 		bl	PWM_Sample_Buffer_Start
 945:main.c        **** 	// update the period to match the trigger buffer size for maximum post trigger capture
 946:main.c        **** 	PWM_Sample_Buffer_WritePeriod(BUFFER_SIZE-1); // maximum post trigger buffer
 2482              		.loc 1 946 0
 2483 0058 40F2FF30 		movw	r0, #1023
 2484 005c FFF7FEFF 		bl	PWM_Sample_Buffer_WritePeriod
 947:main.c        **** 	//PWM_Sample_Buffer_WritePeriod(2); // minimum post trigger buffer, 3 samples after trigger (used 
 948:main.c        **** 	// after setting the period, need to set the count to the proper value as well
 949:main.c        **** 	PWM_Sample_Buffer_WriteCounter(BUFFER_SIZE-1); // maximum post trigger buffer
 2485              		.loc 1 949 0
 2486 0060 40F2FF30 		movw	r0, #1023
 2487 0064 FFF7FEFF 		bl	PWM_Sample_Buffer_WriteCounter
 950:main.c        **** 	//PWM_Sample_Buffer_WriteCounter(2); // minimum post trigger buffer, 3 samples after trigger
 951:main.c        **** 	
 952:main.c        ****     ScopeA_Buf_SetGain(0);
 2488              		.loc 1 952 0
 2489 0068 0020     		movs	r0, #0
 2490 006a FFF7FEFF 		bl	ScopeA_Buf_SetGain
 953:main.c        ****     ScopeB_Buf_SetGain(0);
 2491              		.loc 1 953 0
 2492 006e 0020     		movs	r0, #0
 2493 0070 FFF7FEFF 		bl	ScopeB_Buf_SetGain
 954:main.c        ****     ScopeC_Buf_SetGain(0);
 2494              		.loc 1 954 0
 2495 0074 0020     		movs	r0, #0
 2496 0076 FFF7FEFF 		bl	ScopeC_Buf_SetGain
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 62


 955:main.c        ****     
 956:main.c        **** 	trigger_source = SCOPE_CHANNEL_1;
 2497              		.loc 1 956 0
 2498 007a 2E4B     		ldr	r3, .L138+8
 2499 007c 0022     		movs	r2, #0
 2500 007e 1A70     		strb	r2, [r3]
 957:main.c        ****     
 958:main.c        **** 	// basic configuration is trigger on the rising edge of channel 0
 959:main.c        **** 	Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 2501              		.loc 1 959 0
 2502 0080 FFF7FEFF 		bl	Trigger_Control_Read
 2503 0084 0346     		mov	r3, r0
 2504 0086 23F00F03 		bic	r3, r3, #15
 2505 008a DBB2     		uxtb	r3, r3
 2506 008c 1846     		mov	r0, r3
 2507 008e FFF7FEFF 		bl	Trigger_Control_Write
 960:main.c        ****     Trigger_Control_Write(Trigger_Control_Read() | RISING_EDGE_TRIGGERED);
 2508              		.loc 1 960 0
 2509 0092 FFF7FEFF 		bl	Trigger_Control_Read
 2510 0096 0346     		mov	r3, r0
 2511 0098 43F00203 		orr	r3, r3, #2
 2512 009c DBB2     		uxtb	r3, r3
 2513 009e 1846     		mov	r0, r3
 2514 00a0 FFF7FEFF 		bl	Trigger_Control_Write
 961:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | FALLING_EDGE_TRIGGERED);
 962:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | EITHER_EDGE_TRIGGERED);
 963:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | EXTERNAL_TRIGGERED);
 964:main.c        **** 	
 965:main.c        **** 	// waveform generator control
 966:main.c        **** 	Wave_Control_Write(Wave_Control_Read() & ~WAVEA_SELECT_MASK);
 2515              		.loc 1 966 0
 2516 00a4 FFF7FEFF 		bl	Wave_Control_Read
 2517 00a8 0346     		mov	r3, r0
 2518 00aa 23F00103 		bic	r3, r3, #1
 2519 00ae DBB2     		uxtb	r3, r3
 2520 00b0 1846     		mov	r0, r3
 2521 00b2 FFF7FEFF 		bl	Wave_Control_Write
 967:main.c        **** 	Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 2522              		.loc 1 967 0
 2523 00b6 FFF7FEFF 		bl	Wave_Control_Read
 2524 00ba 0346     		mov	r3, r0
 2525 00bc 1846     		mov	r0, r3
 2526 00be FFF7FEFF 		bl	Wave_Control_Write
 968:main.c        **** 	// Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_NOISE);
 969:main.c        **** 	WaveA_DAC_Start();
 2527              		.loc 1 969 0
 2528 00c2 FFF7FEFF 		bl	WaveA_DAC_Start
 970:main.c        **** 	WaveA_Buf_Start();
 2529              		.loc 1 970 0
 2530 00c6 FFF7FEFF 		bl	WaveA_Buf_Start
 971:main.c        ****     WaveB_DAC_Start();
 2531              		.loc 1 971 0
 2532 00ca FFF7FEFF 		bl	WaveB_DAC_Start
 972:main.c        **** 	WaveB_Buf_Start();
 2533              		.loc 1 972 0
 2534 00ce FFF7FEFF 		bl	WaveB_Buf_Start
 973:main.c        **** 	WaveA_DAC_Wave1Setup(&WaveformA_Buffer[0], WAVEFORM_BUFFER_SIZE);
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 63


 2535              		.loc 1 973 0
 2536 00d2 4FF40061 		mov	r1, #2048
 2537 00d6 1848     		ldr	r0, .L138+12
 2538 00d8 FFF7FEFF 		bl	WaveA_DAC_Wave1Setup
 974:main.c        **** 	wavea_gain = 0;
 2539              		.loc 1 974 0
 2540 00dc 174B     		ldr	r3, .L138+16
 2541 00de 0022     		movs	r2, #0
 2542 00e0 1A70     		strb	r2, [r3]
 975:main.c        **** 	WaveB_DAC_Wave1Setup(&WaveformB_Buffer[0], WAVEFORM_BUFFER_SIZE);
 2543              		.loc 1 975 0
 2544 00e2 4FF40061 		mov	r1, #2048
 2545 00e6 1648     		ldr	r0, .L138+20
 2546 00e8 FFF7FEFF 		bl	WaveB_DAC_Wave1Setup
 976:main.c        **** 	waveb_gain = 0;
 2547              		.loc 1 976 0
 2548 00ec 154B     		ldr	r3, .L138+24
 2549 00ee 0022     		movs	r2, #0
 2550 00f0 1A70     		strb	r2, [r3]
 977:main.c        ****     
 978:main.c        **** 	PRS_Start();
 2551              		.loc 1 978 0
 2552 00f2 FFF7FEFF 		bl	PRS_Start
 979:main.c        ****     //
 980:main.c        ****     // Change noise output to use value adjusted for amplitude/offset
 981:main.c        **** 	//Wave_DAC_Wave2Setup((uint8 *) PRS_SEED_PTR, 1);
 982:main.c        ****     WaveA_DAC_Wave2Setup(&Noise_Adjusted, 1);
 2553              		.loc 1 982 0
 2554 00f6 0121     		movs	r1, #1
 2555 00f8 1348     		ldr	r0, .L138+28
 2556 00fa FFF7FEFF 		bl	WaveA_DAC_Wave2Setup
 983:main.c        ****     WaveB_DAC_Wave2Setup(&Noise_Adjusted, 1);
 2557              		.loc 1 983 0
 2558 00fe 0121     		movs	r1, #1
 2559 0100 1148     		ldr	r0, .L138+28
 2560 0102 FFF7FEFF 		bl	WaveB_DAC_Wave2Setup
 984:main.c        ****     //
 985:main.c        **** //	// digital IO initializations
 986:main.c        **** //	Digital_Input_Status_Last = 0;
 987:main.c        **** 	Digital_Out_Control_Write(0);
 2561              		.loc 1 987 0
 2562 0106 0020     		movs	r0, #0
 2563 0108 FFF7FEFF 		bl	Digital_Out_Control_Write
 988:main.c        **** 	Digital_AutoUpdate = 0;
 2564              		.loc 1 988 0
 2565 010c 0F4B     		ldr	r3, .L138+32
 2566 010e 0022     		movs	r2, #0
 2567 0110 1A70     		strb	r2, [r3]
 989:main.c        **** //	
 990:main.c        **** 	Dig_PWM_Start();
 2568              		.loc 1 990 0
 2569 0112 FFF7FEFF 		bl	Dig_PWM_Start
 991:main.c        ****     Dig_PWM_Enable();
 2570              		.loc 1 991 0
 2571 0116 FFF7FEFF 		bl	Dig_PWM_Enable
 992:main.c        ****     Dig_PWM_Clock_Start();
 2572              		.loc 1 992 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 64


 2573 011a FFF7FEFF 		bl	Dig_PWM_Clock_Start
 993:main.c        ****     Dig_PWM_Clock_SetDividerValue(128);
 2574              		.loc 1 993 0
 2575 011e 0121     		movs	r1, #1
 2576 0120 7F20     		movs	r0, #127
 2577 0122 FFF7FEFF 		bl	Dig_PWM_Clock_SetDividerRegister
 994:main.c        **** }
 2578              		.loc 1 994 0
 2579 0126 00BF     		nop
 2580 0128 80BD     		pop	{r7, pc}
 2581              	.L139:
 2582 012a 00BF     		.align	2
 2583              	.L138:
 2584 012c 00000000 		.word	cCommandsReady
 2585 0130 00000000 		.word	bCommandReady
 2586 0134 00000000 		.word	trigger_source
 2587 0138 00000000 		.word	WaveformA_Buffer
 2588 013c 00000000 		.word	wavea_gain
 2589 0140 00000000 		.word	WaveformB_Buffer
 2590 0144 00000000 		.word	waveb_gain
 2591 0148 00000000 		.word	Noise_Adjusted
 2592 014c 00000000 		.word	Digital_AutoUpdate
 2593              		.cfi_endproc
 2594              	.LFE65:
 2595              		.size	Hardware_Config, .-Hardware_Config
 2596              		.section	.text.DMA_Config,"ax",%progbits
 2597              		.align	2
 2598              		.global	DMA_Config
 2599              		.thumb
 2600              		.thumb_func
 2601              		.type	DMA_Config, %function
 2602              	DMA_Config:
 2603              	.LFB66:
 995:main.c        **** 
 996:main.c        **** void DMA_Config(void)
 997:main.c        **** {
 2604              		.loc 1 997 0
 2605              		.cfi_startproc
 2606              		@ args = 0, pretend = 0, frame = 0
 2607              		@ frame_needed = 1, uses_anonymous_args = 0
 2608 0000 80B5     		push	{r7, lr}
 2609              		.cfi_def_cfa_offset 8
 2610              		.cfi_offset 7, -8
 2611              		.cfi_offset 14, -4
 2612 0002 00AF     		add	r7, sp, #0
 2613              		.cfi_def_cfa_register 7
 998:main.c        ****     DMA_Channel_1_Chan = DMA_Channel_1_DmaInitialize(DMA_Channel_1_BYTES_PER_BURST, DMA_Channel_1_R
 2614              		.loc 1 998 0
 2615 0004 41F6FF73 		movw	r3, #8191
 2616 0008 4FF48042 		mov	r2, #16384
 2617 000c 0121     		movs	r1, #1
 2618 000e 0220     		movs	r0, #2
 2619 0010 FFF7FEFF 		bl	DMA_Channel_1_DmaInitialize
 2620 0014 0346     		mov	r3, r0
 2621 0016 1A46     		mov	r2, r3
 2622 0018 3F4B     		ldr	r3, .L142
 2623 001a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 65


 999:main.c        ****         HI16(DMA_Channel_1_SRC_BASE), HI16(DMA_Channel_1_DST_BASE));
1000:main.c        ****     DMA_Channel_1_TD[0] = CyDmaTdAllocate();
 2624              		.loc 1 1000 0
 2625 001c FFF7FEFF 		bl	CyDmaTdAllocate
 2626 0020 0346     		mov	r3, r0
 2627 0022 1A46     		mov	r2, r3
 2628 0024 3D4B     		ldr	r3, .L142+4
 2629 0026 1A70     		strb	r2, [r3]
1001:main.c        ****     CyDmaTdSetConfiguration(DMA_Channel_1_TD[0], BUFFER_SIZE*sizeof(int16), DMA_Channel_1_TD[0], DM
 2630              		.loc 1 1001 0
 2631 0028 3C4B     		ldr	r3, .L142+4
 2632 002a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2633 002c 3B4B     		ldr	r3, .L142+4
 2634 002e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2635 0030 0623     		movs	r3, #6
 2636 0032 4FF40061 		mov	r1, #2048
 2637 0036 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1002:main.c        ****     CyDmaTdSetAddress(DMA_Channel_1_TD[0], LO16((uint32)ADC_1_SAR_WRK0_PTR), LO16((uint32)&Channel_
 2638              		.loc 1 1002 0
 2639 003a 384B     		ldr	r3, .L142+4
 2640 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2641 003e 384A     		ldr	r2, .L142+8
 2642 0040 92B2     		uxth	r2, r2
 2643 0042 45F6A231 		movw	r1, #23458
 2644 0046 1846     		mov	r0, r3
 2645 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
1003:main.c        ****     CyDmaChSetInitialTd(DMA_Channel_1_Chan, DMA_Channel_1_TD[0]);
 2646              		.loc 1 1003 0
 2647 004c 324B     		ldr	r3, .L142
 2648 004e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2649 0050 324B     		ldr	r3, .L142+4
 2650 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2651 0054 1946     		mov	r1, r3
 2652 0056 1046     		mov	r0, r2
 2653 0058 FFF7FEFF 		bl	CyDmaChSetInitialTd
1004:main.c        ****     CyDmaChRoundRobin(DMA_Channel_1_Chan, 1);
 2654              		.loc 1 1004 0
 2655 005c 2E4B     		ldr	r3, .L142
 2656 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2657 0060 0121     		movs	r1, #1
 2658 0062 1846     		mov	r0, r3
 2659 0064 FFF7FEFF 		bl	CyDmaChRoundRobin
1005:main.c        ****     CyDmaChSetRequest(DMA_Channel_1_Chan, CPU_TERM_CHAIN);
 2660              		.loc 1 1005 0
 2661 0068 2B4B     		ldr	r3, .L142
 2662 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2663 006c 0421     		movs	r1, #4
 2664 006e 1846     		mov	r0, r3
 2665 0070 FFF7FEFF 		bl	CyDmaChSetRequest
1006:main.c        ****     CyDmaChEnable(DMA_Channel_1_Chan, 1);
 2666              		.loc 1 1006 0
 2667 0074 284B     		ldr	r3, .L142
 2668 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2669 0078 0121     		movs	r1, #1
 2670 007a 1846     		mov	r0, r3
 2671 007c FFF7FEFF 		bl	CyDmaChEnable
1007:main.c        ****     CyDmaChEnable(DMA_Channel_1_Chan, 1);
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 66


 2672              		.loc 1 1007 0
 2673 0080 254B     		ldr	r3, .L142
 2674 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2675 0084 0121     		movs	r1, #1
 2676 0086 1846     		mov	r0, r3
 2677 0088 FFF7FEFF 		bl	CyDmaChEnable
1008:main.c        **** 
1009:main.c        ****     DMA_Channel_2_Chan = DMA_Channel_2_DmaInitialize(DMA_Channel_2_BYTES_PER_BURST, DMA_Channel_2_R
 2678              		.loc 1 1009 0
 2679 008c 41F6FF73 		movw	r3, #8191
 2680 0090 4FF48042 		mov	r2, #16384
 2681 0094 0121     		movs	r1, #1
 2682 0096 0220     		movs	r0, #2
 2683 0098 FFF7FEFF 		bl	DMA_Channel_2_DmaInitialize
 2684 009c 0346     		mov	r3, r0
 2685 009e 1A46     		mov	r2, r3
 2686 00a0 204B     		ldr	r3, .L142+12
 2687 00a2 1A70     		strb	r2, [r3]
1010:main.c        ****         HI16(DMA_Channel_2_SRC_BASE), HI16(DMA_Channel_2_DST_BASE));
1011:main.c        ****     DMA_Channel_2_TD[0] = CyDmaTdAllocate();
 2688              		.loc 1 1011 0
 2689 00a4 FFF7FEFF 		bl	CyDmaTdAllocate
 2690 00a8 0346     		mov	r3, r0
 2691 00aa 1A46     		mov	r2, r3
 2692 00ac 1E4B     		ldr	r3, .L142+16
 2693 00ae 1A70     		strb	r2, [r3]
1012:main.c        ****     CyDmaTdSetConfiguration(DMA_Channel_2_TD[0], BUFFER_SIZE*sizeof(int16), DMA_Channel_2_TD[0], DM
 2694              		.loc 1 1012 0
 2695 00b0 1D4B     		ldr	r3, .L142+16
 2696 00b2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2697 00b4 1C4B     		ldr	r3, .L142+16
 2698 00b6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2699 00b8 0223     		movs	r3, #2
 2700 00ba 4FF40061 		mov	r1, #2048
 2701 00be FFF7FEFF 		bl	CyDmaTdSetConfiguration
1013:main.c        ****     CyDmaTdSetAddress(DMA_Channel_2_TD[0], LO16((uint32)ADC_2_SAR_WRK0_PTR), LO16((uint32)&Channel_
 2702              		.loc 1 1013 0
 2703 00c2 194B     		ldr	r3, .L142+16
 2704 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2705 00c6 194A     		ldr	r2, .L142+20
 2706 00c8 92B2     		uxth	r2, r2
 2707 00ca 45F6A031 		movw	r1, #23456
 2708 00ce 1846     		mov	r0, r3
 2709 00d0 FFF7FEFF 		bl	CyDmaTdSetAddress
1014:main.c        ****     CyDmaChSetInitialTd(DMA_Channel_2_Chan, DMA_Channel_2_TD[0]);
 2710              		.loc 1 1014 0
 2711 00d4 134B     		ldr	r3, .L142+12
 2712 00d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2713 00d8 134B     		ldr	r3, .L142+16
 2714 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2715 00dc 1946     		mov	r1, r3
 2716 00de 1046     		mov	r0, r2
 2717 00e0 FFF7FEFF 		bl	CyDmaChSetInitialTd
1015:main.c        ****     CyDmaChRoundRobin(DMA_Channel_2_Chan, 1);
 2718              		.loc 1 1015 0
 2719 00e4 0F4B     		ldr	r3, .L142+12
 2720 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 67


 2721 00e8 0121     		movs	r1, #1
 2722 00ea 1846     		mov	r0, r3
 2723 00ec FFF7FEFF 		bl	CyDmaChRoundRobin
1016:main.c        ****     CyDmaChSetRequest(DMA_Channel_2_Chan, CPU_TERM_CHAIN);
 2724              		.loc 1 1016 0
 2725 00f0 0C4B     		ldr	r3, .L142+12
 2726 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2727 00f4 0421     		movs	r1, #4
 2728 00f6 1846     		mov	r0, r3
 2729 00f8 FFF7FEFF 		bl	CyDmaChSetRequest
1017:main.c        ****     CyDmaChEnable(DMA_Channel_2_Chan, 1);
 2730              		.loc 1 1017 0
 2731 00fc 094B     		ldr	r3, .L142+12
 2732 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2733 0100 0121     		movs	r1, #1
 2734 0102 1846     		mov	r0, r3
 2735 0104 FFF7FEFF 		bl	CyDmaChEnable
1018:main.c        ****     CyDmaChEnable(DMA_Channel_2_Chan, 1);
 2736              		.loc 1 1018 0
 2737 0108 064B     		ldr	r3, .L142+12
 2738 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2739 010c 0121     		movs	r1, #1
 2740 010e 1846     		mov	r0, r3
 2741 0110 FFF7FEFF 		bl	CyDmaChEnable
1019:main.c        **** 
1020:main.c        ****     return;
 2742              		.loc 1 1020 0
 2743 0114 00BF     		nop
1021:main.c        **** }
 2744              		.loc 1 1021 0
 2745 0116 80BD     		pop	{r7, pc}
 2746              	.L143:
 2747              		.align	2
 2748              	.L142:
 2749 0118 00000000 		.word	DMA_Channel_1_Chan
 2750 011c 00000000 		.word	DMA_Channel_1_TD
 2751 0120 00000000 		.word	Channel_1_Data
 2752 0124 00000000 		.word	DMA_Channel_2_Chan
 2753 0128 00000000 		.word	DMA_Channel_2_TD
 2754 012c 00000000 		.word	Channel_2_Data
 2755              		.cfi_endproc
 2756              	.LFE66:
 2757              		.size	DMA_Config, .-DMA_Config
 2758              		.section	.text.GetLastSampleIndex,"ax",%progbits
 2759              		.align	2
 2760              		.global	GetLastSampleIndex
 2761              		.thumb
 2762              		.thumb_func
 2763              		.type	GetLastSampleIndex, %function
 2764              	GetLastSampleIndex:
 2765              	.LFB67:
1022:main.c        **** 
1023:main.c        **** // returns the address of the first sample in the circular DMA buffer
1024:main.c        **** 
1025:main.c        **** uint16 GetLastSampleIndex(uint8 chHandle)
1026:main.c        **** {
 2766              		.loc 1 1026 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 68


 2767              		.cfi_startproc
 2768              		@ args = 0, pretend = 0, frame = 16
 2769              		@ frame_needed = 1, uses_anonymous_args = 0
 2770              		@ link register save eliminated.
 2771 0000 80B4     		push	{r7}
 2772              		.cfi_def_cfa_offset 4
 2773              		.cfi_offset 7, -4
 2774 0002 85B0     		sub	sp, sp, #20
 2775              		.cfi_def_cfa_offset 24
 2776 0004 00AF     		add	r7, sp, #0
 2777              		.cfi_def_cfa_register 7
 2778 0006 0346     		mov	r3, r0
 2779 0008 FB71     		strb	r3, [r7, #7]
1027:main.c        **** 	uint16 index;
1028:main.c        **** 
1029:main.c        **** 	// get the upper 16 bits of the destination (not strictly necessary) (actually it doesn't work sin
1030:main.c        **** 	// upper 16 bit addresses for the same RAM information
1031:main.c        **** 	//dest_address = (((uint32) CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG1[3]) << 24) | (((uint32) CY_DMA
1032:main.c        **** 	
1033:main.c        **** 	// grab the lower 16 bits of the destination address
1034:main.c        **** 	// the assumption here is that "work seperate" has been enabled, so a copy of the TD is stored in 
1035:main.c        **** 	index = ((uint32) CY_DMA_TDMEM_STRUCT_PTR[chHandle].TD1[3] << 8) | ((uint32) CY_DMA_TDMEM_STRUCT_P
 2780              		.loc 1 1035 0
 2781 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2782 000c DB00     		lsls	r3, r3, #3
 2783 000e 03F18043 		add	r3, r3, #1073741824
 2784 0012 03F5F043 		add	r3, r3, #30720
 2785 0016 DB79     		ldrb	r3, [r3, #7]
 2786 0018 DBB2     		uxtb	r3, r3
 2787 001a 9BB2     		uxth	r3, r3
 2788 001c 1B02     		lsls	r3, r3, #8
 2789 001e 9AB2     		uxth	r2, r3
 2790 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2791 0022 DB00     		lsls	r3, r3, #3
 2792 0024 03F18043 		add	r3, r3, #1073741824
 2793 0028 03F5F043 		add	r3, r3, #30720
 2794 002c 9B79     		ldrb	r3, [r3, #6]
 2795 002e DBB2     		uxtb	r3, r3
 2796 0030 9BB2     		uxth	r3, r3
 2797 0032 1343     		orrs	r3, r3, r2
 2798 0034 FB81     		strh	r3, [r7, #14]	@ movhi
1036:main.c        **** 	
1037:main.c        **** 	// calculate the index by taking the difference between the starting and ending destination addres
1038:main.c        **** 	index = (index - sizeof(int16) - LO16((uint32) &Channel_1_Data[0]))/sizeof(int16) % BUFFER_SIZE;
 2799              		.loc 1 1038 0
 2800 0036 FA89     		ldrh	r2, [r7, #14]
 2801 0038 084B     		ldr	r3, .L146
 2802 003a 99B2     		uxth	r1, r3
 2803 003c 6FF00103 		mvn	r3, #1
 2804 0040 5B1A     		subs	r3, r3, r1
 2805 0042 1344     		add	r3, r3, r2
 2806 0044 5B08     		lsrs	r3, r3, #1
 2807 0046 9BB2     		uxth	r3, r3
 2808 0048 C3F30903 		ubfx	r3, r3, #0, #10
 2809 004c FB81     		strh	r3, [r7, #14]	@ movhi
1039:main.c        **** 	
1040:main.c        **** 	return index;
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 69


 2810              		.loc 1 1040 0
 2811 004e FB89     		ldrh	r3, [r7, #14]
1041:main.c        **** }
 2812              		.loc 1 1041 0
 2813 0050 1846     		mov	r0, r3
 2814 0052 1437     		adds	r7, r7, #20
 2815              		.cfi_def_cfa_offset 4
 2816 0054 BD46     		mov	sp, r7
 2817              		.cfi_def_cfa_register 13
 2818              		@ sp needed
 2819 0056 80BC     		pop	{r7}
 2820              		.cfi_restore 7
 2821              		.cfi_def_cfa_offset 0
 2822 0058 7047     		bx	lr
 2823              	.L147:
 2824 005a 00BF     		.align	2
 2825              	.L146:
 2826 005c 00000000 		.word	Channel_1_Data
 2827              		.cfi_endproc
 2828              	.LFE67:
 2829              		.size	GetLastSampleIndex, .-GetLastSampleIndex
 2830              		.section	.text.CommandCheck,"ax",%progbits
 2831              		.align	2
 2832              		.global	CommandCheck
 2833              		.thumb
 2834              		.thumb_func
 2835              		.type	CommandCheck, %function
 2836              	CommandCheck:
 2837              	.LFB68:
1042:main.c        **** 
1043:main.c        **** void CommandCheck(void)
1044:main.c        **** {
 2838              		.loc 1 1044 0
 2839              		.cfi_startproc
 2840              		@ args = 0, pretend = 0, frame = 8
 2841              		@ frame_needed = 1, uses_anonymous_args = 0
 2842 0000 80B5     		push	{r7, lr}
 2843              		.cfi_def_cfa_offset 8
 2844              		.cfi_offset 7, -8
 2845              		.cfi_offset 14, -4
 2846 0002 82B0     		sub	sp, sp, #8
 2847              		.cfi_def_cfa_offset 16
 2848 0004 00AF     		add	r7, sp, #0
 2849              		.cfi_def_cfa_register 7
1045:main.c        **** 	uint16 i, ReceivedBytes;
1046:main.c        **** 	// check to see if line state has changed? thought this might be necessary, but it probably isn't
1047:main.c        **** 	USBUART_IsLineChanged();
 2850              		.loc 1 1047 0
 2851 0006 FFF7FEFF 		bl	USBUART_IsLineChanged
1048:main.c        **** 	
1049:main.c        **** 	// if data is waiting
1050:main.c        **** 	if(USBUART_DataIsReady() != 0)
 2852              		.loc 1 1050 0
 2853 000a FFF7FEFF 		bl	USBUART_DataIsReady
 2854 000e 0346     		mov	r3, r0
 2855 0010 002B     		cmp	r3, #0
 2856 0012 5AD0     		beq	.L149
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 70


1051:main.c        **** 	{
1052:main.c        **** 		// lets find out how much the PC sent to us
1053:main.c        **** 		ReceivedBytes = USBUART_GetCount();
 2857              		.loc 1 1053 0
 2858 0014 FFF7FEFF 		bl	USBUART_GetCount
 2859 0018 0346     		mov	r3, r0
 2860 001a BB80     		strh	r3, [r7, #4]	@ movhi
1054:main.c        **** 		
1055:main.c        **** 		// if the amount of data received is non-zero
1056:main.c        **** 		if(ReceivedBytes != 0)
 2861              		.loc 1 1056 0
 2862 001c BB88     		ldrh	r3, [r7, #4]
 2863 001e 002B     		cmp	r3, #0
 2864 0020 07D0     		beq	.L150
1057:main.c        **** 		{
1058:main.c        **** 			cCharsReceived = USBUART_GetAll((uint8 *) &szTempBuffer[0]);
 2865              		.loc 1 1058 0
 2866 0022 4F48     		ldr	r0, .L161
 2867 0024 FFF7FEFF 		bl	USBUART_GetAll
 2868 0028 0346     		mov	r3, r0
 2869 002a DAB2     		uxtb	r2, r3
 2870 002c 4D4B     		ldr	r3, .L161+4
 2871 002e 1A70     		strb	r2, [r3]
 2872 0030 02E0     		b	.L151
 2873              	.L150:
1059:main.c        **** 		}
1060:main.c        **** 		else
1061:main.c        **** 		{
1062:main.c        **** 			// its a zero length data packet, it *should* be safe to do this and not worry about corrupting 
1063:main.c        **** 			USBUART_GetAll((uint8 *) &szTempBuffer[0]);
 2874              		.loc 1 1063 0
 2875 0032 4B48     		ldr	r0, .L161
 2876 0034 FFF7FEFF 		bl	USBUART_GetAll
 2877              	.L151:
1064:main.c        **** 			//PutString("Zero Length Packet\n");
1065:main.c        **** 		}
1066:main.c        **** 		
1067:main.c        **** 		// move the data from the temporary buffer into the circular command buffer
1068:main.c        **** 		i = 0;
 2878              		.loc 1 1068 0
 2879 0038 0023     		movs	r3, #0
 2880 003a FB80     		strh	r3, [r7, #6]	@ movhi
 2881              	.L153:
1069:main.c        **** 		do
1070:main.c        **** 		{
1071:main.c        **** 			szCommandsBuffer[iWrite] = szTempBuffer[i];
 2882              		.loc 1 1071 0 discriminator 2
 2883 003c 4A4B     		ldr	r3, .L161+8
 2884 003e 1B88     		ldrh	r3, [r3]
 2885 0040 1946     		mov	r1, r3
 2886 0042 FB88     		ldrh	r3, [r7, #6]
 2887 0044 464A     		ldr	r2, .L161
 2888 0046 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 2889 0048 484B     		ldr	r3, .L161+12
 2890 004a 5A54     		strb	r2, [r3, r1]
1072:main.c        **** 			i++;
 2891              		.loc 1 1072 0 discriminator 2
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 71


 2892 004c FB88     		ldrh	r3, [r7, #6]
 2893 004e 0133     		adds	r3, r3, #1
 2894 0050 FB80     		strh	r3, [r7, #6]	@ movhi
1073:main.c        **** 			iWrite++;
 2895              		.loc 1 1073 0 discriminator 2
 2896 0052 454B     		ldr	r3, .L161+8
 2897 0054 1B88     		ldrh	r3, [r3]
 2898 0056 0133     		adds	r3, r3, #1
 2899 0058 9AB2     		uxth	r2, r3
 2900 005a 434B     		ldr	r3, .L161+8
 2901 005c 1A80     		strh	r2, [r3]	@ movhi
1074:main.c        **** 			iWrite = iWrite % CIRCULAR_BUFFER_SIZE;
 2902              		.loc 1 1074 0 discriminator 2
 2903 005e 424B     		ldr	r3, .L161+8
 2904 0060 1B88     		ldrh	r3, [r3]
 2905 0062 C3F30B03 		ubfx	r3, r3, #0, #12
 2906 0066 9AB2     		uxth	r2, r3
 2907 0068 3F4B     		ldr	r3, .L161+8
 2908 006a 1A80     		strh	r2, [r3]	@ movhi
1075:main.c        **** 		}while((iWrite != iRead) && (i != cCharsReceived));
 2909              		.loc 1 1075 0 discriminator 2
 2910 006c 3E4B     		ldr	r3, .L161+8
 2911 006e 1A88     		ldrh	r2, [r3]
 2912 0070 3F4B     		ldr	r3, .L161+16
 2913 0072 1B88     		ldrh	r3, [r3]
 2914 0074 9A42     		cmp	r2, r3
 2915 0076 05D0     		beq	.L152
 2916              		.loc 1 1075 0 is_stmt 0 discriminator 1
 2917 0078 3A4B     		ldr	r3, .L161+4
 2918 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2919 007c 9BB2     		uxth	r3, r3
 2920 007e FA88     		ldrh	r2, [r7, #6]
 2921 0080 9A42     		cmp	r2, r3
 2922 0082 DBD1     		bne	.L153
 2923              	.L152:
1076:main.c        **** 		
1077:main.c        **** 		// scan the command buffer for commands
1078:main.c        **** 		i = iRead;
 2924              		.loc 1 1078 0 is_stmt 1
 2925 0084 3A4B     		ldr	r3, .L161+16
 2926 0086 1B88     		ldrh	r3, [r3]	@ movhi
 2927 0088 FB80     		strh	r3, [r7, #6]	@ movhi
 2928              	.L156:
1079:main.c        **** 		do
1080:main.c        **** 		{
1081:main.c        **** 			// if we see a carriage return or a line feed
1082:main.c        **** 			if((szCommandsBuffer[i] == '\n') || (szCommandsBuffer[i] == '\r'))
 2929              		.loc 1 1082 0
 2930 008a FB88     		ldrh	r3, [r7, #6]
 2931 008c 374A     		ldr	r2, .L161+12
 2932 008e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2933 0090 0A2B     		cmp	r3, #10
 2934 0092 04D0     		beq	.L154
 2935              		.loc 1 1082 0 is_stmt 0 discriminator 1
 2936 0094 FB88     		ldrh	r3, [r7, #6]
 2937 0096 354A     		ldr	r2, .L161+12
 2938 0098 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 72


 2939 009a 0D2B     		cmp	r3, #13
 2940 009c 09D1     		bne	.L155
 2941              	.L154:
1083:main.c        **** 			{
1084:main.c        **** 				cCommandsReady++; // indicate the buffer contains commands to be dealt with
 2942              		.loc 1 1084 0 is_stmt 1
 2943 009e 354B     		ldr	r3, .L161+20
 2944 00a0 1B88     		ldrh	r3, [r3]
 2945 00a2 0133     		adds	r3, r3, #1
 2946 00a4 9AB2     		uxth	r2, r3
 2947 00a6 334B     		ldr	r3, .L161+20
 2948 00a8 1A80     		strh	r2, [r3]	@ movhi
1085:main.c        **** 				szCommandsBuffer[i] = 0; // null terminate the string
 2949              		.loc 1 1085 0
 2950 00aa FB88     		ldrh	r3, [r7, #6]
 2951 00ac 2F4A     		ldr	r2, .L161+12
 2952 00ae 0021     		movs	r1, #0
 2953 00b0 D154     		strb	r1, [r2, r3]
 2954              	.L155:
1086:main.c        **** 			}
1087:main.c        **** 			i++;
 2955              		.loc 1 1087 0
 2956 00b2 FB88     		ldrh	r3, [r7, #6]
 2957 00b4 0133     		adds	r3, r3, #1
 2958 00b6 FB80     		strh	r3, [r7, #6]	@ movhi
1088:main.c        **** 			i = i % CIRCULAR_BUFFER_SIZE;
 2959              		.loc 1 1088 0
 2960 00b8 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2961 00ba C3F30B03 		ubfx	r3, r3, #0, #12
 2962 00be FB80     		strh	r3, [r7, #6]	@ movhi
1089:main.c        **** 		}while(i != iWrite);
 2963              		.loc 1 1089 0
 2964 00c0 294B     		ldr	r3, .L161+8
 2965 00c2 1B88     		ldrh	r3, [r3]
 2966 00c4 FA88     		ldrh	r2, [r7, #6]
 2967 00c6 9A42     		cmp	r2, r3
 2968 00c8 DFD1     		bne	.L156
 2969              	.L149:
1090:main.c        **** 	}
1091:main.c        **** 	
1092:main.c        **** 	i = 0;
 2970              		.loc 1 1092 0
 2971 00ca 0023     		movs	r3, #0
 2972 00cc FB80     		strh	r3, [r7, #6]	@ movhi
1093:main.c        **** 	if(cCommandsReady > 0 && bCommandReady == 0)
 2973              		.loc 1 1093 0
 2974 00ce 294B     		ldr	r3, .L161+20
 2975 00d0 1B88     		ldrh	r3, [r3]
 2976 00d2 002B     		cmp	r3, #0
 2977 00d4 40D0     		beq	.L160
 2978              		.loc 1 1093 0 is_stmt 0 discriminator 1
 2979 00d6 284B     		ldr	r3, .L161+24
 2980 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2981 00da 002B     		cmp	r3, #0
 2982 00dc 3CD1     		bne	.L160
1094:main.c        **** 	{
1095:main.c        **** 		while(szCommandsBuffer[iRead] != 0)
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 73


 2983              		.loc 1 1095 0 is_stmt 1
 2984 00de 17E0     		b	.L158
 2985              	.L159:
1096:main.c        **** 		{
1097:main.c        **** 			szCommand[i] = szCommandsBuffer[iRead];
 2986              		.loc 1 1097 0
 2987 00e0 FB88     		ldrh	r3, [r7, #6]
 2988 00e2 234A     		ldr	r2, .L161+16
 2989 00e4 1288     		ldrh	r2, [r2]
 2990 00e6 1146     		mov	r1, r2
 2991 00e8 204A     		ldr	r2, .L161+12
 2992 00ea 515C     		ldrb	r1, [r2, r1]	@ zero_extendqisi2
 2993 00ec 234A     		ldr	r2, .L161+28
 2994 00ee D154     		strb	r1, [r2, r3]
1098:main.c        **** 			i++;
 2995              		.loc 1 1098 0
 2996 00f0 FB88     		ldrh	r3, [r7, #6]
 2997 00f2 0133     		adds	r3, r3, #1
 2998 00f4 FB80     		strh	r3, [r7, #6]	@ movhi
1099:main.c        **** 			iRead++;
 2999              		.loc 1 1099 0
 3000 00f6 1E4B     		ldr	r3, .L161+16
 3001 00f8 1B88     		ldrh	r3, [r3]
 3002 00fa 0133     		adds	r3, r3, #1
 3003 00fc 9AB2     		uxth	r2, r3
 3004 00fe 1C4B     		ldr	r3, .L161+16
 3005 0100 1A80     		strh	r2, [r3]	@ movhi
1100:main.c        **** 			iRead = iRead % CIRCULAR_BUFFER_SIZE;
 3006              		.loc 1 1100 0
 3007 0102 1B4B     		ldr	r3, .L161+16
 3008 0104 1B88     		ldrh	r3, [r3]
 3009 0106 C3F30B03 		ubfx	r3, r3, #0, #12
 3010 010a 9AB2     		uxth	r2, r3
 3011 010c 184B     		ldr	r3, .L161+16
 3012 010e 1A80     		strh	r2, [r3]	@ movhi
 3013              	.L158:
1095:main.c        **** 		{
 3014              		.loc 1 1095 0
 3015 0110 174B     		ldr	r3, .L161+16
 3016 0112 1B88     		ldrh	r3, [r3]
 3017 0114 1A46     		mov	r2, r3
 3018 0116 154B     		ldr	r3, .L161+12
 3019 0118 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 3020 011a 002B     		cmp	r3, #0
 3021 011c E0D1     		bne	.L159
1101:main.c        **** 		}
1102:main.c        **** 		
1103:main.c        **** 		szCommand[i] = 0;
 3022              		.loc 1 1103 0
 3023 011e FB88     		ldrh	r3, [r7, #6]
 3024 0120 164A     		ldr	r2, .L161+28
 3025 0122 0021     		movs	r1, #0
 3026 0124 D154     		strb	r1, [r2, r3]
1104:main.c        **** 		iRead++;
 3027              		.loc 1 1104 0
 3028 0126 124B     		ldr	r3, .L161+16
 3029 0128 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 74


 3030 012a 0133     		adds	r3, r3, #1
 3031 012c 9AB2     		uxth	r2, r3
 3032 012e 104B     		ldr	r3, .L161+16
 3033 0130 1A80     		strh	r2, [r3]	@ movhi
1105:main.c        **** 		iRead = iRead % CIRCULAR_BUFFER_SIZE;
 3034              		.loc 1 1105 0
 3035 0132 0F4B     		ldr	r3, .L161+16
 3036 0134 1B88     		ldrh	r3, [r3]
 3037 0136 C3F30B03 		ubfx	r3, r3, #0, #12
 3038 013a 9AB2     		uxth	r2, r3
 3039 013c 0C4B     		ldr	r3, .L161+16
 3040 013e 1A80     		strh	r2, [r3]	@ movhi
1106:main.c        **** 		cCommandsReady--;
 3041              		.loc 1 1106 0
 3042 0140 0C4B     		ldr	r3, .L161+20
 3043 0142 1B88     		ldrh	r3, [r3]
 3044 0144 013B     		subs	r3, r3, #1
 3045 0146 9AB2     		uxth	r2, r3
 3046 0148 0A4B     		ldr	r3, .L161+20
 3047 014a 1A80     		strh	r2, [r3]	@ movhi
1107:main.c        **** 		if(i == 0)
 3048              		.loc 1 1107 0
 3049 014c FB88     		ldrh	r3, [r7, #6]
 3050 014e 002B     		cmp	r3, #0
 3051 0150 02D0     		beq	.L160
1108:main.c        **** 		{
1109:main.c        **** 			// this is a zero length command, nothing to do
1110:main.c        **** 		}
1111:main.c        **** 		else
1112:main.c        **** 		{
1113:main.c        **** 			// the command was at least 1 character, report it
1114:main.c        **** 			bCommandReady = 1;
 3052              		.loc 1 1114 0
 3053 0152 094B     		ldr	r3, .L161+24
 3054 0154 0122     		movs	r2, #1
 3055 0156 1A70     		strb	r2, [r3]
 3056              	.L160:
1115:main.c        **** 		}
1116:main.c        **** 	}
1117:main.c        **** }
 3057              		.loc 1 1117 0
 3058 0158 00BF     		nop
 3059 015a 0837     		adds	r7, r7, #8
 3060              		.cfi_def_cfa_offset 8
 3061 015c BD46     		mov	sp, r7
 3062              		.cfi_def_cfa_register 13
 3063              		@ sp needed
 3064 015e 80BD     		pop	{r7, pc}
 3065              	.L162:
 3066              		.align	2
 3067              	.L161:
 3068 0160 00000000 		.word	szTempBuffer
 3069 0164 00000000 		.word	cCharsReceived
 3070 0168 00000000 		.word	iWrite
 3071 016c 00000000 		.word	szCommandsBuffer
 3072 0170 00000000 		.word	iRead
 3073 0174 00000000 		.word	cCommandsReady
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 75


 3074 0178 00000000 		.word	bCommandReady
 3075 017c 00000000 		.word	szCommand
 3076              		.cfi_endproc
 3077              	.LFE68:
 3078              		.size	CommandCheck, .-CommandCheck
 3079              		.section	.text.PutString,"ax",%progbits
 3080              		.align	2
 3081              		.global	PutString
 3082              		.thumb
 3083              		.thumb_func
 3084              		.type	PutString, %function
 3085              	PutString:
 3086              	.LFB69:
1118:main.c        **** 
1119:main.c        **** void PutString(char * string)
1120:main.c        **** {
 3087              		.loc 1 1120 0
 3088              		.cfi_startproc
 3089              		@ args = 0, pretend = 0, frame = 8
 3090              		@ frame_needed = 1, uses_anonymous_args = 0
 3091 0000 80B5     		push	{r7, lr}
 3092              		.cfi_def_cfa_offset 8
 3093              		.cfi_offset 7, -8
 3094              		.cfi_offset 14, -4
 3095 0002 82B0     		sub	sp, sp, #8
 3096              		.cfi_def_cfa_offset 16
 3097 0004 00AF     		add	r7, sp, #0
 3098              		.cfi_def_cfa_register 7
 3099 0006 7860     		str	r0, [r7, #4]
1121:main.c        **** 	while(USBUART_CDCIsReady() == 0){};
 3100              		.loc 1 1121 0
 3101 0008 00BF     		nop
 3102              	.L164:
 3103              		.loc 1 1121 0 is_stmt 0 discriminator 1
 3104 000a FFF7FEFF 		bl	USBUART_CDCIsReady
 3105 000e 0346     		mov	r3, r0
 3106 0010 002B     		cmp	r3, #0
 3107 0012 FAD0     		beq	.L164
1122:main.c        **** 	USBUART_PutString(string);
 3108              		.loc 1 1122 0 is_stmt 1
 3109 0014 7868     		ldr	r0, [r7, #4]
 3110 0016 FFF7FEFF 		bl	USBUART_PutString
1123:main.c        **** }
 3111              		.loc 1 1123 0
 3112 001a 00BF     		nop
 3113 001c 0837     		adds	r7, r7, #8
 3114              		.cfi_def_cfa_offset 8
 3115 001e BD46     		mov	sp, r7
 3116              		.cfi_def_cfa_register 13
 3117              		@ sp needed
 3118 0020 80BD     		pop	{r7, pc}
 3119              		.cfi_endproc
 3120              	.LFE69:
 3121              		.size	PutString, .-PutString
 3122 0022 00BF     		.section	.text.PutChar,"ax",%progbits
 3123              		.align	2
 3124              		.global	PutChar
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 76


 3125              		.thumb
 3126              		.thumb_func
 3127              		.type	PutChar, %function
 3128              	PutChar:
 3129              	.LFB70:
1124:main.c        **** 
1125:main.c        **** void PutChar(char Data)
1126:main.c        **** {
 3130              		.loc 1 1126 0
 3131              		.cfi_startproc
 3132              		@ args = 0, pretend = 0, frame = 8
 3133              		@ frame_needed = 1, uses_anonymous_args = 0
 3134 0000 80B5     		push	{r7, lr}
 3135              		.cfi_def_cfa_offset 8
 3136              		.cfi_offset 7, -8
 3137              		.cfi_offset 14, -4
 3138 0002 82B0     		sub	sp, sp, #8
 3139              		.cfi_def_cfa_offset 16
 3140 0004 00AF     		add	r7, sp, #0
 3141              		.cfi_def_cfa_register 7
 3142 0006 0346     		mov	r3, r0
 3143 0008 FB71     		strb	r3, [r7, #7]
1127:main.c        **** 	while(USBUART_CDCIsReady() == 0){};
 3144              		.loc 1 1127 0
 3145 000a 00BF     		nop
 3146              	.L166:
 3147              		.loc 1 1127 0 is_stmt 0 discriminator 1
 3148 000c FFF7FEFF 		bl	USBUART_CDCIsReady
 3149 0010 0346     		mov	r3, r0
 3150 0012 002B     		cmp	r3, #0
 3151 0014 FAD0     		beq	.L166
1128:main.c        **** 	USBUART_PutChar(Data);
 3152              		.loc 1 1128 0 is_stmt 1
 3153 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3154 0018 1846     		mov	r0, r3
 3155 001a FFF7FEFF 		bl	USBUART_PutChar
1129:main.c        **** }
 3156              		.loc 1 1129 0
 3157 001e 00BF     		nop
 3158 0020 0837     		adds	r7, r7, #8
 3159              		.cfi_def_cfa_offset 8
 3160 0022 BD46     		mov	sp, r7
 3161              		.cfi_def_cfa_register 13
 3162              		@ sp needed
 3163 0024 80BD     		pop	{r7, pc}
 3164              		.cfi_endproc
 3165              	.LFE70:
 3166              		.size	PutChar, .-PutChar
 3167 0026 00BF     		.text
 3168              	.Letext0:
 3169              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3170              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3171              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3172              		.file 5 "Generated_Source\\PSoC5/CYDMAC.H"
 3173              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 3174              		.section	.debug_info,"",%progbits
 3175              	.Ldebug_info0:
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 77


 3176 0000 0D050000 		.4byte	0x50d
 3177 0004 0400     		.2byte	0x4
 3178 0006 00000000 		.4byte	.Ldebug_abbrev0
 3179 000a 04       		.byte	0x4
 3180 000b 01       		.uleb128 0x1
 3181 000c 4B000000 		.4byte	.LASF71
 3182 0010 0C       		.byte	0xc
 3183 0011 72030000 		.4byte	.LASF72
 3184 0015 FF010000 		.4byte	.LASF73
 3185 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3186 001d 00000000 		.4byte	0
 3187 0021 00000000 		.4byte	.Ldebug_line0
 3188 0025 02       		.uleb128 0x2
 3189 0026 01       		.byte	0x1
 3190 0027 06       		.byte	0x6
 3191 0028 C6020000 		.4byte	.LASF0
 3192 002c 02       		.uleb128 0x2
 3193 002d 01       		.byte	0x1
 3194 002e 08       		.byte	0x8
 3195 002f 95020000 		.4byte	.LASF1
 3196 0033 02       		.uleb128 0x2
 3197 0034 02       		.byte	0x2
 3198 0035 05       		.byte	0x5
 3199 0036 38000000 		.4byte	.LASF2
 3200 003a 02       		.uleb128 0x2
 3201 003b 02       		.byte	0x2
 3202 003c 07       		.byte	0x7
 3203 003d 10030000 		.4byte	.LASF3
 3204 0041 03       		.uleb128 0x3
 3205 0042 B3030000 		.4byte	.LASF9
 3206 0046 02       		.byte	0x2
 3207 0047 3F       		.byte	0x3f
 3208 0048 4C000000 		.4byte	0x4c
 3209 004c 02       		.uleb128 0x2
 3210 004d 04       		.byte	0x4
 3211 004e 05       		.byte	0x5
 3212 004f CF010000 		.4byte	.LASF4
 3213 0053 02       		.uleb128 0x2
 3214 0054 04       		.byte	0x4
 3215 0055 07       		.byte	0x7
 3216 0056 7E030000 		.4byte	.LASF5
 3217 005a 02       		.uleb128 0x2
 3218 005b 08       		.byte	0x8
 3219 005c 05       		.byte	0x5
 3220 005d B2010000 		.4byte	.LASF6
 3221 0061 02       		.uleb128 0x2
 3222 0062 08       		.byte	0x8
 3223 0063 07       		.byte	0x7
 3224 0064 D2020000 		.4byte	.LASF7
 3225 0068 04       		.uleb128 0x4
 3226 0069 04       		.byte	0x4
 3227 006a 05       		.byte	0x5
 3228 006b 696E7400 		.ascii	"int\000"
 3229 006f 02       		.uleb128 0x2
 3230 0070 04       		.byte	0x4
 3231 0071 07       		.byte	0x7
 3232 0072 E9020000 		.4byte	.LASF8
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 78


 3233 0076 03       		.uleb128 0x3
 3234 0077 34030000 		.4byte	.LASF10
 3235 007b 03       		.byte	0x3
 3236 007c 2C       		.byte	0x2c
 3237 007d 41000000 		.4byte	0x41
 3238 0081 05       		.uleb128 0x5
 3239 0082 29010000 		.4byte	.LASF11
 3240 0086 04       		.byte	0x4
 3241 0087 E901     		.2byte	0x1e9
 3242 0089 2C000000 		.4byte	0x2c
 3243 008d 05       		.uleb128 0x5
 3244 008e 03010000 		.4byte	.LASF12
 3245 0092 04       		.byte	0x4
 3246 0093 EA01     		.2byte	0x1ea
 3247 0095 3A000000 		.4byte	0x3a
 3248 0099 05       		.uleb128 0x5
 3249 009a 6B030000 		.4byte	.LASF13
 3250 009e 04       		.byte	0x4
 3251 009f EB01     		.2byte	0x1eb
 3252 00a1 53000000 		.4byte	0x53
 3253 00a5 05       		.uleb128 0x5
 3254 00a6 90030000 		.4byte	.LASF14
 3255 00aa 04       		.byte	0x4
 3256 00ab EE01     		.2byte	0x1ee
 3257 00ad 4C000000 		.4byte	0x4c
 3258 00b1 02       		.uleb128 0x2
 3259 00b2 04       		.byte	0x4
 3260 00b3 04       		.byte	0x4
 3261 00b4 99010000 		.4byte	.LASF15
 3262 00b8 02       		.uleb128 0x2
 3263 00b9 08       		.byte	0x8
 3264 00ba 04       		.byte	0x4
 3265 00bb 96030000 		.4byte	.LASF16
 3266 00bf 02       		.uleb128 0x2
 3267 00c0 01       		.byte	0x1
 3268 00c1 08       		.byte	0x8
 3269 00c2 2A030000 		.4byte	.LASF17
 3270 00c6 05       		.uleb128 0x5
 3271 00c7 79030000 		.4byte	.LASF18
 3272 00cb 04       		.byte	0x4
 3273 00cc 9302     		.2byte	0x293
 3274 00ce D2000000 		.4byte	0xd2
 3275 00d2 06       		.uleb128 0x6
 3276 00d3 81000000 		.4byte	0x81
 3277 00d7 05       		.uleb128 0x5
 3278 00d8 32000000 		.4byte	.LASF19
 3279 00dc 04       		.byte	0x4
 3280 00dd 9402     		.2byte	0x294
 3281 00df E3000000 		.4byte	0xe3
 3282 00e3 06       		.uleb128 0x6
 3283 00e4 8D000000 		.4byte	0x8d
 3284 00e8 02       		.uleb128 0x2
 3285 00e9 08       		.byte	0x8
 3286 00ea 04       		.byte	0x4
 3287 00eb 81020000 		.4byte	.LASF20
 3288 00ef 02       		.uleb128 0x2
 3289 00f0 04       		.byte	0x4
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 79


 3290 00f1 07       		.byte	0x7
 3291 00f2 42000000 		.4byte	.LASF21
 3292 00f6 07       		.uleb128 0x7
 3293 00f7 04       		.byte	0x4
 3294 00f8 BF000000 		.4byte	0xbf
 3295 00fc 08       		.uleb128 0x8
 3296 00fd D2000000 		.4byte	0xd2
 3297 0101 0C010000 		.4byte	0x10c
 3298 0105 09       		.uleb128 0x9
 3299 0106 EF000000 		.4byte	0xef
 3300 010a 03       		.byte	0x3
 3301 010b 00       		.byte	0
 3302 010c 0A       		.uleb128 0xa
 3303 010d 00000000 		.4byte	.LASF74
 3304 0111 08       		.byte	0x8
 3305 0112 05       		.byte	0x5
 3306 0113 59       		.byte	0x59
 3307 0114 31010000 		.4byte	0x131
 3308 0118 0B       		.uleb128 0xb
 3309 0119 54443000 		.ascii	"TD0\000"
 3310 011d 05       		.byte	0x5
 3311 011e 5B       		.byte	0x5b
 3312 011f 31010000 		.4byte	0x131
 3313 0123 00       		.byte	0
 3314 0124 0B       		.uleb128 0xb
 3315 0125 54443100 		.ascii	"TD1\000"
 3316 0129 05       		.byte	0x5
 3317 012a 5C       		.byte	0x5c
 3318 012b 36010000 		.4byte	0x136
 3319 012f 04       		.byte	0x4
 3320 0130 00       		.byte	0
 3321 0131 06       		.uleb128 0x6
 3322 0132 FC000000 		.4byte	0xfc
 3323 0136 06       		.uleb128 0x6
 3324 0137 FC000000 		.4byte	0xfc
 3325 013b 03       		.uleb128 0x3
 3326 013c 05030000 		.4byte	.LASF22
 3327 0140 05       		.byte	0x5
 3328 0141 5E       		.byte	0x5e
 3329 0142 0C010000 		.4byte	0x10c
 3330 0146 0C       		.uleb128 0xc
 3331 0147 2F030000 		.4byte	.LASF36
 3332 014b 01       		.byte	0x1
 3333 014c 82       		.byte	0x82
 3334 014d 68000000 		.4byte	0x68
 3335 0151 00000000 		.4byte	.LFB64
 3336 0155 F8110000 		.4byte	.LFE64-.LFB64
 3337 0159 01       		.uleb128 0x1
 3338 015a 9C       		.byte	0x9c
 3339 015b 06020000 		.4byte	0x206
 3340 015f 0D       		.uleb128 0xd
 3341 0160 23030000 		.4byte	.LASF23
 3342 0164 01       		.byte	0x1
 3343 0165 84       		.byte	0x84
 3344 0166 81000000 		.4byte	0x81
 3345 016a 02       		.uleb128 0x2
 3346 016b 91       		.byte	0x91
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 80


 3347 016c 51       		.sleb128 -47
 3348 016d 0D       		.uleb128 0xd
 3349 016e 9F010000 		.4byte	.LASF24
 3350 0172 01       		.byte	0x1
 3351 0173 85       		.byte	0x85
 3352 0174 8D000000 		.4byte	0x8d
 3353 0178 02       		.uleb128 0x2
 3354 0179 91       		.byte	0x91
 3355 017a 4E       		.sleb128 -50
 3356 017b 0E       		.uleb128 0xe
 3357 017c 70737A00 		.ascii	"psz\000"
 3358 0180 01       		.byte	0x1
 3359 0181 86       		.byte	0x86
 3360 0182 F6000000 		.4byte	0xf6
 3361 0186 02       		.uleb128 0x2
 3362 0187 91       		.byte	0x91
 3363 0188 60       		.sleb128 -32
 3364 0189 0D       		.uleb128 0xd
 3365 018a A3020000 		.4byte	.LASF25
 3366 018e 01       		.byte	0x1
 3367 018f 87       		.byte	0x87
 3368 0190 8D000000 		.4byte	0x8d
 3369 0194 02       		.uleb128 0x2
 3370 0195 91       		.byte	0x91
 3371 0196 4C       		.sleb128 -52
 3372 0197 0D       		.uleb128 0xd
 3373 0198 3E040000 		.4byte	.LASF26
 3374 019c 01       		.byte	0x1
 3375 019d 87       		.byte	0x87
 3376 019e 8D000000 		.4byte	0x8d
 3377 01a2 02       		.uleb128 0x2
 3378 01a3 91       		.byte	0x91
 3379 01a4 6E       		.sleb128 -18
 3380 01a5 0E       		.uleb128 0xe
 3381 01a6 6900     		.ascii	"i\000"
 3382 01a8 01       		.byte	0x1
 3383 01a9 87       		.byte	0x87
 3384 01aa 8D000000 		.4byte	0x8d
 3385 01ae 02       		.uleb128 0x2
 3386 01af 91       		.byte	0x91
 3387 01b0 6C       		.sleb128 -20
 3388 01b1 0D       		.uleb128 0xd
 3389 01b2 E6010000 		.4byte	.LASF27
 3390 01b6 01       		.byte	0x1
 3391 01b7 87       		.byte	0x87
 3392 01b8 8D000000 		.4byte	0x8d
 3393 01bc 02       		.uleb128 0x2
 3394 01bd 91       		.byte	0x91
 3395 01be 52       		.sleb128 -46
 3396 01bf 0D       		.uleb128 0xd
 3397 01c0 F9000000 		.4byte	.LASF28
 3398 01c4 01       		.byte	0x1
 3399 01c5 88       		.byte	0x88
 3400 01c6 99000000 		.4byte	0x99
 3401 01ca 02       		.uleb128 0x2
 3402 01cb 91       		.byte	0x91
 3403 01cc 68       		.sleb128 -24
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 81


 3404 01cd 0D       		.uleb128 0xd
 3405 01ce 0A010000 		.4byte	.LASF29
 3406 01d2 01       		.byte	0x1
 3407 01d3 89       		.byte	0x89
 3408 01d4 99000000 		.4byte	0x99
 3409 01d8 02       		.uleb128 0x2
 3410 01d9 91       		.byte	0x91
 3411 01da 5C       		.sleb128 -36
 3412 01db 0D       		.uleb128 0xd
 3413 01dc 79010000 		.4byte	.LASF30
 3414 01e0 01       		.byte	0x1
 3415 01e1 8A       		.byte	0x8a
 3416 01e2 99000000 		.4byte	0x99
 3417 01e6 02       		.uleb128 0x2
 3418 01e7 91       		.byte	0x91
 3419 01e8 58       		.sleb128 -40
 3420 01e9 0D       		.uleb128 0xd
 3421 01ea AD010000 		.4byte	.LASF31
 3422 01ee 01       		.byte	0x1
 3423 01ef 8B       		.byte	0x8b
 3424 01f0 B1000000 		.4byte	0xb1
 3425 01f4 02       		.uleb128 0x2
 3426 01f5 91       		.byte	0x91
 3427 01f6 54       		.sleb128 -44
 3428 01f7 0D       		.uleb128 0xd
 3429 01f8 6F010000 		.4byte	.LASF32
 3430 01fc 01       		.byte	0x1
 3431 01fd 8C       		.byte	0x8c
 3432 01fe B1000000 		.4byte	0xb1
 3433 0202 02       		.uleb128 0x2
 3434 0203 91       		.byte	0x91
 3435 0204 64       		.sleb128 -28
 3436 0205 00       		.byte	0
 3437 0206 0F       		.uleb128 0xf
 3438 0207 42010000 		.4byte	.LASF33
 3439 020b 01       		.byte	0x1
 3440 020c 9403     		.2byte	0x394
 3441 020e 00000000 		.4byte	.LFB65
 3442 0212 50010000 		.4byte	.LFE65-.LFB65
 3443 0216 01       		.uleb128 0x1
 3444 0217 9C       		.byte	0x9c
 3445 0218 0F       		.uleb128 0xf
 3446 0219 7F010000 		.4byte	.LASF34
 3447 021d 01       		.byte	0x1
 3448 021e E403     		.2byte	0x3e4
 3449 0220 00000000 		.4byte	.LFB66
 3450 0224 30010000 		.4byte	.LFE66-.LFB66
 3451 0228 01       		.uleb128 0x1
 3452 0229 9C       		.byte	0x9c
 3453 022a 10       		.uleb128 0x10
 3454 022b 2F010000 		.4byte	.LASF75
 3455 022f 01       		.byte	0x1
 3456 0230 0104     		.2byte	0x401
 3457 0232 8D000000 		.4byte	0x8d
 3458 0236 00000000 		.4byte	.LFB67
 3459 023a 60000000 		.4byte	.LFE67-.LFB67
 3460 023e 01       		.uleb128 0x1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 82


 3461 023f 9C       		.byte	0x9c
 3462 0240 63020000 		.4byte	0x263
 3463 0244 11       		.uleb128 0x11
 3464 0245 AA030000 		.4byte	.LASF40
 3465 0249 01       		.byte	0x1
 3466 024a 0104     		.2byte	0x401
 3467 024c 81000000 		.4byte	0x81
 3468 0250 02       		.uleb128 0x2
 3469 0251 91       		.byte	0x91
 3470 0252 6F       		.sleb128 -17
 3471 0253 12       		.uleb128 0x12
 3472 0254 12010000 		.4byte	.LASF35
 3473 0258 01       		.byte	0x1
 3474 0259 0304     		.2byte	0x403
 3475 025b 8D000000 		.4byte	0x8d
 3476 025f 02       		.uleb128 0x2
 3477 0260 91       		.byte	0x91
 3478 0261 76       		.sleb128 -10
 3479 0262 00       		.byte	0
 3480 0263 13       		.uleb128 0x13
 3481 0264 A8020000 		.4byte	.LASF37
 3482 0268 01       		.byte	0x1
 3483 0269 1304     		.2byte	0x413
 3484 026b 00000000 		.4byte	.LFB68
 3485 026f 80010000 		.4byte	.LFE68-.LFB68
 3486 0273 01       		.uleb128 0x1
 3487 0274 9C       		.byte	0x9c
 3488 0275 96020000 		.4byte	0x296
 3489 0279 14       		.uleb128 0x14
 3490 027a 6900     		.ascii	"i\000"
 3491 027c 01       		.byte	0x1
 3492 027d 1504     		.2byte	0x415
 3493 027f 8D000000 		.4byte	0x8d
 3494 0283 02       		.uleb128 0x2
 3495 0284 91       		.byte	0x91
 3496 0285 76       		.sleb128 -10
 3497 0286 12       		.uleb128 0x12
 3498 0287 E2030000 		.4byte	.LASF38
 3499 028b 01       		.byte	0x1
 3500 028c 1504     		.2byte	0x415
 3501 028e 8D000000 		.4byte	0x8d
 3502 0292 02       		.uleb128 0x2
 3503 0293 91       		.byte	0x91
 3504 0294 74       		.sleb128 -12
 3505 0295 00       		.byte	0
 3506 0296 13       		.uleb128 0x13
 3507 0297 D8030000 		.4byte	.LASF39
 3508 029b 01       		.byte	0x1
 3509 029c 5F04     		.2byte	0x45f
 3510 029e 00000000 		.4byte	.LFB69
 3511 02a2 22000000 		.4byte	.LFE69-.LFB69
 3512 02a6 01       		.uleb128 0x1
 3513 02a7 9C       		.byte	0x9c
 3514 02a8 BC020000 		.4byte	0x2bc
 3515 02ac 11       		.uleb128 0x11
 3516 02ad DF010000 		.4byte	.LASF41
 3517 02b1 01       		.byte	0x1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 83


 3518 02b2 5F04     		.2byte	0x45f
 3519 02b4 F6000000 		.4byte	0xf6
 3520 02b8 02       		.uleb128 0x2
 3521 02b9 91       		.byte	0x91
 3522 02ba 74       		.sleb128 -12
 3523 02bb 00       		.byte	0
 3524 02bc 13       		.uleb128 0x13
 3525 02bd 8D020000 		.4byte	.LASF42
 3526 02c1 01       		.byte	0x1
 3527 02c2 6504     		.2byte	0x465
 3528 02c4 00000000 		.4byte	.LFB70
 3529 02c8 26000000 		.4byte	.LFE70-.LFB70
 3530 02cc 01       		.uleb128 0x1
 3531 02cd 9C       		.byte	0x9c
 3532 02ce E2020000 		.4byte	0x2e2
 3533 02d2 11       		.uleb128 0x11
 3534 02d3 EB010000 		.4byte	.LASF43
 3535 02d7 01       		.byte	0x1
 3536 02d8 6504     		.2byte	0x465
 3537 02da BF000000 		.4byte	0xbf
 3538 02de 02       		.uleb128 0x2
 3539 02df 91       		.byte	0x91
 3540 02e0 77       		.sleb128 -9
 3541 02e1 00       		.byte	0
 3542 02e2 15       		.uleb128 0x15
 3543 02e3 F0030000 		.4byte	.LASF44
 3544 02e7 06       		.byte	0x6
 3545 02e8 1207     		.2byte	0x712
 3546 02ea EE020000 		.4byte	0x2ee
 3547 02ee 06       		.uleb128 0x6
 3548 02ef 76000000 		.4byte	0x76
 3549 02f3 16       		.uleb128 0x16
 3550 02f4 6E020000 		.4byte	.LASF45
 3551 02f8 01       		.byte	0x1
 3552 02f9 47       		.byte	0x47
 3553 02fa 81000000 		.4byte	0x81
 3554 02fe 05       		.uleb128 0x5
 3555 02ff 03       		.byte	0x3
 3556 0300 00000000 		.4byte	DMA_Channel_1_Chan
 3557 0304 08       		.uleb128 0x8
 3558 0305 81000000 		.4byte	0x81
 3559 0309 14030000 		.4byte	0x314
 3560 030d 09       		.uleb128 0x9
 3561 030e EF000000 		.4byte	0xef
 3562 0312 00       		.byte	0
 3563 0313 00       		.byte	0
 3564 0314 16       		.uleb128 0x16
 3565 0315 2D040000 		.4byte	.LASF46
 3566 0319 01       		.byte	0x1
 3567 031a 48       		.byte	0x48
 3568 031b 04030000 		.4byte	0x304
 3569 031f 05       		.uleb128 0x5
 3570 0320 03       		.byte	0x3
 3571 0321 00000000 		.4byte	DMA_Channel_1_TD
 3572 0325 16       		.uleb128 0x16
 3573 0326 E6000000 		.4byte	.LASF47
 3574 032a 01       		.byte	0x1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 84


 3575 032b 4C       		.byte	0x4c
 3576 032c 81000000 		.4byte	0x81
 3577 0330 05       		.uleb128 0x5
 3578 0331 03       		.byte	0x3
 3579 0332 00000000 		.4byte	DMA_Channel_2_Chan
 3580 0336 16       		.uleb128 0x16
 3581 0337 12000000 		.4byte	.LASF48
 3582 033b 01       		.byte	0x1
 3583 033c 4D       		.byte	0x4d
 3584 033d 04030000 		.4byte	0x304
 3585 0341 05       		.uleb128 0x5
 3586 0342 03       		.byte	0x3
 3587 0343 00000000 		.4byte	DMA_Channel_2_TD
 3588 0347 08       		.uleb128 0x8
 3589 0348 8D000000 		.4byte	0x8d
 3590 034c 58030000 		.4byte	0x358
 3591 0350 17       		.uleb128 0x17
 3592 0351 EF000000 		.4byte	0xef
 3593 0355 FF03     		.2byte	0x3ff
 3594 0357 00       		.byte	0
 3595 0358 16       		.uleb128 0x16
 3596 0359 F6020000 		.4byte	.LASF49
 3597 035d 01       		.byte	0x1
 3598 035e 50       		.byte	0x50
 3599 035f 47030000 		.4byte	0x347
 3600 0363 05       		.uleb128 0x5
 3601 0364 03       		.byte	0x3
 3602 0365 00000000 		.4byte	Channel_1_Data
 3603 0369 16       		.uleb128 0x16
 3604 036a 1E040000 		.4byte	.LASF50
 3605 036e 01       		.byte	0x1
 3606 036f 51       		.byte	0x51
 3607 0370 47030000 		.4byte	0x347
 3608 0374 05       		.uleb128 0x5
 3609 0375 03       		.byte	0x3
 3610 0376 00000000 		.4byte	Channel_2_Data
 3611 037a 08       		.uleb128 0x8
 3612 037b BF000000 		.4byte	0xbf
 3613 037f 8A030000 		.4byte	0x38a
 3614 0383 09       		.uleb128 0x9
 3615 0384 EF000000 		.4byte	0xef
 3616 0388 3F       		.byte	0x3f
 3617 0389 00       		.byte	0
 3618 038a 16       		.uleb128 0x16
 3619 038b D9000000 		.4byte	.LASF51
 3620 038f 01       		.byte	0x1
 3621 0390 55       		.byte	0x55
 3622 0391 7A030000 		.4byte	0x37a
 3623 0395 05       		.uleb128 0x5
 3624 0396 03       		.byte	0x3
 3625 0397 00000000 		.4byte	szTempBuffer
 3626 039b 16       		.uleb128 0x16
 3627 039c 8A010000 		.4byte	.LASF52
 3628 03a0 01       		.byte	0x1
 3629 03a1 56       		.byte	0x56
 3630 03a2 81000000 		.4byte	0x81
 3631 03a6 05       		.uleb128 0x5
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 85


 3632 03a7 03       		.byte	0x3
 3633 03a8 00000000 		.4byte	cCharsReceived
 3634 03ac 08       		.uleb128 0x8
 3635 03ad BF000000 		.4byte	0xbf
 3636 03b1 BD030000 		.4byte	0x3bd
 3637 03b5 17       		.uleb128 0x17
 3638 03b6 EF000000 		.4byte	0xef
 3639 03ba FF0F     		.2byte	0xfff
 3640 03bc 00       		.byte	0
 3641 03bd 16       		.uleb128 0x16
 3642 03be B5020000 		.4byte	.LASF53
 3643 03c2 01       		.byte	0x1
 3644 03c3 59       		.byte	0x59
 3645 03c4 AC030000 		.4byte	0x3ac
 3646 03c8 05       		.uleb128 0x5
 3647 03c9 03       		.byte	0x3
 3648 03ca 00000000 		.4byte	szCommandsBuffer
 3649 03ce 16       		.uleb128 0x16
 3650 03cf 52030000 		.4byte	.LASF54
 3651 03d3 01       		.byte	0x1
 3652 03d4 5A       		.byte	0x5a
 3653 03d5 8D000000 		.4byte	0x8d
 3654 03d9 05       		.uleb128 0x5
 3655 03da 03       		.byte	0x3
 3656 03db 00000000 		.4byte	iRead
 3657 03df 16       		.uleb128 0x16
 3658 03e0 D8010000 		.4byte	.LASF55
 3659 03e4 01       		.byte	0x1
 3660 03e5 5A       		.byte	0x5a
 3661 03e6 8D000000 		.4byte	0x8d
 3662 03ea 05       		.uleb128 0x5
 3663 03eb 03       		.byte	0x3
 3664 03ec 00000000 		.4byte	iWrite
 3665 03f0 16       		.uleb128 0x16
 3666 03f1 52010000 		.4byte	.LASF56
 3667 03f5 01       		.byte	0x1
 3668 03f6 5B       		.byte	0x5b
 3669 03f7 8D000000 		.4byte	0x8d
 3670 03fb 05       		.uleb128 0x5
 3671 03fc 03       		.byte	0x3
 3672 03fd 00000000 		.4byte	cCommandsReady
 3673 0401 16       		.uleb128 0x16
 3674 0402 BD030000 		.4byte	.LASF57
 3675 0406 01       		.byte	0x1
 3676 0407 5D       		.byte	0x5d
 3677 0408 7A030000 		.4byte	0x37a
 3678 040c 05       		.uleb128 0x5
 3679 040d 03       		.byte	0x3
 3680 040e 00000000 		.4byte	szCommand
 3681 0412 16       		.uleb128 0x16
 3682 0413 61010000 		.4byte	.LASF58
 3683 0417 01       		.byte	0x1
 3684 0418 5E       		.byte	0x5e
 3685 0419 81000000 		.4byte	0x81
 3686 041d 05       		.uleb128 0x5
 3687 041e 03       		.byte	0x3
 3688 041f 00000000 		.4byte	bCommandReady
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 86


 3689 0423 16       		.uleb128 0x16
 3690 0424 23000000 		.4byte	.LASF59
 3691 0428 01       		.byte	0x1
 3692 0429 61       		.byte	0x61
 3693 042a 81000000 		.4byte	0x81
 3694 042e 05       		.uleb128 0x5
 3695 042f 03       		.byte	0x3
 3696 0430 00000000 		.4byte	trigger_source
 3697 0434 08       		.uleb128 0x8
 3698 0435 81000000 		.4byte	0x81
 3699 0439 44040000 		.4byte	0x444
 3700 043d 09       		.uleb128 0x9
 3701 043e EF000000 		.4byte	0xef
 3702 0442 3F       		.byte	0x3f
 3703 0443 00       		.byte	0
 3704 0444 16       		.uleb128 0x16
 3705 0445 F0010000 		.4byte	.LASF60
 3706 0449 01       		.byte	0x1
 3707 044a 66       		.byte	0x66
 3708 044b 34040000 		.4byte	0x434
 3709 044f 05       		.uleb128 0x5
 3710 0450 03       		.byte	0x3
 3711 0451 00000000 		.4byte	USB_Out_Buffer
 3712 0455 08       		.uleb128 0x8
 3713 0456 81000000 		.4byte	0x81
 3714 045a 66040000 		.4byte	0x466
 3715 045e 17       		.uleb128 0x17
 3716 045f EF000000 		.4byte	0xef
 3717 0463 FF07     		.2byte	0x7ff
 3718 0465 00       		.byte	0
 3719 0466 16       		.uleb128 0x16
 3720 0467 C7030000 		.4byte	.LASF61
 3721 046b 01       		.byte	0x1
 3722 046c 6A       		.byte	0x6a
 3723 046d 55040000 		.4byte	0x455
 3724 0471 05       		.uleb128 0x5
 3725 0472 03       		.byte	0x3
 3726 0473 00000000 		.4byte	WaveformA_Buffer
 3727 0477 16       		.uleb128 0x16
 3728 0478 FD030000 		.4byte	.LASF62
 3729 047c 01       		.byte	0x1
 3730 047d 6B       		.byte	0x6b
 3731 047e 55040000 		.4byte	0x455
 3732 0482 05       		.uleb128 0x5
 3733 0483 03       		.byte	0x3
 3734 0484 00000000 		.4byte	WaveformA_Temp_Buffer
 3735 0488 16       		.uleb128 0x16
 3736 0489 13040000 		.4byte	.LASF63
 3737 048d 01       		.byte	0x1
 3738 048e 6C       		.byte	0x6c
 3739 048f 81000000 		.4byte	0x81
 3740 0493 05       		.uleb128 0x5
 3741 0494 03       		.byte	0x3
 3742 0495 00000000 		.4byte	wavea_gain
 3743 0499 16       		.uleb128 0x16
 3744 049a 56020000 		.4byte	.LASF64
 3745 049e 01       		.byte	0x1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 87


 3746 049f 6D       		.byte	0x6d
 3747 04a0 81000000 		.4byte	0x81
 3748 04a4 05       		.uleb128 0x5
 3749 04a5 03       		.byte	0x3
 3750 04a6 00000000 		.4byte	wavea_offset
 3751 04aa 16       		.uleb128 0x16
 3752 04ab 18010000 		.4byte	.LASF65
 3753 04af 01       		.byte	0x1
 3754 04b0 6E       		.byte	0x6e
 3755 04b1 55040000 		.4byte	0x455
 3756 04b5 05       		.uleb128 0x5
 3757 04b6 03       		.byte	0x3
 3758 04b7 00000000 		.4byte	WaveformB_Buffer
 3759 04bb 16       		.uleb128 0x16
 3760 04bc 3C030000 		.4byte	.LASF66
 3761 04c0 01       		.byte	0x1
 3762 04c1 6F       		.byte	0x6f
 3763 04c2 55040000 		.4byte	0x455
 3764 04c6 05       		.uleb128 0x5
 3765 04c7 03       		.byte	0x3
 3766 04c8 00000000 		.4byte	WaveformB_Temp_Buffer
 3767 04cc 16       		.uleb128 0x16
 3768 04cd 63020000 		.4byte	.LASF67
 3769 04d1 01       		.byte	0x1
 3770 04d2 70       		.byte	0x70
 3771 04d3 81000000 		.4byte	0x81
 3772 04d7 05       		.uleb128 0x5
 3773 04d8 03       		.byte	0x3
 3774 04d9 00000000 		.4byte	waveb_gain
 3775 04dd 16       		.uleb128 0x16
 3776 04de 9D030000 		.4byte	.LASF68
 3777 04e2 01       		.byte	0x1
 3778 04e3 71       		.byte	0x71
 3779 04e4 81000000 		.4byte	0x81
 3780 04e8 05       		.uleb128 0x5
 3781 04e9 03       		.byte	0x3
 3782 04ea 00000000 		.4byte	waveb_offset
 3783 04ee 16       		.uleb128 0x16
 3784 04ef C0010000 		.4byte	.LASF69
 3785 04f3 01       		.byte	0x1
 3786 04f4 75       		.byte	0x75
 3787 04f5 81000000 		.4byte	0x81
 3788 04f9 05       		.uleb128 0x5
 3789 04fa 03       		.byte	0x3
 3790 04fb 00000000 		.4byte	Noise_Adjusted
 3791 04ff 16       		.uleb128 0x16
 3792 0500 58030000 		.4byte	.LASF70
 3793 0504 01       		.byte	0x1
 3794 0505 7A       		.byte	0x7a
 3795 0506 81000000 		.4byte	0x81
 3796 050a 05       		.uleb128 0x5
 3797 050b 03       		.byte	0x3
 3798 050c 00000000 		.4byte	Digital_AutoUpdate
 3799 0510 00       		.byte	0
 3800              		.section	.debug_abbrev,"",%progbits
 3801              	.Ldebug_abbrev0:
 3802 0000 01       		.uleb128 0x1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 88


 3803 0001 11       		.uleb128 0x11
 3804 0002 01       		.byte	0x1
 3805 0003 25       		.uleb128 0x25
 3806 0004 0E       		.uleb128 0xe
 3807 0005 13       		.uleb128 0x13
 3808 0006 0B       		.uleb128 0xb
 3809 0007 03       		.uleb128 0x3
 3810 0008 0E       		.uleb128 0xe
 3811 0009 1B       		.uleb128 0x1b
 3812 000a 0E       		.uleb128 0xe
 3813 000b 55       		.uleb128 0x55
 3814 000c 17       		.uleb128 0x17
 3815 000d 11       		.uleb128 0x11
 3816 000e 01       		.uleb128 0x1
 3817 000f 10       		.uleb128 0x10
 3818 0010 17       		.uleb128 0x17
 3819 0011 00       		.byte	0
 3820 0012 00       		.byte	0
 3821 0013 02       		.uleb128 0x2
 3822 0014 24       		.uleb128 0x24
 3823 0015 00       		.byte	0
 3824 0016 0B       		.uleb128 0xb
 3825 0017 0B       		.uleb128 0xb
 3826 0018 3E       		.uleb128 0x3e
 3827 0019 0B       		.uleb128 0xb
 3828 001a 03       		.uleb128 0x3
 3829 001b 0E       		.uleb128 0xe
 3830 001c 00       		.byte	0
 3831 001d 00       		.byte	0
 3832 001e 03       		.uleb128 0x3
 3833 001f 16       		.uleb128 0x16
 3834 0020 00       		.byte	0
 3835 0021 03       		.uleb128 0x3
 3836 0022 0E       		.uleb128 0xe
 3837 0023 3A       		.uleb128 0x3a
 3838 0024 0B       		.uleb128 0xb
 3839 0025 3B       		.uleb128 0x3b
 3840 0026 0B       		.uleb128 0xb
 3841 0027 49       		.uleb128 0x49
 3842 0028 13       		.uleb128 0x13
 3843 0029 00       		.byte	0
 3844 002a 00       		.byte	0
 3845 002b 04       		.uleb128 0x4
 3846 002c 24       		.uleb128 0x24
 3847 002d 00       		.byte	0
 3848 002e 0B       		.uleb128 0xb
 3849 002f 0B       		.uleb128 0xb
 3850 0030 3E       		.uleb128 0x3e
 3851 0031 0B       		.uleb128 0xb
 3852 0032 03       		.uleb128 0x3
 3853 0033 08       		.uleb128 0x8
 3854 0034 00       		.byte	0
 3855 0035 00       		.byte	0
 3856 0036 05       		.uleb128 0x5
 3857 0037 16       		.uleb128 0x16
 3858 0038 00       		.byte	0
 3859 0039 03       		.uleb128 0x3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 89


 3860 003a 0E       		.uleb128 0xe
 3861 003b 3A       		.uleb128 0x3a
 3862 003c 0B       		.uleb128 0xb
 3863 003d 3B       		.uleb128 0x3b
 3864 003e 05       		.uleb128 0x5
 3865 003f 49       		.uleb128 0x49
 3866 0040 13       		.uleb128 0x13
 3867 0041 00       		.byte	0
 3868 0042 00       		.byte	0
 3869 0043 06       		.uleb128 0x6
 3870 0044 35       		.uleb128 0x35
 3871 0045 00       		.byte	0
 3872 0046 49       		.uleb128 0x49
 3873 0047 13       		.uleb128 0x13
 3874 0048 00       		.byte	0
 3875 0049 00       		.byte	0
 3876 004a 07       		.uleb128 0x7
 3877 004b 0F       		.uleb128 0xf
 3878 004c 00       		.byte	0
 3879 004d 0B       		.uleb128 0xb
 3880 004e 0B       		.uleb128 0xb
 3881 004f 49       		.uleb128 0x49
 3882 0050 13       		.uleb128 0x13
 3883 0051 00       		.byte	0
 3884 0052 00       		.byte	0
 3885 0053 08       		.uleb128 0x8
 3886 0054 01       		.uleb128 0x1
 3887 0055 01       		.byte	0x1
 3888 0056 49       		.uleb128 0x49
 3889 0057 13       		.uleb128 0x13
 3890 0058 01       		.uleb128 0x1
 3891 0059 13       		.uleb128 0x13
 3892 005a 00       		.byte	0
 3893 005b 00       		.byte	0
 3894 005c 09       		.uleb128 0x9
 3895 005d 21       		.uleb128 0x21
 3896 005e 00       		.byte	0
 3897 005f 49       		.uleb128 0x49
 3898 0060 13       		.uleb128 0x13
 3899 0061 2F       		.uleb128 0x2f
 3900 0062 0B       		.uleb128 0xb
 3901 0063 00       		.byte	0
 3902 0064 00       		.byte	0
 3903 0065 0A       		.uleb128 0xa
 3904 0066 13       		.uleb128 0x13
 3905 0067 01       		.byte	0x1
 3906 0068 03       		.uleb128 0x3
 3907 0069 0E       		.uleb128 0xe
 3908 006a 0B       		.uleb128 0xb
 3909 006b 0B       		.uleb128 0xb
 3910 006c 3A       		.uleb128 0x3a
 3911 006d 0B       		.uleb128 0xb
 3912 006e 3B       		.uleb128 0x3b
 3913 006f 0B       		.uleb128 0xb
 3914 0070 01       		.uleb128 0x1
 3915 0071 13       		.uleb128 0x13
 3916 0072 00       		.byte	0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 90


 3917 0073 00       		.byte	0
 3918 0074 0B       		.uleb128 0xb
 3919 0075 0D       		.uleb128 0xd
 3920 0076 00       		.byte	0
 3921 0077 03       		.uleb128 0x3
 3922 0078 08       		.uleb128 0x8
 3923 0079 3A       		.uleb128 0x3a
 3924 007a 0B       		.uleb128 0xb
 3925 007b 3B       		.uleb128 0x3b
 3926 007c 0B       		.uleb128 0xb
 3927 007d 49       		.uleb128 0x49
 3928 007e 13       		.uleb128 0x13
 3929 007f 38       		.uleb128 0x38
 3930 0080 0B       		.uleb128 0xb
 3931 0081 00       		.byte	0
 3932 0082 00       		.byte	0
 3933 0083 0C       		.uleb128 0xc
 3934 0084 2E       		.uleb128 0x2e
 3935 0085 01       		.byte	0x1
 3936 0086 3F       		.uleb128 0x3f
 3937 0087 19       		.uleb128 0x19
 3938 0088 03       		.uleb128 0x3
 3939 0089 0E       		.uleb128 0xe
 3940 008a 3A       		.uleb128 0x3a
 3941 008b 0B       		.uleb128 0xb
 3942 008c 3B       		.uleb128 0x3b
 3943 008d 0B       		.uleb128 0xb
 3944 008e 49       		.uleb128 0x49
 3945 008f 13       		.uleb128 0x13
 3946 0090 11       		.uleb128 0x11
 3947 0091 01       		.uleb128 0x1
 3948 0092 12       		.uleb128 0x12
 3949 0093 06       		.uleb128 0x6
 3950 0094 40       		.uleb128 0x40
 3951 0095 18       		.uleb128 0x18
 3952 0096 9642     		.uleb128 0x2116
 3953 0098 19       		.uleb128 0x19
 3954 0099 01       		.uleb128 0x1
 3955 009a 13       		.uleb128 0x13
 3956 009b 00       		.byte	0
 3957 009c 00       		.byte	0
 3958 009d 0D       		.uleb128 0xd
 3959 009e 34       		.uleb128 0x34
 3960 009f 00       		.byte	0
 3961 00a0 03       		.uleb128 0x3
 3962 00a1 0E       		.uleb128 0xe
 3963 00a2 3A       		.uleb128 0x3a
 3964 00a3 0B       		.uleb128 0xb
 3965 00a4 3B       		.uleb128 0x3b
 3966 00a5 0B       		.uleb128 0xb
 3967 00a6 49       		.uleb128 0x49
 3968 00a7 13       		.uleb128 0x13
 3969 00a8 02       		.uleb128 0x2
 3970 00a9 18       		.uleb128 0x18
 3971 00aa 00       		.byte	0
 3972 00ab 00       		.byte	0
 3973 00ac 0E       		.uleb128 0xe
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 91


 3974 00ad 34       		.uleb128 0x34
 3975 00ae 00       		.byte	0
 3976 00af 03       		.uleb128 0x3
 3977 00b0 08       		.uleb128 0x8
 3978 00b1 3A       		.uleb128 0x3a
 3979 00b2 0B       		.uleb128 0xb
 3980 00b3 3B       		.uleb128 0x3b
 3981 00b4 0B       		.uleb128 0xb
 3982 00b5 49       		.uleb128 0x49
 3983 00b6 13       		.uleb128 0x13
 3984 00b7 02       		.uleb128 0x2
 3985 00b8 18       		.uleb128 0x18
 3986 00b9 00       		.byte	0
 3987 00ba 00       		.byte	0
 3988 00bb 0F       		.uleb128 0xf
 3989 00bc 2E       		.uleb128 0x2e
 3990 00bd 00       		.byte	0
 3991 00be 3F       		.uleb128 0x3f
 3992 00bf 19       		.uleb128 0x19
 3993 00c0 03       		.uleb128 0x3
 3994 00c1 0E       		.uleb128 0xe
 3995 00c2 3A       		.uleb128 0x3a
 3996 00c3 0B       		.uleb128 0xb
 3997 00c4 3B       		.uleb128 0x3b
 3998 00c5 05       		.uleb128 0x5
 3999 00c6 27       		.uleb128 0x27
 4000 00c7 19       		.uleb128 0x19
 4001 00c8 11       		.uleb128 0x11
 4002 00c9 01       		.uleb128 0x1
 4003 00ca 12       		.uleb128 0x12
 4004 00cb 06       		.uleb128 0x6
 4005 00cc 40       		.uleb128 0x40
 4006 00cd 18       		.uleb128 0x18
 4007 00ce 9642     		.uleb128 0x2116
 4008 00d0 19       		.uleb128 0x19
 4009 00d1 00       		.byte	0
 4010 00d2 00       		.byte	0
 4011 00d3 10       		.uleb128 0x10
 4012 00d4 2E       		.uleb128 0x2e
 4013 00d5 01       		.byte	0x1
 4014 00d6 3F       		.uleb128 0x3f
 4015 00d7 19       		.uleb128 0x19
 4016 00d8 03       		.uleb128 0x3
 4017 00d9 0E       		.uleb128 0xe
 4018 00da 3A       		.uleb128 0x3a
 4019 00db 0B       		.uleb128 0xb
 4020 00dc 3B       		.uleb128 0x3b
 4021 00dd 05       		.uleb128 0x5
 4022 00de 27       		.uleb128 0x27
 4023 00df 19       		.uleb128 0x19
 4024 00e0 49       		.uleb128 0x49
 4025 00e1 13       		.uleb128 0x13
 4026 00e2 11       		.uleb128 0x11
 4027 00e3 01       		.uleb128 0x1
 4028 00e4 12       		.uleb128 0x12
 4029 00e5 06       		.uleb128 0x6
 4030 00e6 40       		.uleb128 0x40
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 92


 4031 00e7 18       		.uleb128 0x18
 4032 00e8 9742     		.uleb128 0x2117
 4033 00ea 19       		.uleb128 0x19
 4034 00eb 01       		.uleb128 0x1
 4035 00ec 13       		.uleb128 0x13
 4036 00ed 00       		.byte	0
 4037 00ee 00       		.byte	0
 4038 00ef 11       		.uleb128 0x11
 4039 00f0 05       		.uleb128 0x5
 4040 00f1 00       		.byte	0
 4041 00f2 03       		.uleb128 0x3
 4042 00f3 0E       		.uleb128 0xe
 4043 00f4 3A       		.uleb128 0x3a
 4044 00f5 0B       		.uleb128 0xb
 4045 00f6 3B       		.uleb128 0x3b
 4046 00f7 05       		.uleb128 0x5
 4047 00f8 49       		.uleb128 0x49
 4048 00f9 13       		.uleb128 0x13
 4049 00fa 02       		.uleb128 0x2
 4050 00fb 18       		.uleb128 0x18
 4051 00fc 00       		.byte	0
 4052 00fd 00       		.byte	0
 4053 00fe 12       		.uleb128 0x12
 4054 00ff 34       		.uleb128 0x34
 4055 0100 00       		.byte	0
 4056 0101 03       		.uleb128 0x3
 4057 0102 0E       		.uleb128 0xe
 4058 0103 3A       		.uleb128 0x3a
 4059 0104 0B       		.uleb128 0xb
 4060 0105 3B       		.uleb128 0x3b
 4061 0106 05       		.uleb128 0x5
 4062 0107 49       		.uleb128 0x49
 4063 0108 13       		.uleb128 0x13
 4064 0109 02       		.uleb128 0x2
 4065 010a 18       		.uleb128 0x18
 4066 010b 00       		.byte	0
 4067 010c 00       		.byte	0
 4068 010d 13       		.uleb128 0x13
 4069 010e 2E       		.uleb128 0x2e
 4070 010f 01       		.byte	0x1
 4071 0110 3F       		.uleb128 0x3f
 4072 0111 19       		.uleb128 0x19
 4073 0112 03       		.uleb128 0x3
 4074 0113 0E       		.uleb128 0xe
 4075 0114 3A       		.uleb128 0x3a
 4076 0115 0B       		.uleb128 0xb
 4077 0116 3B       		.uleb128 0x3b
 4078 0117 05       		.uleb128 0x5
 4079 0118 27       		.uleb128 0x27
 4080 0119 19       		.uleb128 0x19
 4081 011a 11       		.uleb128 0x11
 4082 011b 01       		.uleb128 0x1
 4083 011c 12       		.uleb128 0x12
 4084 011d 06       		.uleb128 0x6
 4085 011e 40       		.uleb128 0x40
 4086 011f 18       		.uleb128 0x18
 4087 0120 9642     		.uleb128 0x2116
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 93


 4088 0122 19       		.uleb128 0x19
 4089 0123 01       		.uleb128 0x1
 4090 0124 13       		.uleb128 0x13
 4091 0125 00       		.byte	0
 4092 0126 00       		.byte	0
 4093 0127 14       		.uleb128 0x14
 4094 0128 34       		.uleb128 0x34
 4095 0129 00       		.byte	0
 4096 012a 03       		.uleb128 0x3
 4097 012b 08       		.uleb128 0x8
 4098 012c 3A       		.uleb128 0x3a
 4099 012d 0B       		.uleb128 0xb
 4100 012e 3B       		.uleb128 0x3b
 4101 012f 05       		.uleb128 0x5
 4102 0130 49       		.uleb128 0x49
 4103 0131 13       		.uleb128 0x13
 4104 0132 02       		.uleb128 0x2
 4105 0133 18       		.uleb128 0x18
 4106 0134 00       		.byte	0
 4107 0135 00       		.byte	0
 4108 0136 15       		.uleb128 0x15
 4109 0137 34       		.uleb128 0x34
 4110 0138 00       		.byte	0
 4111 0139 03       		.uleb128 0x3
 4112 013a 0E       		.uleb128 0xe
 4113 013b 3A       		.uleb128 0x3a
 4114 013c 0B       		.uleb128 0xb
 4115 013d 3B       		.uleb128 0x3b
 4116 013e 05       		.uleb128 0x5
 4117 013f 49       		.uleb128 0x49
 4118 0140 13       		.uleb128 0x13
 4119 0141 3F       		.uleb128 0x3f
 4120 0142 19       		.uleb128 0x19
 4121 0143 3C       		.uleb128 0x3c
 4122 0144 19       		.uleb128 0x19
 4123 0145 00       		.byte	0
 4124 0146 00       		.byte	0
 4125 0147 16       		.uleb128 0x16
 4126 0148 34       		.uleb128 0x34
 4127 0149 00       		.byte	0
 4128 014a 03       		.uleb128 0x3
 4129 014b 0E       		.uleb128 0xe
 4130 014c 3A       		.uleb128 0x3a
 4131 014d 0B       		.uleb128 0xb
 4132 014e 3B       		.uleb128 0x3b
 4133 014f 0B       		.uleb128 0xb
 4134 0150 49       		.uleb128 0x49
 4135 0151 13       		.uleb128 0x13
 4136 0152 3F       		.uleb128 0x3f
 4137 0153 19       		.uleb128 0x19
 4138 0154 02       		.uleb128 0x2
 4139 0155 18       		.uleb128 0x18
 4140 0156 00       		.byte	0
 4141 0157 00       		.byte	0
 4142 0158 17       		.uleb128 0x17
 4143 0159 21       		.uleb128 0x21
 4144 015a 00       		.byte	0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 94


 4145 015b 49       		.uleb128 0x49
 4146 015c 13       		.uleb128 0x13
 4147 015d 2F       		.uleb128 0x2f
 4148 015e 05       		.uleb128 0x5
 4149 015f 00       		.byte	0
 4150 0160 00       		.byte	0
 4151 0161 00       		.byte	0
 4152              		.section	.debug_aranges,"",%progbits
 4153 0000 4C000000 		.4byte	0x4c
 4154 0004 0200     		.2byte	0x2
 4155 0006 00000000 		.4byte	.Ldebug_info0
 4156 000a 04       		.byte	0x4
 4157 000b 00       		.byte	0
 4158 000c 0000     		.2byte	0
 4159 000e 0000     		.2byte	0
 4160 0010 00000000 		.4byte	.LFB64
 4161 0014 F8110000 		.4byte	.LFE64-.LFB64
 4162 0018 00000000 		.4byte	.LFB65
 4163 001c 50010000 		.4byte	.LFE65-.LFB65
 4164 0020 00000000 		.4byte	.LFB66
 4165 0024 30010000 		.4byte	.LFE66-.LFB66
 4166 0028 00000000 		.4byte	.LFB67
 4167 002c 60000000 		.4byte	.LFE67-.LFB67
 4168 0030 00000000 		.4byte	.LFB68
 4169 0034 80010000 		.4byte	.LFE68-.LFB68
 4170 0038 00000000 		.4byte	.LFB69
 4171 003c 22000000 		.4byte	.LFE69-.LFB69
 4172 0040 00000000 		.4byte	.LFB70
 4173 0044 26000000 		.4byte	.LFE70-.LFB70
 4174 0048 00000000 		.4byte	0
 4175 004c 00000000 		.4byte	0
 4176              		.section	.debug_ranges,"",%progbits
 4177              	.Ldebug_ranges0:
 4178 0000 00000000 		.4byte	.LFB64
 4179 0004 F8110000 		.4byte	.LFE64
 4180 0008 00000000 		.4byte	.LFB65
 4181 000c 50010000 		.4byte	.LFE65
 4182 0010 00000000 		.4byte	.LFB66
 4183 0014 30010000 		.4byte	.LFE66
 4184 0018 00000000 		.4byte	.LFB67
 4185 001c 60000000 		.4byte	.LFE67
 4186 0020 00000000 		.4byte	.LFB68
 4187 0024 80010000 		.4byte	.LFE68
 4188 0028 00000000 		.4byte	.LFB69
 4189 002c 22000000 		.4byte	.LFE69
 4190 0030 00000000 		.4byte	.LFB70
 4191 0034 26000000 		.4byte	.LFE70
 4192 0038 00000000 		.4byte	0
 4193 003c 00000000 		.4byte	0
 4194              		.section	.debug_line,"",%progbits
 4195              	.Ldebug_line0:
 4196 0000 78040000 		.section	.debug_str,"MS",%progbits,1
 4196      02005801 
 4196      00000201 
 4196      FB0E0D00 
 4196      01010101 
 4197              	.LASF74:
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 95


 4198 0000 646D6163 		.ascii	"dmac_tdmem_struct\000"
 4198      5F74646D 
 4198      656D5F73 
 4198      74727563 
 4198      7400
 4199              	.LASF48:
 4200 0012 444D415F 		.ascii	"DMA_Channel_2_TD\000"
 4200      4368616E 
 4200      6E656C5F 
 4200      325F5444 
 4200      00
 4201              	.LASF59:
 4202 0023 74726967 		.ascii	"trigger_source\000"
 4202      6765725F 
 4202      736F7572 
 4202      636500
 4203              	.LASF19:
 4204 0032 72656731 		.ascii	"reg16\000"
 4204      3600
 4205              	.LASF2:
 4206 0038 73686F72 		.ascii	"short int\000"
 4206      7420696E 
 4206      7400
 4207              	.LASF21:
 4208 0042 73697A65 		.ascii	"sizetype\000"
 4208      74797065 
 4208      00
 4209              	.LASF71:
 4210 004b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4210      43313120 
 4210      352E342E 
 4210      31203230 
 4210      31363036 
 4211 007e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4211      20726576 
 4211      6973696F 
 4211      6E203233 
 4211      37373135 
 4212 00b1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4212      66756E63 
 4212      74696F6E 
 4212      2D736563 
 4212      74696F6E 
 4213              	.LASF51:
 4214 00d9 737A5465 		.ascii	"szTempBuffer\000"
 4214      6D704275 
 4214      66666572 
 4214      00
 4215              	.LASF47:
 4216 00e6 444D415F 		.ascii	"DMA_Channel_2_Chan\000"
 4216      4368616E 
 4216      6E656C5F 
 4216      325F4368 
 4216      616E00
 4217              	.LASF28:
 4218 00f9 70686173 		.ascii	"phase_int\000"
 4218      655F696E 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 96


 4218      7400
 4219              	.LASF12:
 4220 0103 75696E74 		.ascii	"uint16\000"
 4220      313600
 4221              	.LASF29:
 4222 010a 70776D5F 		.ascii	"pwm_div\000"
 4222      64697600 
 4223              	.LASF35:
 4224 0112 696E6465 		.ascii	"index\000"
 4224      7800
 4225              	.LASF65:
 4226 0118 57617665 		.ascii	"WaveformB_Buffer\000"
 4226      666F726D 
 4226      425F4275 
 4226      66666572 
 4226      00
 4227              	.LASF11:
 4228 0129 75696E74 		.ascii	"uint8\000"
 4228      3800
 4229              	.LASF75:
 4230 012f 4765744C 		.ascii	"GetLastSampleIndex\000"
 4230      61737453 
 4230      616D706C 
 4230      65496E64 
 4230      657800
 4231              	.LASF33:
 4232 0142 48617264 		.ascii	"Hardware_Config\000"
 4232      77617265 
 4232      5F436F6E 
 4232      66696700 
 4233              	.LASF56:
 4234 0152 63436F6D 		.ascii	"cCommandsReady\000"
 4234      6D616E64 
 4234      73526561 
 4234      647900
 4235              	.LASF58:
 4236 0161 62436F6D 		.ascii	"bCommandReady\000"
 4236      6D616E64 
 4236      52656164 
 4236      7900
 4237              	.LASF32:
 4238 016f 77617665 		.ascii	"wave_temp\000"
 4238      5F74656D 
 4238      7000
 4239              	.LASF30:
 4240 0179 75616464 		.ascii	"uaddr\000"
 4240      7200
 4241              	.LASF34:
 4242 017f 444D415F 		.ascii	"DMA_Config\000"
 4242      436F6E66 
 4242      696700
 4243              	.LASF52:
 4244 018a 63436861 		.ascii	"cCharsReceived\000"
 4244      72735265 
 4244      63656976 
 4244      656400
 4245              	.LASF15:
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 97


 4246 0199 666C6F61 		.ascii	"float\000"
 4246      7400
 4247              	.LASF24:
 4248 019f 656E6469 		.ascii	"ending_offset\000"
 4248      6E675F6F 
 4248      66667365 
 4248      7400
 4249              	.LASF31:
 4250 01ad 66726571 		.ascii	"freq\000"
 4250      00
 4251              	.LASF6:
 4252 01b2 6C6F6E67 		.ascii	"long long int\000"
 4252      206C6F6E 
 4252      6720696E 
 4252      7400
 4253              	.LASF69:
 4254 01c0 4E6F6973 		.ascii	"Noise_Adjusted\000"
 4254      655F4164 
 4254      6A757374 
 4254      656400
 4255              	.LASF4:
 4256 01cf 6C6F6E67 		.ascii	"long int\000"
 4256      20696E74 
 4256      00
 4257              	.LASF55:
 4258 01d8 69577269 		.ascii	"iWrite\000"
 4258      746500
 4259              	.LASF41:
 4260 01df 73747269 		.ascii	"string\000"
 4260      6E6700
 4261              	.LASF27:
 4262 01e6 756C656E 		.ascii	"ulen\000"
 4262      00
 4263              	.LASF43:
 4264 01eb 44617461 		.ascii	"Data\000"
 4264      00
 4265              	.LASF60:
 4266 01f0 5553425F 		.ascii	"USB_Out_Buffer\000"
 4266      4F75745F 
 4266      42756666 
 4266      657200
 4267              	.LASF73:
 4268 01ff 433A5C55 		.ascii	"C:\\Users\\merce\\Documents\\scope\\CyScope\\CY8CKI"
 4268      73657273 
 4268      5C6D6572 
 4268      63655C44 
 4268      6F63756D 
 4269 022c 542D3034 		.ascii	"T-043\\ScopeKitProg\\Scope_CY8KIT-043.cydsn\000"
 4269      335C5363 
 4269      6F70654B 
 4269      69745072 
 4269      6F675C53 
 4270              	.LASF64:
 4271 0256 77617665 		.ascii	"wavea_offset\000"
 4271      615F6F66 
 4271      66736574 
 4271      00
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 98


 4272              	.LASF67:
 4273 0263 77617665 		.ascii	"waveb_gain\000"
 4273      625F6761 
 4273      696E00
 4274              	.LASF45:
 4275 026e 444D415F 		.ascii	"DMA_Channel_1_Chan\000"
 4275      4368616E 
 4275      6E656C5F 
 4275      315F4368 
 4275      616E00
 4276              	.LASF20:
 4277 0281 6C6F6E67 		.ascii	"long double\000"
 4277      20646F75 
 4277      626C6500 
 4278              	.LASF42:
 4279 028d 50757443 		.ascii	"PutChar\000"
 4279      68617200 
 4280              	.LASF1:
 4281 0295 756E7369 		.ascii	"unsigned char\000"
 4281      676E6564 
 4281      20636861 
 4281      7200
 4282              	.LASF25:
 4283 02a3 61766172 		.ascii	"avar\000"
 4283      00
 4284              	.LASF37:
 4285 02a8 436F6D6D 		.ascii	"CommandCheck\000"
 4285      616E6443 
 4285      6865636B 
 4285      00
 4286              	.LASF53:
 4287 02b5 737A436F 		.ascii	"szCommandsBuffer\000"
 4287      6D6D616E 
 4287      64734275 
 4287      66666572 
 4287      00
 4288              	.LASF0:
 4289 02c6 7369676E 		.ascii	"signed char\000"
 4289      65642063 
 4289      68617200 
 4290              	.LASF7:
 4291 02d2 6C6F6E67 		.ascii	"long long unsigned int\000"
 4291      206C6F6E 
 4291      6720756E 
 4291      7369676E 
 4291      65642069 
 4292              	.LASF8:
 4293 02e9 756E7369 		.ascii	"unsigned int\000"
 4293      676E6564 
 4293      20696E74 
 4293      00
 4294              	.LASF49:
 4295 02f6 4368616E 		.ascii	"Channel_1_Data\000"
 4295      6E656C5F 
 4295      315F4461 
 4295      746100
 4296              	.LASF22:
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 99


 4297 0305 646D6163 		.ascii	"dmac_tdmem\000"
 4297      5F74646D 
 4297      656D00
 4298              	.LASF3:
 4299 0310 73686F72 		.ascii	"short unsigned int\000"
 4299      7420756E 
 4299      7369676E 
 4299      65642069 
 4299      6E7400
 4300              	.LASF23:
 4301 0323 73746174 		.ascii	"status\000"
 4301      757300
 4302              	.LASF17:
 4303 032a 63686172 		.ascii	"char\000"
 4303      00
 4304              	.LASF36:
 4305 032f 6D61696E 		.ascii	"main\000"
 4305      00
 4306              	.LASF10:
 4307 0334 696E7433 		.ascii	"int32_t\000"
 4307      325F7400 
 4308              	.LASF66:
 4309 033c 57617665 		.ascii	"WaveformB_Temp_Buffer\000"
 4309      666F726D 
 4309      425F5465 
 4309      6D705F42 
 4309      75666665 
 4310              	.LASF54:
 4311 0352 69526561 		.ascii	"iRead\000"
 4311      6400
 4312              	.LASF70:
 4313 0358 44696769 		.ascii	"Digital_AutoUpdate\000"
 4313      74616C5F 
 4313      4175746F 
 4313      55706461 
 4313      746500
 4314              	.LASF13:
 4315 036b 75696E74 		.ascii	"uint32\000"
 4315      333200
 4316              	.LASF72:
 4317 0372 6D61696E 		.ascii	"main.c\000"
 4317      2E6300
 4318              	.LASF18:
 4319 0379 72656738 		.ascii	"reg8\000"
 4319      00
 4320              	.LASF5:
 4321 037e 6C6F6E67 		.ascii	"long unsigned int\000"
 4321      20756E73 
 4321      69676E65 
 4321      6420696E 
 4321      7400
 4322              	.LASF14:
 4323 0390 696E7433 		.ascii	"int32\000"
 4323      3200
 4324              	.LASF16:
 4325 0396 646F7562 		.ascii	"double\000"
 4325      6C6500
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 100


 4326              	.LASF68:
 4327 039d 77617665 		.ascii	"waveb_offset\000"
 4327      625F6F66 
 4327      66736574 
 4327      00
 4328              	.LASF40:
 4329 03aa 63684861 		.ascii	"chHandle\000"
 4329      6E646C65 
 4329      00
 4330              	.LASF9:
 4331 03b3 5F5F696E 		.ascii	"__int32_t\000"
 4331      7433325F 
 4331      7400
 4332              	.LASF57:
 4333 03bd 737A436F 		.ascii	"szCommand\000"
 4333      6D6D616E 
 4333      6400
 4334              	.LASF61:
 4335 03c7 57617665 		.ascii	"WaveformA_Buffer\000"
 4335      666F726D 
 4335      415F4275 
 4335      66666572 
 4335      00
 4336              	.LASF39:
 4337 03d8 50757453 		.ascii	"PutString\000"
 4337      7472696E 
 4337      6700
 4338              	.LASF38:
 4339 03e2 52656365 		.ascii	"ReceivedBytes\000"
 4339      69766564 
 4339      42797465 
 4339      7300
 4340              	.LASF44:
 4341 03f0 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4341      52784275 
 4341      66666572 
 4341      00
 4342              	.LASF62:
 4343 03fd 57617665 		.ascii	"WaveformA_Temp_Buffer\000"
 4343      666F726D 
 4343      415F5465 
 4343      6D705F42 
 4343      75666665 
 4344              	.LASF63:
 4345 0413 77617665 		.ascii	"wavea_gain\000"
 4345      615F6761 
 4345      696E00
 4346              	.LASF50:
 4347 041e 4368616E 		.ascii	"Channel_2_Data\000"
 4347      6E656C5F 
 4347      325F4461 
 4347      746100
 4348              	.LASF46:
 4349 042d 444D415F 		.ascii	"DMA_Channel_1_TD\000"
 4349      4368616E 
 4349      6E656C5F 
 4349      315F5444 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccTUm6mP.s 			page 101


 4349      00
 4350              	.LASF26:
 4351 043e 62766172 		.ascii	"bvar\000"
 4351      00
 4352              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
