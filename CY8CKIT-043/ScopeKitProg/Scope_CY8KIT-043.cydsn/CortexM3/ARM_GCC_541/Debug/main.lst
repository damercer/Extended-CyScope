ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	DMA_Channel_1_Chan,1,1
  20              		.comm	DMA_Channel_1_TD,1,4
  21              		.comm	DMA_Channel_2_Chan,1,1
  22              		.comm	DMA_Channel_2_TD,1,4
  23              		.comm	Channel_1_Data,2048,4
  24              		.comm	Channel_2_Data,2048,4
  25              		.comm	szTempBuffer,64,4
  26              		.comm	cCharsReceived,1,1
  27              		.comm	szCommandsBuffer,4096,4
  28              		.comm	iRead,2,2
  29              		.comm	iWrite,2,2
  30              		.comm	cCommandsReady,2,2
  31              		.comm	szCommand,64,4
  32              		.comm	bCommandReady,1,1
  33              		.comm	trigger_source,1,1
  34              		.comm	USB_Out_Buffer,64,4
  35              		.comm	WaveformA_Buffer,2048,4
  36              		.comm	WaveformA_Temp_Buffer,2048,4
  37              		.global	wavea_gain
  38              		.bss
  39              		.type	wavea_gain, %object
  40              		.size	wavea_gain, 1
  41              	wavea_gain:
  42 0000 00       		.space	1
  43              		.global	wavea_offset
  44              		.type	wavea_offset, %object
  45              		.size	wavea_offset, 1
  46              	wavea_offset:
  47 0001 00       		.space	1
  48              		.comm	WaveformB_Buffer,2048,4
  49              		.comm	WaveformB_Temp_Buffer,2048,4
  50              		.global	waveb_gain
  51              		.type	waveb_gain, %object
  52              		.size	waveb_gain, 1
  53              	waveb_gain:
  54 0002 00       		.space	1
  55              		.global	waveb_offset
  56              		.type	waveb_offset, %object
  57              		.size	waveb_offset, 1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 2


  58              	waveb_offset:
  59 0003 00       		.space	1
  60              		.comm	Noise_Adjusted,1,1
  61              		.comm	Digital_AutoUpdate,1,1
  62              		.global	__aeabi_ui2f
  63              		.global	__aeabi_fmul
  64              		.global	__aeabi_f2d
  65              		.global	__aeabi_ddiv
  66              		.global	__aeabi_dadd
  67              		.global	__aeabi_d2f
  68              		.global	__aeabi_fcmpgt
  69              		.global	__aeabi_f2uiz
  70              		.section	.rodata
  71              		.align	2
  72              	.LC0:
  73 0000 2000     		.ascii	" \000"
  74 0002 0000     		.align	2
  75              	.LC1:
  76 0004 2A437953 		.ascii	"*CyScope V1.0\012\015\000"
  76      636F7065 
  76      2056312E 
  76      300A0D00 
  77              		.align	2
  78              	.LC2:
  79 0014 25687500 		.ascii	"%hu\000"
  80              		.global	__aeabi_dmul
  81              		.global	__aeabi_fdiv
  82              		.global	__aeabi_i2d
  83              		.global	__aeabi_d2uiz
  84              		.align	2
  85              	.LC3:
  86 0018 4572726F 		.ascii	"Error: Unrecognized Scope Command\012\015\000"
  86      723A2055 
  86      6E726563 
  86      6F676E69 
  86      7A656420 
  87              		.align	2
  88              	.LC4:
  89 003c 4572726F 		.ascii	"Error: Unknown Command\012\015\000"
  89      723A2055 
  89      6E6B6E6F 
  89      776E2043 
  89      6F6D6D61 
  90              		.section	.text.main,"ax",%progbits
  91              		.align	2
  92              		.global	main
  93              		.thumb
  94              		.thumb_func
  95              		.type	main, %function
  96              	main:
  97              	.LFB64:
  98              		.file 1 "main.c"
   1:main.c        **** /* ========================================
   2:main.c        ****  *
   3:main.c        ****  * Copyright Cypress Semiconductor, 2016
   4:main.c        ****  * All Rights Reserved
   5:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 3


   6:main.c        ****  *
   7:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:main.c        ****  * WHICH IS THE PROPERTY OF Cypress Semiconductor.
   9:main.c        ****  *
  10:main.c        ****  * ========================================
  11:main.c        **** */
  12:main.c        **** #include <device.h>
  13:main.c        **** #include <string.h>
  14:main.c        **** #include <stdio.h>
  15:main.c        **** 
  16:main.c        **** void DMA_Config(void);
  17:main.c        **** void Hardware_Config(void);
  18:main.c        **** uint16 GetLastSampleIndex(uint8 chHandle);
  19:main.c        **** void CommandCheck(void);
  20:main.c        **** void PutString(char * string);  // actually checks to see if the CDC device is ready before sending
  21:main.c        **** void PutChar(char Data);
  22:main.c        **** 
  23:main.c        **** // 2047 is the max buffer size in samples
  24:main.c        **** #define BUFFER_SIZE 1024
  25:main.c        **** 
  26:main.c        **** // trigger setup control register definitions
  27:main.c        **** #define FALLING_EDGE_TRIGGERED 0x01
  28:main.c        **** #define RISING_EDGE_TRIGGERED 0x02
  29:main.c        **** #define EITHER_EDGE_TRIGGERED 0x04
  30:main.c        **** #define EXTERNAL_TRIGGERED 0x08
  31:main.c        **** 
  32:main.c        **** #define TRIGGER_MASK 0x0F
  33:main.c        **** 
  34:main.c        **** #define MANUAL_TRIGGER 0x10
  35:main.c        **** #define TRIGGER_ARM 0x40
  36:main.c        **** #define RESET_PWM 0x80
  37:main.c        **** 
  38:main.c        **** // analog mux channel selection defines
  39:main.c        **** #define SCOPE_CHANNEL_1 0
  40:main.c        **** #define SCOPE_CHANNEL_2 1
  41:main.c        **** #define SCOPE_CHANNEL_3 0
  42:main.c        **** #define SCOPE_CHANNEL_4 1
  43:main.c        **** #define EXT_TRIGGER 2
  44:main.c        **** 
  45:main.c        **** // status register defines
  46:main.c        **** #define COMP_LEVEL 0x01
  47:main.c        **** #define TRIGGERED 0x02
  48:main.c        **** #define CAPTURE_COMPLETE 0x04
  49:main.c        **** 
  50:main.c        **** // Wave_Control control register definitions
  51:main.c        **** #define WAVEA_SELECT_MASK 0x01
  52:main.c        **** #define WAVE_SELECT_WAVE 0x00
  53:main.c        **** #define WAVEA_SELECT_NOISE 0x01
  54:main.c        **** #define WAVEB_SELECT_MASK 0x04
  55:main.c        **** #define WAVEB_SELECT_NOISE 0x04
  56:main.c        **** 
  57:main.c        **** /* DMA Configuration for DMA_Channel_1 */
  58:main.c        **** #define DMA_Channel_1_BYTES_PER_BURST 2
  59:main.c        **** #define DMA_Channel_1_REQUEST_PER_BURST 1
  60:main.c        **** #define DMA_Channel_1_SRC_BASE (CYDEV_PERIPH_BASE)
  61:main.c        **** #define DMA_Channel_1_DST_BASE (CYDEV_SRAM_BASE)
  62:main.c        **** 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 4


  63:main.c        **** /* DMA Configuration for DMA_Channel_2 */
  64:main.c        **** #define DMA_Channel_2_BYTES_PER_BURST 2
  65:main.c        **** #define DMA_Channel_2_REQUEST_PER_BURST 1
  66:main.c        **** #define DMA_Channel_2_SRC_BASE (CYDEV_PERIPH_BASE)
  67:main.c        **** #define DMA_Channel_2_DST_BASE (CYDEV_SRAM_BASE)
  68:main.c        **** 
  69:main.c        **** /* Variable declarations for DMA_Channel_1 */
  70:main.c        **** /* Move these variable declarations to the top of the function */
  71:main.c        **** uint8 DMA_Channel_1_Chan;
  72:main.c        **** uint8 DMA_Channel_1_TD[1];
  73:main.c        **** 
  74:main.c        **** /* Variable declarations for DMA_Channel_2 */
  75:main.c        **** /* Move these variable declarations to the top of the function */
  76:main.c        **** uint8 DMA_Channel_2_Chan;
  77:main.c        **** uint8 DMA_Channel_2_TD[1];
  78:main.c        **** 
  79:main.c        **** // RAM data arrays for storing the sampled data
  80:main.c        **** uint16 Channel_1_Data[BUFFER_SIZE];
  81:main.c        **** uint16 Channel_2_Data[BUFFER_SIZE];
  82:main.c        **** 
  83:main.c        **** // USB UART variables
  84:main.c        **** #define COMMAND_BUFFER_SIZE 64
  85:main.c        **** char szTempBuffer[COMMAND_BUFFER_SIZE];
  86:main.c        **** uint8 cCharsReceived;
  87:main.c        **** 
  88:main.c        **** #define CIRCULAR_BUFFER_SIZE 4096
  89:main.c        **** char szCommandsBuffer[CIRCULAR_BUFFER_SIZE]; // need to make this many times bigger to deal with th
  90:main.c        **** uint16 iRead, iWrite;
  91:main.c        **** uint16 cCommandsReady;
  92:main.c        **** 
  93:main.c        **** char szCommand[COMMAND_BUFFER_SIZE];
  94:main.c        **** uint8 bCommandReady;
  95:main.c        **** 
  96:main.c        **** // scope status variable
  97:main.c        **** uint8 trigger_source;
  98:main.c        **** 
  99:main.c        **** // for dumping data out (its 64 bytes, but if you want anything less, it has to be a multiple of 4)
 100:main.c        **** // also a good idea to make it a multiple of the ADC buffer size, defined above
 101:main.c        **** #define USBUART_BUFFER_SIZE 64
 102:main.c        **** uint8 USB_Out_Buffer[USBUART_BUFFER_SIZE];
 103:main.c        **** 
 104:main.c        **** // Waveform generator variables
 105:main.c        **** #define WAVEFORM_BUFFER_SIZE 2048
 106:main.c        **** uint8 WaveformA_Buffer[WAVEFORM_BUFFER_SIZE];
 107:main.c        **** uint8 WaveformA_Temp_Buffer[WAVEFORM_BUFFER_SIZE];
 108:main.c        **** uint8 wavea_gain = 0;
 109:main.c        **** uint8 wavea_offset = 0;
 110:main.c        **** uint8 WaveformB_Buffer[WAVEFORM_BUFFER_SIZE];
 111:main.c        **** uint8 WaveformB_Temp_Buffer[WAVEFORM_BUFFER_SIZE];
 112:main.c        **** uint8 waveb_gain = 0;
 113:main.c        **** uint8 waveb_offset = 0;
 114:main.c        **** 
 115:main.c        **** //GJL
 116:main.c        **** // Buffer for noise output after applying amplitude and offset
 117:main.c        **** uint8 Noise_Adjusted;
 118:main.c        **** 
 119:main.c        **** //GJL
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 5


 120:main.c        **** //// digital input last state variable
 121:main.c        **** //uint8 Digital_Input_Status_Last;
 122:main.c        **** uint8 Digital_AutoUpdate;
 123:main.c        **** 
 124:main.c        **** // For the SAR ADC to run at 18MHz, it *must* have a 50% duty cycle. 
 125:main.c        **** // There are 3 frequencies from the PLL that satisfy
 126:main.c        **** // generating an 18 Mhz clock from integer divides off the PLL: 36 Mhz
 127:main.c        **** // 54 Mhz and 72 Mhz.  Of these three choices, 54 Mhz requires a divide of
 128:main.c        **** // 3 which does not produce a 50% duty cycle.
 129:main.c        **** 
 130:main.c        **** int main()
 131:main.c        **** {
  99              		.loc 1 131 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 40
 102              		@ frame_needed = 1, uses_anonymous_args = 0
 103 0000 B0B5     		push	{r4, r5, r7, lr}
 104              		.cfi_def_cfa_offset 16
 105              		.cfi_offset 4, -16
 106              		.cfi_offset 5, -12
 107              		.cfi_offset 7, -8
 108              		.cfi_offset 14, -4
 109 0002 8AB0     		sub	sp, sp, #40
 110              		.cfi_def_cfa_offset 56
 111 0004 00AF     		add	r7, sp, #0
 112              		.cfi_def_cfa_register 7
 132:main.c        **** 	uint8 status;
 133:main.c        **** 	uint16 ending_offset;
 134:main.c        **** 	char * psz;
 135:main.c        **** 	uint16 avar, bvar, i;
 136:main.c        **** 	uint32 phase_int;
 137:main.c        ****     uint32 pwm_div;
 138:main.c        ****     uint32 uaddr;
 139:main.c        **** 	float freq;
 140:main.c        ****     float wave_temp;
 141:main.c        ****  
 142:main.c        ****     Hardware_Config();
 113              		.loc 1 142 0
 114 0006 FFF7FEFF 		bl	Hardware_Config
 143:main.c        ****     DMA_Config();
 115              		.loc 1 143 0
 116 000a FFF7FEFF 		bl	DMA_Config
 117              	.L112:
 144:main.c        **** 
 145:main.c        ****     for(;;)
 146:main.c        ****     {
 147:main.c        **** 		CommandCheck();
 118              		.loc 1 147 0
 119 000e FFF7FEFF 		bl	CommandCheck
 148:main.c        **** 		
 149:main.c        **** 		//GJL Adjust amplitude and offset for noise output
 150:main.c        **** 		wave_temp = (uint8) *PRS_SEED_PTR;
 120              		.loc 1 150 0
 121 0012 8F4B     		ldr	r3, .L120+8
 122 0014 1B88     		ldrh	r3, [r3]	@ movhi
 123 0016 9BB2     		uxth	r3, r3
 124 0018 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 6


 125 001a 1846     		mov	r0, r3
 126 001c FFF7FEFF 		bl	__aeabi_ui2f
 127 0020 0346     		mov	r3, r0
 128 0022 FB61     		str	r3, [r7, #28]	@ float
 151:main.c        **** 		wave_temp = (((float) wave_temp) * ((float)wavea_gain)/255.0) + ((float)wavea_offset);
 129              		.loc 1 151 0
 130 0024 8B4B     		ldr	r3, .L120+12
 131 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 132 0028 1846     		mov	r0, r3
 133 002a FFF7FEFF 		bl	__aeabi_ui2f
 134 002e 0346     		mov	r3, r0
 135 0030 F969     		ldr	r1, [r7, #28]	@ float
 136 0032 1846     		mov	r0, r3
 137 0034 FFF7FEFF 		bl	__aeabi_fmul
 138 0038 0346     		mov	r3, r0
 139 003a 1846     		mov	r0, r3
 140 003c FFF7FEFF 		bl	__aeabi_f2d
 141 0040 81A3     		adr	r3, .L120
 142 0042 D3E90023 		ldrd	r2, [r3]
 143 0046 FFF7FEFF 		bl	__aeabi_ddiv
 144 004a 0346     		mov	r3, r0
 145 004c 0C46     		mov	r4, r1
 146 004e 2546     		mov	r5, r4
 147 0050 1C46     		mov	r4, r3
 148 0052 814B     		ldr	r3, .L120+16
 149 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 150 0056 1846     		mov	r0, r3
 151 0058 FFF7FEFF 		bl	__aeabi_ui2f
 152 005c 0346     		mov	r3, r0
 153 005e 1846     		mov	r0, r3
 154 0060 FFF7FEFF 		bl	__aeabi_f2d
 155 0064 0246     		mov	r2, r0
 156 0066 0B46     		mov	r3, r1
 157 0068 2046     		mov	r0, r4
 158 006a 2946     		mov	r1, r5
 159 006c FFF7FEFF 		bl	__aeabi_dadd
 160 0070 0346     		mov	r3, r0
 161 0072 0C46     		mov	r4, r1
 162 0074 1846     		mov	r0, r3
 163 0076 2146     		mov	r1, r4
 164 0078 FFF7FEFF 		bl	__aeabi_d2f
 165 007c 0346     		mov	r3, r0
 166 007e FB61     		str	r3, [r7, #28]	@ float
 152:main.c        **** 		if(wave_temp > 255.0)
 167              		.loc 1 152 0
 168 0080 7649     		ldr	r1, .L120+20
 169 0082 F869     		ldr	r0, [r7, #28]	@ float
 170 0084 FFF7FEFF 		bl	__aeabi_fcmpgt
 171 0088 0346     		mov	r3, r0
 172 008a 002B     		cmp	r3, #0
 173 008c 01D0     		beq	.L2
 153:main.c        **** 		{
 154:main.c        **** 			wave_temp = 255.0;
 174              		.loc 1 154 0
 175 008e 734B     		ldr	r3, .L120+20
 176 0090 FB61     		str	r3, [r7, #28]	@ float
 177              	.L2:
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 7


 155:main.c        **** 		}
 156:main.c        **** 		Noise_Adjusted = (uint8) wave_temp;
 178              		.loc 1 156 0
 179 0092 F869     		ldr	r0, [r7, #28]	@ float
 180 0094 FFF7FEFF 		bl	__aeabi_f2uiz
 181 0098 0346     		mov	r3, r0
 182 009a DAB2     		uxtb	r2, r3
 183 009c 704B     		ldr	r3, .L120+24
 184 009e 1A70     		strb	r2, [r3]
 157:main.c        ****                
 158:main.c        **** 		if(bCommandReady != 0)
 185              		.loc 1 158 0
 186 00a0 704B     		ldr	r3, .L120+28
 187 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 188 00a4 002B     		cmp	r3, #0
 189 00a6 01F00580 		beq	.L4
 159:main.c        **** 		{
 160:main.c        **** 			psz = strtok(szCommand, " ");
 190              		.loc 1 160 0
 191 00aa 6F49     		ldr	r1, .L120+32
 192 00ac 6F48     		ldr	r0, .L120+36
 193 00ae FFF7FEFF 		bl	strtok
 194 00b2 B861     		str	r0, [r7, #24]
 161:main.c        **** 			if(*psz == 'i')
 195              		.loc 1 161 0
 196 00b4 BB69     		ldr	r3, [r7, #24]
 197 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 198 00b8 692B     		cmp	r3, #105
 199 00ba 04D1     		bne	.L5
 162:main.c        **** 			{
 163:main.c        **** 				// it all started here.  NOTE!  \n\r THE ORDER MATTERS!
 164:main.c        **** 				PutString("*CyScope V1.0\n\r");
 200              		.loc 1 164 0
 201 00bc 6C48     		ldr	r0, .L120+40
 202 00be FFF7FEFF 		bl	PutString
 203 00c2 00F0F4BF 		b	.L6
 204              	.L5:
 165:main.c        **** 			}
 166:main.c        **** //DM
 167:main.c        **** 			else if(*psz == 'D')
 205              		.loc 1 167 0
 206 00c6 BB69     		ldr	r3, [r7, #24]
 207 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 208 00ca 442B     		cmp	r3, #68
 209 00cc 74D1     		bne	.L7
 168:main.c        **** 			{
 169:main.c        **** 				// Digital I/O commands
 170:main.c        **** 				
 171:main.c        **** 				psz = strtok(0, " ");
 210              		.loc 1 171 0
 211 00ce 6649     		ldr	r1, .L120+32
 212 00d0 0020     		movs	r0, #0
 213 00d2 FFF7FEFF 		bl	strtok
 214 00d6 B861     		str	r0, [r7, #24]
 172:main.c        **** 				if(*psz == 'O')
 215              		.loc 1 172 0
 216 00d8 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 8


 217 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 218 00dc 4F2B     		cmp	r3, #79
 219 00de 11D1     		bne	.L8
 173:main.c        **** 				{
 174:main.c        **** 					// Digital output
 175:main.c        **** 					// D O N, where N is the output byte value as an ascii 8 bit number
 176:main.c        **** 					psz = strtok(0, " ");
 220              		.loc 1 176 0
 221 00e0 6149     		ldr	r1, .L120+32
 222 00e2 0020     		movs	r0, #0
 223 00e4 FFF7FEFF 		bl	strtok
 224 00e8 B861     		str	r0, [r7, #24]
 177:main.c        **** 					sscanf(psz,"%hu", &avar);
 225              		.loc 1 177 0
 226 00ea BB1D     		adds	r3, r7, #6
 227 00ec 1A46     		mov	r2, r3
 228 00ee 6149     		ldr	r1, .L120+44
 229 00f0 B869     		ldr	r0, [r7, #24]
 230 00f2 FFF7FEFF 		bl	sscanf
 178:main.c        **** 					Dig_Out_Reg_Write((uint8) avar);
 231              		.loc 1 178 0
 232 00f6 FB88     		ldrh	r3, [r7, #6]
 233 00f8 DBB2     		uxtb	r3, r3
 234 00fa 1846     		mov	r0, r3
 235 00fc FFF7FEFF 		bl	Dig_Out_Reg_Write
 236 0100 00F0D5BF 		b	.L6
 237              	.L8:
 179:main.c        **** 				}
 180:main.c        **** 				//else if(*psz == 'I')
 181:main.c        **** 				//{
 182:main.c        **** 					// reads digital inputs
 183:main.c        **** 					// returns Ix where x is an 8 bit (binary) value representing the status
 184:main.c        **** 					// of the digital input pins
 185:main.c        **** 					
 186:main.c        **** 					//PutChar('I');
 187:main.c        **** 					//PutChar((uint8) Digital_Input_Status_Read());
 188:main.c        **** 				//}
 189:main.c        **** 				else if(*psz == 'A')
 238              		.loc 1 189 0
 239 0104 BB69     		ldr	r3, [r7, #24]
 240 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 241 0108 412B     		cmp	r3, #65
 242 010a 04D1     		bne	.L10
 190:main.c        **** 				{
 191:main.c        **** 					Digital_AutoUpdate = 1;
 243              		.loc 1 191 0
 244 010c 5A4B     		ldr	r3, .L120+48
 245 010e 0122     		movs	r2, #1
 246 0110 1A70     		strb	r2, [r3]
 247 0112 00F0CCBF 		b	.L6
 248              	.L10:
 192:main.c        ****                     //PutChar('I');
 193:main.c        **** 					//PutChar((uint8) Digital_Input_Status_Read());
 194:main.c        **** 				}
 195:main.c        **** 				else if(*psz == 'a')
 249              		.loc 1 195 0
 250 0116 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 9


 251 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 252 011a 612B     		cmp	r3, #97
 253 011c 04D1     		bne	.L11
 196:main.c        **** 				{
 197:main.c        **** 					Digital_AutoUpdate = 0;
 254              		.loc 1 197 0
 255 011e 564B     		ldr	r3, .L120+48
 256 0120 0022     		movs	r2, #0
 257 0122 1A70     		strb	r2, [r3]
 258 0124 00F0C3BF 		b	.L6
 259              	.L11:
 198:main.c        **** 				}
 199:main.c        **** 				else if(*psz == 'F')
 260              		.loc 1 199 0
 261 0128 BB69     		ldr	r3, [r7, #24]
 262 012a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 263 012c 462B     		cmp	r3, #70
 264 012e 27D1     		bne	.L12
 200:main.c        **** 				{
 201:main.c        **** 					// set PWM output frequency
 202:main.c        **** 			    	// D F F_HIGH F_LOW where F_HIGH and F_LOW represent a 16 bit number
 203:main.c        ****                     psz = strtok(0, " ");
 265              		.loc 1 203 0
 266 0130 4D49     		ldr	r1, .L120+32
 267 0132 0020     		movs	r0, #0
 268 0134 FFF7FEFF 		bl	strtok
 269 0138 B861     		str	r0, [r7, #24]
 204:main.c        **** 					sscanf(psz,"%hu", &avar);
 270              		.loc 1 204 0
 271 013a BB1D     		adds	r3, r7, #6
 272 013c 1A46     		mov	r2, r3
 273 013e 4D49     		ldr	r1, .L120+44
 274 0140 B869     		ldr	r0, [r7, #24]
 275 0142 FFF7FEFF 		bl	sscanf
 205:main.c        **** 					pwm_div = ((uint32) avar)*256;
 276              		.loc 1 205 0
 277 0146 FB88     		ldrh	r3, [r7, #6]
 278 0148 1B02     		lsls	r3, r3, #8
 279 014a 7B61     		str	r3, [r7, #20]
 206:main.c        **** 					
 207:main.c        **** 					psz = strtok(0, " ");
 280              		.loc 1 207 0
 281 014c 4649     		ldr	r1, .L120+32
 282 014e 0020     		movs	r0, #0
 283 0150 FFF7FEFF 		bl	strtok
 284 0154 B861     		str	r0, [r7, #24]
 208:main.c        **** 					sscanf(psz,"%hu", &avar);
 285              		.loc 1 208 0
 286 0156 BB1D     		adds	r3, r7, #6
 287 0158 1A46     		mov	r2, r3
 288 015a 4649     		ldr	r1, .L120+44
 289 015c B869     		ldr	r0, [r7, #24]
 290 015e FFF7FEFF 		bl	sscanf
 209:main.c        **** 					pwm_div += ((uint32) avar);
 291              		.loc 1 209 0
 292 0162 FB88     		ldrh	r3, [r7, #6]
 293 0164 1A46     		mov	r2, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 10


 294 0166 7B69     		ldr	r3, [r7, #20]
 295 0168 1344     		add	r3, r3, r2
 296 016a 7B61     		str	r3, [r7, #20]
 210:main.c        **** 					Dig_PWM_Clock_SetDividerValue(pwm_div);
 297              		.loc 1 210 0
 298 016c 7B69     		ldr	r3, [r7, #20]
 299 016e 9BB2     		uxth	r3, r3
 300 0170 013B     		subs	r3, r3, #1
 301 0172 9BB2     		uxth	r3, r3
 302 0174 0121     		movs	r1, #1
 303 0176 1846     		mov	r0, r3
 304 0178 FFF7FEFF 		bl	Dig_PWM_Clock_SetDividerRegister
 305 017c 00F097BF 		b	.L6
 306              	.L12:
 211:main.c        **** 				}
 212:main.c        **** 				else if(*psz == 'D')
 307              		.loc 1 212 0
 308 0180 BB69     		ldr	r3, [r7, #24]
 309 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 310 0184 442B     		cmp	r3, #68
 311 0186 40F09287 		bne	.L6
 213:main.c        **** 				{
 214:main.c        **** 					// Set PWM Duty cycle
 215:main.c        **** 					// D D N where N is an 8 bit ascii value representing the duty cycle
 216:main.c        **** 					// from 0 to 249
 217:main.c        **** 					psz = strtok(0, " ");
 312              		.loc 1 217 0
 313 018a 3749     		ldr	r1, .L120+32
 314 018c 0020     		movs	r0, #0
 315 018e FFF7FEFF 		bl	strtok
 316 0192 B861     		str	r0, [r7, #24]
 218:main.c        **** 					sscanf(psz,"%hu", &avar);
 317              		.loc 1 218 0
 318 0194 BB1D     		adds	r3, r7, #6
 319 0196 1A46     		mov	r2, r3
 320 0198 3649     		ldr	r1, .L120+44
 321 019a B869     		ldr	r0, [r7, #24]
 322 019c FFF7FEFF 		bl	sscanf
 219:main.c        **** 					// GJL: Limit upper compare value to 249 since period is 249
 220:main.c        ****                     if(avar > 249)
 323              		.loc 1 220 0
 324 01a0 FB88     		ldrh	r3, [r7, #6]
 325 01a2 F92B     		cmp	r3, #249
 326 01a4 01D9     		bls	.L13
 221:main.c        ****                     {
 222:main.c        ****                         avar = 249;
 327              		.loc 1 222 0
 328 01a6 F923     		movs	r3, #249
 329 01a8 FB80     		strh	r3, [r7, #6]	@ movhi
 330              	.L13:
 223:main.c        ****                     }
 224:main.c        **** 					Dig_PWM_WriteCompare((uint8) avar);
 331              		.loc 1 224 0
 332 01aa FB88     		ldrh	r3, [r7, #6]
 333 01ac DBB2     		uxtb	r3, r3
 334 01ae 1846     		mov	r0, r3
 335 01b0 FFF7FEFF 		bl	Dig_PWM_WriteCompare
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 11


 336 01b4 00F07BBF 		b	.L6
 337              	.L7:
 225:main.c        **** 					//Dig_PWM_WriteCompare2((uint8) avar);
 226:main.c        **** 				}
 227:main.c        **** //				else if(*psz == '!')
 228:main.c        **** //				{
 229:main.c        **** //					// interrupt line configuration.  not implemented yet
 230:main.c        **** //					// sends back a '!' character when the interrupt condition is met
 231:main.c        **** //					// D ! M where M is the mode:
 232:main.c        **** //					// M = D : Disable
 233:main.c        **** //					// M = R : Rising Edge
 234:main.c        **** //					// M = F : Falling Edge
 235:main.c        **** //					// M = H : High Level
 236:main.c        **** //					// M = L : Low Level
 237:main.c        **** //					psz = strtok(0, " ");
 238:main.c        **** //					
 239:main.c        **** //					if(*psz == 'D')
 240:main.c        **** //					{
 241:main.c        **** //					}
 242:main.c        **** //					else if(*psz == 'R')
 243:main.c        **** //					{
 244:main.c        **** //					}
 245:main.c        **** //					else if(*psz == 'F')
 246:main.c        **** //					{
 247:main.c        **** //					}
 248:main.c        **** //					else if(*psz == 'H')
 249:main.c        **** //					{
 250:main.c        **** //					}
 251:main.c        **** //					else if(*psz == 'L')
 252:main.c        **** //					{
 253:main.c        **** //					}
 254:main.c        **** //					
 255:main.c        **** //					// if trigger condition is met, send back the '!' character
 256:main.c        **** //					//PutChar('!');
 257:main.c        **** //				}
 258:main.c        **** 			}
 259:main.c        **** 			else if(*psz == 'W')
 338              		.loc 1 259 0
 339 01b8 BB69     		ldr	r3, [r7, #24]
 340 01ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 341 01bc 572B     		cmp	r3, #87
 342 01be 40F07984 		bne	.L14
 260:main.c        **** 			{
 261:main.c        **** 				// waveform generator commands
 262:main.c        **** 				
 263:main.c        **** 				psz = strtok(0, " ");
 343              		.loc 1 263 0
 344 01c2 2949     		ldr	r1, .L120+32
 345 01c4 0020     		movs	r0, #0
 346 01c6 FFF7FEFF 		bl	strtok
 347 01ca B861     		str	r0, [r7, #24]
 264:main.c        **** 				if(*psz == 'S') // Upper Case for AWG A
 348              		.loc 1 264 0
 349 01cc BB69     		ldr	r3, [r7, #24]
 350 01ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 351 01d0 532B     		cmp	r3, #83
 352 01d2 31D1     		bne	.L15
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 12


 265:main.c        **** 				{
 266:main.c        **** 					// sample data into the buffer
 267:main.c        **** 					// command is W S H_ADDR L_ADDR DATA
 268:main.c        **** 					// ADDR is the 2 8 bit bytes for address 0 - 255
 269:main.c        **** 					// DATA is the waveform amplitude 0 - 255
 270:main.c        **** 					psz = strtok(0, " ");
 353              		.loc 1 270 0
 354 01d4 2449     		ldr	r1, .L120+32
 355 01d6 0020     		movs	r0, #0
 356 01d8 FFF7FEFF 		bl	strtok
 357 01dc B861     		str	r0, [r7, #24]
 271:main.c        **** 					sscanf(psz,"%hu", &avar);
 358              		.loc 1 271 0
 359 01de BB1D     		adds	r3, r7, #6
 360 01e0 1A46     		mov	r2, r3
 361 01e2 2449     		ldr	r1, .L120+44
 362 01e4 B869     		ldr	r0, [r7, #24]
 363 01e6 FFF7FEFF 		bl	sscanf
 272:main.c        ****                     uaddr = ((uint32) avar)*256;
 364              		.loc 1 272 0
 365 01ea FB88     		ldrh	r3, [r7, #6]
 366 01ec 1B02     		lsls	r3, r3, #8
 367 01ee 3B61     		str	r3, [r7, #16]
 273:main.c        **** 					//bvar = avar;  // something is wacky with sscanf.  if I dont move the data into bvar, 
 274:main.c        ****                     // then on the next call to sscanf, even
 275:main.c        **** 					// if I use another variable, avar gets reset to zero!
 276:main.c        **** 					psz = strtok(0, " ");
 368              		.loc 1 276 0
 369 01f0 1D49     		ldr	r1, .L120+32
 370 01f2 0020     		movs	r0, #0
 371 01f4 FFF7FEFF 		bl	strtok
 372 01f8 B861     		str	r0, [r7, #24]
 277:main.c        **** 					sscanf(psz,"%hu", &avar);
 373              		.loc 1 277 0
 374 01fa BB1D     		adds	r3, r7, #6
 375 01fc 1A46     		mov	r2, r3
 376 01fe 1D49     		ldr	r1, .L120+44
 377 0200 B869     		ldr	r0, [r7, #24]
 378 0202 FFF7FEFF 		bl	sscanf
 278:main.c        ****                     uaddr = uaddr + avar;
 379              		.loc 1 278 0
 380 0206 FB88     		ldrh	r3, [r7, #6]
 381 0208 1A46     		mov	r2, r3
 382 020a 3B69     		ldr	r3, [r7, #16]
 383 020c 1344     		add	r3, r3, r2
 384 020e 3B61     		str	r3, [r7, #16]
 279:main.c        ****                     //got the address
 280:main.c        **** 					psz = strtok(0, " ");
 385              		.loc 1 280 0
 386 0210 1549     		ldr	r1, .L120+32
 387 0212 0020     		movs	r0, #0
 388 0214 FFF7FEFF 		bl	strtok
 389 0218 B861     		str	r0, [r7, #24]
 281:main.c        **** 					sscanf(psz,"%hu", &avar);
 390              		.loc 1 281 0
 391 021a BB1D     		adds	r3, r7, #6
 392 021c 1A46     		mov	r2, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 13


 393 021e 1549     		ldr	r1, .L120+44
 394 0220 B869     		ldr	r0, [r7, #24]
 395 0222 FFF7FEFF 		bl	sscanf
 282:main.c        **** 					// got the data
 283:main.c        **** 					// store it in the buffer
 284:main.c        **** 					WaveformA_Temp_Buffer[uaddr] = avar;
 396              		.loc 1 284 0
 397 0226 FB88     		ldrh	r3, [r7, #6]
 398 0228 D9B2     		uxtb	r1, r3
 399 022a 144A     		ldr	r2, .L120+52
 400 022c 3B69     		ldr	r3, [r7, #16]
 401 022e 1344     		add	r3, r3, r2
 402 0230 0A46     		mov	r2, r1
 403 0232 1A70     		strb	r2, [r3]
 404 0234 00F03BBF 		b	.L6
 405              	.L15:
 285:main.c        **** 				}
 286:main.c        **** 				else if(*psz == 'P') // Upper Case for AWG A
 406              		.loc 1 286 0
 407 0238 BB69     		ldr	r3, [r7, #24]
 408 023a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 409 023c 502B     		cmp	r3, #80
 410 023e 6ED1     		bne	.L17
 287:main.c        **** 				{
 288:main.c        **** 					// program the waveform by copying it into the array that the waveform generator uses
 289:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 411              		.loc 1 289 0
 412 0240 0023     		movs	r3, #0
 413 0242 BB84     		strh	r3, [r7, #36]	@ movhi
 414 0244 65E0     		b	.L18
 415              	.L121:
 416 0246 00BF     		.align	3
 417              	.L120:
 418 0248 00000000 		.word	0
 419 024c 00E06F40 		.word	1081073664
 420 0250 08650040 		.word	1073767688
 421 0254 00000000 		.word	wavea_gain
 422 0258 00000000 		.word	wavea_offset
 423 025c 00007F43 		.word	1132396544
 424 0260 00000000 		.word	Noise_Adjusted
 425 0264 00000000 		.word	bCommandReady
 426 0268 00000000 		.word	.LC0
 427 026c 00000000 		.word	szCommand
 428 0270 04000000 		.word	.LC1
 429 0274 14000000 		.word	.LC2
 430 0278 00000000 		.word	Digital_AutoUpdate
 431 027c 00000000 		.word	WaveformA_Temp_Buffer
 432              	.L21:
 290:main.c        **** 					{
 291:main.c        **** 						// GJL - add offset and max checking
 292:main.c        ****                         wave_temp = (((float) WaveformA_Temp_Buffer[i]) * ((float)wavea_gain)/255.0
 433              		.loc 1 292 0
 434 0280 BB8C     		ldrh	r3, [r7, #36]
 435 0282 A54A     		ldr	r2, .L122+8
 436 0284 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 437 0286 1846     		mov	r0, r3
 438 0288 FFF7FEFF 		bl	__aeabi_ui2f
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 14


 439 028c 0446     		mov	r4, r0
 440 028e A34B     		ldr	r3, .L122+12
 441 0290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 442 0292 1846     		mov	r0, r3
 443 0294 FFF7FEFF 		bl	__aeabi_ui2f
 444 0298 0346     		mov	r3, r0
 445 029a 1946     		mov	r1, r3
 446 029c 2046     		mov	r0, r4
 447 029e FFF7FEFF 		bl	__aeabi_fmul
 448 02a2 0346     		mov	r3, r0
 449 02a4 1846     		mov	r0, r3
 450 02a6 FFF7FEFF 		bl	__aeabi_f2d
 451 02aa 99A3     		adr	r3, .L122
 452 02ac D3E90023 		ldrd	r2, [r3]
 453 02b0 FFF7FEFF 		bl	__aeabi_ddiv
 454 02b4 0346     		mov	r3, r0
 455 02b6 0C46     		mov	r4, r1
 456 02b8 2546     		mov	r5, r4
 457 02ba 1C46     		mov	r4, r3
 458 02bc 984B     		ldr	r3, .L122+16
 459 02be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 460 02c0 1846     		mov	r0, r3
 461 02c2 FFF7FEFF 		bl	__aeabi_ui2f
 462 02c6 0346     		mov	r3, r0
 463 02c8 1846     		mov	r0, r3
 464 02ca FFF7FEFF 		bl	__aeabi_f2d
 465 02ce 0246     		mov	r2, r0
 466 02d0 0B46     		mov	r3, r1
 467 02d2 2046     		mov	r0, r4
 468 02d4 2946     		mov	r1, r5
 469 02d6 FFF7FEFF 		bl	__aeabi_dadd
 470 02da 0346     		mov	r3, r0
 471 02dc 0C46     		mov	r4, r1
 472 02de 1846     		mov	r0, r3
 473 02e0 2146     		mov	r1, r4
 474 02e2 FFF7FEFF 		bl	__aeabi_d2f
 475 02e6 0346     		mov	r3, r0
 476 02e8 FB61     		str	r3, [r7, #28]	@ float
 293:main.c        ****                         if(wave_temp > 255.0)
 477              		.loc 1 293 0
 478 02ea 8E49     		ldr	r1, .L122+20
 479 02ec F869     		ldr	r0, [r7, #28]	@ float
 480 02ee FFF7FEFF 		bl	__aeabi_fcmpgt
 481 02f2 0346     		mov	r3, r0
 482 02f4 002B     		cmp	r3, #0
 483 02f6 01D0     		beq	.L19
 294:main.c        ****                         {
 295:main.c        ****                             wave_temp = 255.0;
 484              		.loc 1 295 0
 485 02f8 8A4B     		ldr	r3, .L122+20
 486 02fa FB61     		str	r3, [r7, #28]	@ float
 487              	.L19:
 296:main.c        ****                         }
 297:main.c        ****                         WaveformA_Buffer[i] = (uint8) wave_temp;
 488              		.loc 1 297 0 discriminator 2
 489 02fc BC8C     		ldrh	r4, [r7, #36]
 490 02fe F869     		ldr	r0, [r7, #28]	@ float
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 15


 491 0300 FFF7FEFF 		bl	__aeabi_f2uiz
 492 0304 0346     		mov	r3, r0
 493 0306 DAB2     		uxtb	r2, r3
 494 0308 874B     		ldr	r3, .L122+24
 495 030a 1A55     		strb	r2, [r3, r4]
 289:main.c        **** 					{
 496              		.loc 1 289 0 discriminator 2
 497 030c BB8C     		ldrh	r3, [r7, #36]
 498 030e 0133     		adds	r3, r3, #1
 499 0310 BB84     		strh	r3, [r7, #36]	@ movhi
 500              	.L18:
 289:main.c        **** 					{
 501              		.loc 1 289 0 is_stmt 0 discriminator 1
 502 0312 BB8C     		ldrh	r3, [r7, #36]
 503 0314 B3F5006F 		cmp	r3, #2048
 504 0318 B2D3     		bcc	.L21
 505 031a 00F0C8BE 		b	.L6
 506              	.L17:
 298:main.c        **** 					}   
 299:main.c        **** 				}
 300:main.c        **** 				else if(*psz == 'A') // Upper Case for AWG A
 507              		.loc 1 300 0 is_stmt 1
 508 031e BB69     		ldr	r3, [r7, #24]
 509 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 510 0322 412B     		cmp	r3, #65
 511 0324 60D1     		bne	.L22
 301:main.c        **** 				{
 302:main.c        **** 					// set the waveform amplitude
 303:main.c        **** 					// W A A0, where A0 is the a bit amplitude, 0 = 0%, 255 = 100%
 304:main.c        **** 					// program the waveform amplitude by copying it into the array that the waveform generator use
 305:main.c        **** 					// but scale it during the copy
 306:main.c        **** 					
 307:main.c        **** 					psz = strtok(0, " ");
 512              		.loc 1 307 0
 513 0326 8149     		ldr	r1, .L122+28
 514 0328 0020     		movs	r0, #0
 515 032a FFF7FEFF 		bl	strtok
 516 032e B861     		str	r0, [r7, #24]
 308:main.c        **** 					sscanf(psz,"%hu", &avar);
 517              		.loc 1 308 0
 518 0330 BB1D     		adds	r3, r7, #6
 519 0332 1A46     		mov	r2, r3
 520 0334 7E49     		ldr	r1, .L122+32
 521 0336 B869     		ldr	r0, [r7, #24]
 522 0338 FFF7FEFF 		bl	sscanf
 309:main.c        **** 					
 310:main.c        **** 					wavea_gain = avar;
 523              		.loc 1 310 0
 524 033c FB88     		ldrh	r3, [r7, #6]
 525 033e DAB2     		uxtb	r2, r3
 526 0340 764B     		ldr	r3, .L122+12
 527 0342 1A70     		strb	r2, [r3]
 311:main.c        **** 					
 312:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 528              		.loc 1 312 0
 529 0344 0023     		movs	r3, #0
 530 0346 BB84     		strh	r3, [r7, #36]	@ movhi
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 16


 531 0348 48E0     		b	.L23
 532              	.L26:
 313:main.c        **** 					{
 314:main.c        **** 						// GJL - add offset and max checking
 315:main.c        ****                         wave_temp = (((float) WaveformA_Temp_Buffer[i]) * ((float)wavea_gain)/255.0
 533              		.loc 1 315 0
 534 034a BB8C     		ldrh	r3, [r7, #36]
 535 034c 724A     		ldr	r2, .L122+8
 536 034e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 537 0350 1846     		mov	r0, r3
 538 0352 FFF7FEFF 		bl	__aeabi_ui2f
 539 0356 0446     		mov	r4, r0
 540 0358 704B     		ldr	r3, .L122+12
 541 035a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 542 035c 1846     		mov	r0, r3
 543 035e FFF7FEFF 		bl	__aeabi_ui2f
 544 0362 0346     		mov	r3, r0
 545 0364 1946     		mov	r1, r3
 546 0366 2046     		mov	r0, r4
 547 0368 FFF7FEFF 		bl	__aeabi_fmul
 548 036c 0346     		mov	r3, r0
 549 036e 1846     		mov	r0, r3
 550 0370 FFF7FEFF 		bl	__aeabi_f2d
 551 0374 66A3     		adr	r3, .L122
 552 0376 D3E90023 		ldrd	r2, [r3]
 553 037a FFF7FEFF 		bl	__aeabi_ddiv
 554 037e 0346     		mov	r3, r0
 555 0380 0C46     		mov	r4, r1
 556 0382 2546     		mov	r5, r4
 557 0384 1C46     		mov	r4, r3
 558 0386 664B     		ldr	r3, .L122+16
 559 0388 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 560 038a 1846     		mov	r0, r3
 561 038c FFF7FEFF 		bl	__aeabi_ui2f
 562 0390 0346     		mov	r3, r0
 563 0392 1846     		mov	r0, r3
 564 0394 FFF7FEFF 		bl	__aeabi_f2d
 565 0398 0246     		mov	r2, r0
 566 039a 0B46     		mov	r3, r1
 567 039c 2046     		mov	r0, r4
 568 039e 2946     		mov	r1, r5
 569 03a0 FFF7FEFF 		bl	__aeabi_dadd
 570 03a4 0346     		mov	r3, r0
 571 03a6 0C46     		mov	r4, r1
 572 03a8 1846     		mov	r0, r3
 573 03aa 2146     		mov	r1, r4
 574 03ac FFF7FEFF 		bl	__aeabi_d2f
 575 03b0 0346     		mov	r3, r0
 576 03b2 FB61     		str	r3, [r7, #28]	@ float
 316:main.c        ****                         if(wave_temp > 255.0)
 577              		.loc 1 316 0
 578 03b4 5B49     		ldr	r1, .L122+20
 579 03b6 F869     		ldr	r0, [r7, #28]	@ float
 580 03b8 FFF7FEFF 		bl	__aeabi_fcmpgt
 581 03bc 0346     		mov	r3, r0
 582 03be 002B     		cmp	r3, #0
 583 03c0 01D0     		beq	.L24
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 17


 317:main.c        ****                         {
 318:main.c        ****                             wave_temp = 255.0;
 584              		.loc 1 318 0
 585 03c2 584B     		ldr	r3, .L122+20
 586 03c4 FB61     		str	r3, [r7, #28]	@ float
 587              	.L24:
 319:main.c        ****                         }
 320:main.c        ****                         WaveformA_Buffer[i] = (uint8) wave_temp;
 588              		.loc 1 320 0 discriminator 2
 589 03c6 BC8C     		ldrh	r4, [r7, #36]
 590 03c8 F869     		ldr	r0, [r7, #28]	@ float
 591 03ca FFF7FEFF 		bl	__aeabi_f2uiz
 592 03ce 0346     		mov	r3, r0
 593 03d0 DAB2     		uxtb	r2, r3
 594 03d2 554B     		ldr	r3, .L122+24
 595 03d4 1A55     		strb	r2, [r3, r4]
 312:main.c        **** 					{
 596              		.loc 1 312 0 discriminator 2
 597 03d6 BB8C     		ldrh	r3, [r7, #36]
 598 03d8 0133     		adds	r3, r3, #1
 599 03da BB84     		strh	r3, [r7, #36]	@ movhi
 600              	.L23:
 312:main.c        **** 					{
 601              		.loc 1 312 0 is_stmt 0 discriminator 1
 602 03dc BB8C     		ldrh	r3, [r7, #36]
 603 03de B3F5006F 		cmp	r3, #2048
 604 03e2 B2D3     		bcc	.L26
 605 03e4 00F063BE 		b	.L6
 606              	.L22:
 321:main.c        **** 					}              
 322:main.c        ****                     
 323:main.c        **** 				}
 324:main.c        **** 				// GJL - add offset functionality
 325:main.c        ****                 else if(*psz == 'O') // Upper Case for AWG A
 607              		.loc 1 325 0 is_stmt 1
 608 03e8 BB69     		ldr	r3, [r7, #24]
 609 03ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 610 03ec 4F2B     		cmp	r3, #79
 611 03ee 60D1     		bne	.L27
 326:main.c        ****                 {
 327:main.c        ****                     // set waveform offset
 328:main.c        ****                     // W O O0 where O0 is the offset - 0 = 0%, 255 = 100%
 329:main.c        ****                     // program teh offset by copying it into the array that the waveform generator 
 330:main.c        ****                     // but adjust the values upwards during the copy
 331:main.c        ****                     
 332:main.c        ****                     psz = strtok(0, " ");
 612              		.loc 1 332 0
 613 03f0 4E49     		ldr	r1, .L122+28
 614 03f2 0020     		movs	r0, #0
 615 03f4 FFF7FEFF 		bl	strtok
 616 03f8 B861     		str	r0, [r7, #24]
 333:main.c        **** 					sscanf(psz,"%hu", &avar);
 617              		.loc 1 333 0
 618 03fa BB1D     		adds	r3, r7, #6
 619 03fc 1A46     		mov	r2, r3
 620 03fe 4C49     		ldr	r1, .L122+32
 621 0400 B869     		ldr	r0, [r7, #24]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 18


 622 0402 FFF7FEFF 		bl	sscanf
 334:main.c        **** 					
 335:main.c        **** 					wavea_offset = avar;
 623              		.loc 1 335 0
 624 0406 FB88     		ldrh	r3, [r7, #6]
 625 0408 DAB2     		uxtb	r2, r3
 626 040a 454B     		ldr	r3, .L122+16
 627 040c 1A70     		strb	r2, [r3]
 336:main.c        **** 					
 337:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 628              		.loc 1 337 0
 629 040e 0023     		movs	r3, #0
 630 0410 BB84     		strh	r3, [r7, #36]	@ movhi
 631 0412 48E0     		b	.L28
 632              	.L31:
 338:main.c        **** 					{
 339:main.c        **** 						// GJL temp - add offset
 340:main.c        ****                         wave_temp = (((float) WaveformA_Temp_Buffer[i]) * ((float)wavea_gain)/255.0
 633              		.loc 1 340 0
 634 0414 BB8C     		ldrh	r3, [r7, #36]
 635 0416 404A     		ldr	r2, .L122+8
 636 0418 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 637 041a 1846     		mov	r0, r3
 638 041c FFF7FEFF 		bl	__aeabi_ui2f
 639 0420 0446     		mov	r4, r0
 640 0422 3E4B     		ldr	r3, .L122+12
 641 0424 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 642 0426 1846     		mov	r0, r3
 643 0428 FFF7FEFF 		bl	__aeabi_ui2f
 644 042c 0346     		mov	r3, r0
 645 042e 1946     		mov	r1, r3
 646 0430 2046     		mov	r0, r4
 647 0432 FFF7FEFF 		bl	__aeabi_fmul
 648 0436 0346     		mov	r3, r0
 649 0438 1846     		mov	r0, r3
 650 043a FFF7FEFF 		bl	__aeabi_f2d
 651 043e 34A3     		adr	r3, .L122
 652 0440 D3E90023 		ldrd	r2, [r3]
 653 0444 FFF7FEFF 		bl	__aeabi_ddiv
 654 0448 0346     		mov	r3, r0
 655 044a 0C46     		mov	r4, r1
 656 044c 2546     		mov	r5, r4
 657 044e 1C46     		mov	r4, r3
 658 0450 334B     		ldr	r3, .L122+16
 659 0452 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 660 0454 1846     		mov	r0, r3
 661 0456 FFF7FEFF 		bl	__aeabi_ui2f
 662 045a 0346     		mov	r3, r0
 663 045c 1846     		mov	r0, r3
 664 045e FFF7FEFF 		bl	__aeabi_f2d
 665 0462 0246     		mov	r2, r0
 666 0464 0B46     		mov	r3, r1
 667 0466 2046     		mov	r0, r4
 668 0468 2946     		mov	r1, r5
 669 046a FFF7FEFF 		bl	__aeabi_dadd
 670 046e 0346     		mov	r3, r0
 671 0470 0C46     		mov	r4, r1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 19


 672 0472 1846     		mov	r0, r3
 673 0474 2146     		mov	r1, r4
 674 0476 FFF7FEFF 		bl	__aeabi_d2f
 675 047a 0346     		mov	r3, r0
 676 047c FB61     		str	r3, [r7, #28]	@ float
 341:main.c        ****                         if(wave_temp > 255.0)
 677              		.loc 1 341 0
 678 047e 2949     		ldr	r1, .L122+20
 679 0480 F869     		ldr	r0, [r7, #28]	@ float
 680 0482 FFF7FEFF 		bl	__aeabi_fcmpgt
 681 0486 0346     		mov	r3, r0
 682 0488 002B     		cmp	r3, #0
 683 048a 01D0     		beq	.L29
 342:main.c        ****                         {
 343:main.c        ****                             wave_temp = 255.0;
 684              		.loc 1 343 0
 685 048c 254B     		ldr	r3, .L122+20
 686 048e FB61     		str	r3, [r7, #28]	@ float
 687              	.L29:
 344:main.c        ****                         }
 345:main.c        ****                         WaveformA_Buffer[i] = (uint8) wave_temp;
 688              		.loc 1 345 0 discriminator 2
 689 0490 BC8C     		ldrh	r4, [r7, #36]
 690 0492 F869     		ldr	r0, [r7, #28]	@ float
 691 0494 FFF7FEFF 		bl	__aeabi_f2uiz
 692 0498 0346     		mov	r3, r0
 693 049a DAB2     		uxtb	r2, r3
 694 049c 224B     		ldr	r3, .L122+24
 695 049e 1A55     		strb	r2, [r3, r4]
 337:main.c        **** 					{
 696              		.loc 1 337 0 discriminator 2
 697 04a0 BB8C     		ldrh	r3, [r7, #36]
 698 04a2 0133     		adds	r3, r3, #1
 699 04a4 BB84     		strh	r3, [r7, #36]	@ movhi
 700              	.L28:
 337:main.c        **** 					{
 701              		.loc 1 337 0 is_stmt 0 discriminator 1
 702 04a6 BB8C     		ldrh	r3, [r7, #36]
 703 04a8 B3F5006F 		cmp	r3, #2048
 704 04ac B2D3     		bcc	.L31
 705 04ae 00F0FEBD 		b	.L6
 706              	.L27:
 346:main.c        **** 					}              
 347:main.c        ****                 }
 348:main.c        ****                 else if(*psz == 'W') // Upper Case for AWG A
 707              		.loc 1 348 0 is_stmt 1
 708 04b2 BB69     		ldr	r3, [r7, #24]
 709 04b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 710 04b6 572B     		cmp	r3, #87
 711 04b8 10D1     		bne	.L32
 349:main.c        **** 				{
 350:main.c        **** 					// select the waveform output
 351:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEA_SELECT_MASK);
 712              		.loc 1 351 0
 713 04ba FFF7FEFF 		bl	Wave_Control_Read
 714 04be 0346     		mov	r3, r0
 715 04c0 23F00103 		bic	r3, r3, #1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 20


 716 04c4 DBB2     		uxtb	r3, r3
 717 04c6 1846     		mov	r0, r3
 718 04c8 FFF7FEFF 		bl	Wave_Control_Write
 352:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 719              		.loc 1 352 0
 720 04cc FFF7FEFF 		bl	Wave_Control_Read
 721 04d0 0346     		mov	r3, r0
 722 04d2 1846     		mov	r0, r3
 723 04d4 FFF7FEFF 		bl	Wave_Control_Write
 724 04d8 00F0E9BD 		b	.L6
 725              	.L32:
 353:main.c        **** 				}
 354:main.c        **** 				else if(*psz == 'N') // Upper Case for AWG A
 726              		.loc 1 354 0
 727 04dc BB69     		ldr	r3, [r7, #24]
 728 04de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 729 04e0 4E2B     		cmp	r3, #78
 730 04e2 27D1     		bne	.L33
 355:main.c        **** 				{
 356:main.c        **** 					// select the noise output
 357:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEA_SELECT_MASK);
 731              		.loc 1 357 0
 732 04e4 FFF7FEFF 		bl	Wave_Control_Read
 733 04e8 0346     		mov	r3, r0
 734 04ea 23F00103 		bic	r3, r3, #1
 735 04ee DBB2     		uxtb	r3, r3
 736 04f0 1846     		mov	r0, r3
 737 04f2 FFF7FEFF 		bl	Wave_Control_Write
 358:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVEA_SELECT_NOISE);
 738              		.loc 1 358 0
 739 04f6 FFF7FEFF 		bl	Wave_Control_Read
 740 04fa 0346     		mov	r3, r0
 741 04fc 43F00103 		orr	r3, r3, #1
 742 0500 DBB2     		uxtb	r3, r3
 743 0502 1846     		mov	r0, r3
 744 0504 FFF7FEFF 		bl	Wave_Control_Write
 745 0508 00F0D1BD 		b	.L6
 746              	.L123:
 747 050c AFF30080 		.align	3
 748              	.L122:
 749 0510 00000000 		.word	0
 750 0514 00E06F40 		.word	1081073664
 751 0518 00000000 		.word	WaveformA_Temp_Buffer
 752 051c 00000000 		.word	wavea_gain
 753 0520 00000000 		.word	wavea_offset
 754 0524 00007F43 		.word	1132396544
 755 0528 00000000 		.word	WaveformA_Buffer
 756 052c 00000000 		.word	.LC0
 757 0530 14000000 		.word	.LC2
 758              	.L33:
 359:main.c        **** 				}
 360:main.c        **** 				else if(*psz == 'F') // Upper Case for AWG A
 759              		.loc 1 360 0
 760 0534 BB69     		ldr	r3, [r7, #24]
 761 0536 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 762 0538 462B     		cmp	r3, #70
 763 053a 7BD1     		bne	.L34
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 21


 361:main.c        **** 				{
 362:main.c        **** 					// set the frequency output of the waveform generator
 363:main.c        **** 					// best thing to have here is an actual DDS in the hardware
 364:main.c        **** 					// but to get this working, I'm just going to fake it by setting
 365:main.c        **** 					// the clock divider.  It wont work for everything, but it should be
 366:main.c        **** 					// passable.  The command is W F F3 F2 F1 F0 where Fn are 8 bit ascii
 367:main.c        **** 					// numbers that are combined into a 32 bit phase accumulator value
 368:main.c        **** 					// phase value = desired output frequency / 0.09313225746 Hz
 369:main.c        **** 					
 370:main.c        **** 					psz = strtok(0, " ");
 764              		.loc 1 370 0
 765 053c 9249     		ldr	r1, .L124+16
 766 053e 0020     		movs	r0, #0
 767 0540 FFF7FEFF 		bl	strtok
 768 0544 B861     		str	r0, [r7, #24]
 371:main.c        **** 					sscanf(psz,"%hu", &avar);
 769              		.loc 1 371 0
 770 0546 BB1D     		adds	r3, r7, #6
 771 0548 1A46     		mov	r2, r3
 772 054a 9049     		ldr	r1, .L124+20
 773 054c B869     		ldr	r0, [r7, #24]
 774 054e FFF7FEFF 		bl	sscanf
 372:main.c        **** 					phase_int = ((uint32) avar)*16777216;
 775              		.loc 1 372 0
 776 0552 FB88     		ldrh	r3, [r7, #6]
 777 0554 1B06     		lsls	r3, r3, #24
 778 0556 3B62     		str	r3, [r7, #32]
 373:main.c        **** 					
 374:main.c        **** 					psz = strtok(0, " ");
 779              		.loc 1 374 0
 780 0558 8B49     		ldr	r1, .L124+16
 781 055a 0020     		movs	r0, #0
 782 055c FFF7FEFF 		bl	strtok
 783 0560 B861     		str	r0, [r7, #24]
 375:main.c        **** 					sscanf(psz,"%hu", &avar);
 784              		.loc 1 375 0
 785 0562 BB1D     		adds	r3, r7, #6
 786 0564 1A46     		mov	r2, r3
 787 0566 8949     		ldr	r1, .L124+20
 788 0568 B869     		ldr	r0, [r7, #24]
 789 056a FFF7FEFF 		bl	sscanf
 376:main.c        **** 					phase_int += ((uint32) avar)*65536;
 790              		.loc 1 376 0
 791 056e FB88     		ldrh	r3, [r7, #6]
 792 0570 1B04     		lsls	r3, r3, #16
 793 0572 3A6A     		ldr	r2, [r7, #32]
 794 0574 1344     		add	r3, r3, r2
 795 0576 3B62     		str	r3, [r7, #32]
 377:main.c        **** 					
 378:main.c        **** 					psz = strtok(0, " ");
 796              		.loc 1 378 0
 797 0578 8349     		ldr	r1, .L124+16
 798 057a 0020     		movs	r0, #0
 799 057c FFF7FEFF 		bl	strtok
 800 0580 B861     		str	r0, [r7, #24]
 379:main.c        **** 					sscanf(psz,"%hu", &avar);
 801              		.loc 1 379 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 22


 802 0582 BB1D     		adds	r3, r7, #6
 803 0584 1A46     		mov	r2, r3
 804 0586 8149     		ldr	r1, .L124+20
 805 0588 B869     		ldr	r0, [r7, #24]
 806 058a FFF7FEFF 		bl	sscanf
 380:main.c        **** 					phase_int += ((uint32) avar)*256;
 807              		.loc 1 380 0
 808 058e FB88     		ldrh	r3, [r7, #6]
 809 0590 1B02     		lsls	r3, r3, #8
 810 0592 3A6A     		ldr	r2, [r7, #32]
 811 0594 1344     		add	r3, r3, r2
 812 0596 3B62     		str	r3, [r7, #32]
 381:main.c        **** 					
 382:main.c        **** 					psz = strtok(0, " ");
 813              		.loc 1 382 0
 814 0598 7B49     		ldr	r1, .L124+16
 815 059a 0020     		movs	r0, #0
 816 059c FFF7FEFF 		bl	strtok
 817 05a0 B861     		str	r0, [r7, #24]
 383:main.c        **** 					sscanf(psz,"%hu", &avar);
 818              		.loc 1 383 0
 819 05a2 BB1D     		adds	r3, r7, #6
 820 05a4 1A46     		mov	r2, r3
 821 05a6 7949     		ldr	r1, .L124+20
 822 05a8 B869     		ldr	r0, [r7, #24]
 823 05aa FFF7FEFF 		bl	sscanf
 384:main.c        **** 					phase_int += ((uint32) avar);
 824              		.loc 1 384 0
 825 05ae FB88     		ldrh	r3, [r7, #6]
 826 05b0 1A46     		mov	r2, r3
 827 05b2 3B6A     		ldr	r3, [r7, #32]
 828 05b4 1344     		add	r3, r3, r2
 829 05b6 3B62     		str	r3, [r7, #32]
 385:main.c        **** 					
 386:main.c        **** 					freq = ((float) phase_int)*.09313225746;
 830              		.loc 1 386 0
 831 05b8 386A     		ldr	r0, [r7, #32]
 832 05ba FFF7FEFF 		bl	__aeabi_ui2f
 833 05be 0346     		mov	r3, r0
 834 05c0 1846     		mov	r0, r3
 835 05c2 FFF7FEFF 		bl	__aeabi_f2d
 836 05c6 6CA3     		adr	r3, .L124
 837 05c8 D3E90023 		ldrd	r2, [r3]
 838 05cc FFF7FEFF 		bl	__aeabi_dmul
 839 05d0 0346     		mov	r3, r0
 840 05d2 0C46     		mov	r4, r1
 841 05d4 1846     		mov	r0, r3
 842 05d6 2146     		mov	r1, r4
 843 05d8 FFF7FEFF 		bl	__aeabi_d2f
 844 05dc 0346     		mov	r3, r0
 845 05de FB60     		str	r3, [r7, #12]	@ float
 387:main.c        **** 					
 388:main.c        **** 					// calculate the clock divider
 389:main.c        **** 					phase_int = (int32) (36000000.0/((float) WAVEFORM_BUFFER_SIZE))/freq;
 846              		.loc 1 389 0
 847 05e0 F968     		ldr	r1, [r7, #12]	@ float
 848 05e2 6B48     		ldr	r0, .L124+24
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 23


 849 05e4 FFF7FEFF 		bl	__aeabi_fdiv
 850 05e8 0346     		mov	r3, r0
 851 05ea 1846     		mov	r0, r3
 852 05ec FFF7FEFF 		bl	__aeabi_f2uiz
 853 05f0 0346     		mov	r3, r0
 854 05f2 3B62     		str	r3, [r7, #32]
 390:main.c        **** 					
 391:main.c        **** 					if(phase_int >= 65535)
 855              		.loc 1 391 0
 856 05f4 3B6A     		ldr	r3, [r7, #32]
 857 05f6 4FF6FE72 		movw	r2, #65534
 858 05fa 9342     		cmp	r3, r2
 859 05fc 03D9     		bls	.L35
 392:main.c        **** 					{
 393:main.c        **** 						phase_int = 65535;
 860              		.loc 1 393 0
 861 05fe 4FF6FF73 		movw	r3, #65535
 862 0602 3B62     		str	r3, [r7, #32]
 863 0604 04E0     		b	.L36
 864              	.L35:
 394:main.c        **** 					}
 395:main.c        **** 					else if(phase_int <= 15) // anything less than this and the DMA doesn't have time to execute
 865              		.loc 1 395 0
 866 0606 3B6A     		ldr	r3, [r7, #32]
 867 0608 0F2B     		cmp	r3, #15
 868 060a 01D8     		bhi	.L36
 396:main.c        **** 					{
 397:main.c        **** 						phase_int = 15;
 869              		.loc 1 397 0
 870 060c 0F23     		movs	r3, #15
 871 060e 3B62     		str	r3, [r7, #32]
 872              	.L36:
 398:main.c        **** 					}
 399:main.c        **** 					
 400:main.c        **** 					WaveA_Clock_SetDividerValue((uint16) phase_int);
 873              		.loc 1 400 0
 874 0610 3B6A     		ldr	r3, [r7, #32]
 875 0612 9BB2     		uxth	r3, r3
 876 0614 013B     		subs	r3, r3, #1
 877 0616 9BB2     		uxth	r3, r3
 878 0618 0121     		movs	r1, #1
 879 061a 1846     		mov	r0, r3
 880 061c FFF7FEFF 		bl	WaveA_Clock_SetDividerRegister
 401:main.c        ****                     NoiseA_Clock_SetDividerValue((uint16) phase_int);
 881              		.loc 1 401 0
 882 0620 3B6A     		ldr	r3, [r7, #32]
 883 0622 9BB2     		uxth	r3, r3
 884 0624 013B     		subs	r3, r3, #1
 885 0626 9BB2     		uxth	r3, r3
 886 0628 0121     		movs	r1, #1
 887 062a 1846     		mov	r0, r3
 888 062c FFF7FEFF 		bl	NoiseA_Clock_SetDividerRegister
 889 0630 00F03DBD 		b	.L6
 890              	.L34:
 402:main.c        **** 					
 403:main.c        **** 				}
 404:main.c        **** 				else if(*psz == 's') // Lower Case for AWG B
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 24


 891              		.loc 1 404 0
 892 0634 BB69     		ldr	r3, [r7, #24]
 893 0636 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 894 0638 732B     		cmp	r3, #115
 895 063a 31D1     		bne	.L37
 405:main.c        **** 				{
 406:main.c        **** 					// sample data into the buffer
 407:main.c        **** 					// command is W s H_ADDR L_ADDR DATA
 408:main.c        **** 					// ADDR is the 16 bits
 409:main.c        **** 					// DATA is the waveform amplitude 0 - 255
 410:main.c        **** 					psz = strtok(0, " ");
 896              		.loc 1 410 0
 897 063c 5249     		ldr	r1, .L124+16
 898 063e 0020     		movs	r0, #0
 899 0640 FFF7FEFF 		bl	strtok
 900 0644 B861     		str	r0, [r7, #24]
 411:main.c        **** 					sscanf(psz,"%hu", &avar);
 901              		.loc 1 411 0
 902 0646 BB1D     		adds	r3, r7, #6
 903 0648 1A46     		mov	r2, r3
 904 064a 5049     		ldr	r1, .L124+20
 905 064c B869     		ldr	r0, [r7, #24]
 906 064e FFF7FEFF 		bl	sscanf
 412:main.c        ****                     uaddr = ((uint32) avar)*256;
 907              		.loc 1 412 0
 908 0652 FB88     		ldrh	r3, [r7, #6]
 909 0654 1B02     		lsls	r3, r3, #8
 910 0656 3B61     		str	r3, [r7, #16]
 413:main.c        **** 					//bvar = avar;  // something is wacky with sscanf.  if I dont move the data into bvar, then on
 414:main.c        **** 					// if I use another variable, avar gets reset to zero!
 415:main.c        **** 					psz = strtok(0, " ");
 911              		.loc 1 415 0
 912 0658 4B49     		ldr	r1, .L124+16
 913 065a 0020     		movs	r0, #0
 914 065c FFF7FEFF 		bl	strtok
 915 0660 B861     		str	r0, [r7, #24]
 416:main.c        **** 					sscanf(psz,"%hu", &avar);
 916              		.loc 1 416 0
 917 0662 BB1D     		adds	r3, r7, #6
 918 0664 1A46     		mov	r2, r3
 919 0666 4949     		ldr	r1, .L124+20
 920 0668 B869     		ldr	r0, [r7, #24]
 921 066a FFF7FEFF 		bl	sscanf
 417:main.c        ****                     uaddr = uaddr + avar;
 922              		.loc 1 417 0
 923 066e FB88     		ldrh	r3, [r7, #6]
 924 0670 1A46     		mov	r2, r3
 925 0672 3B69     		ldr	r3, [r7, #16]
 926 0674 1344     		add	r3, r3, r2
 927 0676 3B61     		str	r3, [r7, #16]
 418:main.c        ****                     // got the address
 419:main.c        **** 					psz = strtok(0, " ");
 928              		.loc 1 419 0
 929 0678 4349     		ldr	r1, .L124+16
 930 067a 0020     		movs	r0, #0
 931 067c FFF7FEFF 		bl	strtok
 932 0680 B861     		str	r0, [r7, #24]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 25


 420:main.c        **** 					sscanf(psz,"%hu", &avar);
 933              		.loc 1 420 0
 934 0682 BB1D     		adds	r3, r7, #6
 935 0684 1A46     		mov	r2, r3
 936 0686 4149     		ldr	r1, .L124+20
 937 0688 B869     		ldr	r0, [r7, #24]
 938 068a FFF7FEFF 		bl	sscanf
 421:main.c        **** 					// got the data
 422:main.c        **** 					// store it in the buffer
 423:main.c        **** 					WaveformB_Temp_Buffer[uaddr] = avar;
 939              		.loc 1 423 0
 940 068e FB88     		ldrh	r3, [r7, #6]
 941 0690 D9B2     		uxtb	r1, r3
 942 0692 404A     		ldr	r2, .L124+28
 943 0694 3B69     		ldr	r3, [r7, #16]
 944 0696 1344     		add	r3, r3, r2
 945 0698 0A46     		mov	r2, r1
 946 069a 1A70     		strb	r2, [r3]
 947 069c 00F007BD 		b	.L6
 948              	.L37:
 424:main.c        **** 				}
 425:main.c        **** 				else if(*psz == 'p') // Lower Case for AWG B
 949              		.loc 1 425 0
 950 06a0 BB69     		ldr	r3, [r7, #24]
 951 06a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 952 06a4 702B     		cmp	r3, #112
 953 06a6 51D1     		bne	.L38
 426:main.c        **** 				{
 427:main.c        **** 					// program the waveform by copying it into the array that the waveform generator uses
 428:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 954              		.loc 1 428 0
 955 06a8 0023     		movs	r3, #0
 956 06aa BB84     		strh	r3, [r7, #36]	@ movhi
 957 06ac 48E0     		b	.L39
 958              	.L42:
 429:main.c        **** 					{
 430:main.c        **** 						// GJL - add offset and max checking
 431:main.c        ****                         wave_temp = (((float) WaveformB_Temp_Buffer[i]) * ((float)waveb_gain)/255.0
 959              		.loc 1 431 0
 960 06ae BB8C     		ldrh	r3, [r7, #36]
 961 06b0 384A     		ldr	r2, .L124+28
 962 06b2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 963 06b4 1846     		mov	r0, r3
 964 06b6 FFF7FEFF 		bl	__aeabi_ui2f
 965 06ba 0446     		mov	r4, r0
 966 06bc 364B     		ldr	r3, .L124+32
 967 06be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 968 06c0 1846     		mov	r0, r3
 969 06c2 FFF7FEFF 		bl	__aeabi_ui2f
 970 06c6 0346     		mov	r3, r0
 971 06c8 1946     		mov	r1, r3
 972 06ca 2046     		mov	r0, r4
 973 06cc FFF7FEFF 		bl	__aeabi_fmul
 974 06d0 0346     		mov	r3, r0
 975 06d2 1846     		mov	r0, r3
 976 06d4 FFF7FEFF 		bl	__aeabi_f2d
 977 06d8 29A3     		adr	r3, .L124+8
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 26


 978 06da D3E90023 		ldrd	r2, [r3]
 979 06de FFF7FEFF 		bl	__aeabi_ddiv
 980 06e2 0346     		mov	r3, r0
 981 06e4 0C46     		mov	r4, r1
 982 06e6 2546     		mov	r5, r4
 983 06e8 1C46     		mov	r4, r3
 984 06ea 2C4B     		ldr	r3, .L124+36
 985 06ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 986 06ee 1846     		mov	r0, r3
 987 06f0 FFF7FEFF 		bl	__aeabi_ui2f
 988 06f4 0346     		mov	r3, r0
 989 06f6 1846     		mov	r0, r3
 990 06f8 FFF7FEFF 		bl	__aeabi_f2d
 991 06fc 0246     		mov	r2, r0
 992 06fe 0B46     		mov	r3, r1
 993 0700 2046     		mov	r0, r4
 994 0702 2946     		mov	r1, r5
 995 0704 FFF7FEFF 		bl	__aeabi_dadd
 996 0708 0346     		mov	r3, r0
 997 070a 0C46     		mov	r4, r1
 998 070c 1846     		mov	r0, r3
 999 070e 2146     		mov	r1, r4
 1000 0710 FFF7FEFF 		bl	__aeabi_d2f
 1001 0714 0346     		mov	r3, r0
 1002 0716 FB61     		str	r3, [r7, #28]	@ float
 432:main.c        ****                         if(wave_temp > 255.0)
 1003              		.loc 1 432 0
 1004 0718 2149     		ldr	r1, .L124+40
 1005 071a F869     		ldr	r0, [r7, #28]	@ float
 1006 071c FFF7FEFF 		bl	__aeabi_fcmpgt
 1007 0720 0346     		mov	r3, r0
 1008 0722 002B     		cmp	r3, #0
 1009 0724 01D0     		beq	.L40
 433:main.c        ****                         {
 434:main.c        ****                             wave_temp = 255.0;
 1010              		.loc 1 434 0
 1011 0726 1E4B     		ldr	r3, .L124+40
 1012 0728 FB61     		str	r3, [r7, #28]	@ float
 1013              	.L40:
 435:main.c        ****                         }
 436:main.c        ****                         WaveformB_Buffer[i] = (uint8) wave_temp;
 1014              		.loc 1 436 0 discriminator 2
 1015 072a BC8C     		ldrh	r4, [r7, #36]
 1016 072c F869     		ldr	r0, [r7, #28]	@ float
 1017 072e FFF7FEFF 		bl	__aeabi_f2uiz
 1018 0732 0346     		mov	r3, r0
 1019 0734 DAB2     		uxtb	r2, r3
 1020 0736 1B4B     		ldr	r3, .L124+44
 1021 0738 1A55     		strb	r2, [r3, r4]
 428:main.c        **** 					{
 1022              		.loc 1 428 0 discriminator 2
 1023 073a BB8C     		ldrh	r3, [r7, #36]
 1024 073c 0133     		adds	r3, r3, #1
 1025 073e BB84     		strh	r3, [r7, #36]	@ movhi
 1026              	.L39:
 428:main.c        **** 					{
 1027              		.loc 1 428 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 27


 1028 0740 BB8C     		ldrh	r3, [r7, #36]
 1029 0742 B3F5006F 		cmp	r3, #2048
 1030 0746 B2D3     		bcc	.L42
 1031 0748 00F0B1BC 		b	.L6
 1032              	.L38:
 437:main.c        **** 					}   
 438:main.c        **** 				}
 439:main.c        **** 				else if(*psz == 'a') // Lower Case for AWG B
 1033              		.loc 1 439 0 is_stmt 1
 1034 074c BB69     		ldr	r3, [r7, #24]
 1035 074e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1036 0750 612B     		cmp	r3, #97
 1037 0752 78D1     		bne	.L43
 440:main.c        **** 				{
 441:main.c        **** 					// set the waveform amplitude
 442:main.c        **** 					// W a A0, where A0 is the a bit amplitude, 0 = 0%, 255 = 100%
 443:main.c        **** 					// program the waveform amplitude by copying it into the array that the waveform generator use
 444:main.c        **** 					// but scale it during the copy
 445:main.c        **** 					
 446:main.c        **** 					psz = strtok(0, " ");
 1038              		.loc 1 446 0
 1039 0754 0C49     		ldr	r1, .L124+16
 1040 0756 0020     		movs	r0, #0
 1041 0758 FFF7FEFF 		bl	strtok
 1042 075c B861     		str	r0, [r7, #24]
 447:main.c        **** 					sscanf(psz,"%hu", &avar);
 1043              		.loc 1 447 0
 1044 075e BB1D     		adds	r3, r7, #6
 1045 0760 1A46     		mov	r2, r3
 1046 0762 0A49     		ldr	r1, .L124+20
 1047 0764 B869     		ldr	r0, [r7, #24]
 1048 0766 FFF7FEFF 		bl	sscanf
 448:main.c        **** 					
 449:main.c        **** 					waveb_gain = avar;
 1049              		.loc 1 449 0
 1050 076a FB88     		ldrh	r3, [r7, #6]
 1051 076c DAB2     		uxtb	r2, r3
 1052 076e 0A4B     		ldr	r3, .L124+32
 1053 0770 1A70     		strb	r2, [r3]
 450:main.c        **** 					
 451:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 1054              		.loc 1 451 0
 1055 0772 0023     		movs	r3, #0
 1056 0774 BB84     		strh	r3, [r7, #36]	@ movhi
 1057 0776 60E0     		b	.L44
 1058              	.L125:
 1059              		.align	3
 1060              	.L124:
 1061 0778 524CFEFF 		.word	-111534
 1062 077c 83D7B73F 		.word	1069012867
 1063 0780 00000000 		.word	0
 1064 0784 00E06F40 		.word	1081073664
 1065 0788 00000000 		.word	.LC0
 1066 078c 14000000 		.word	.LC2
 1067 0790 00548946 		.word	1183405056
 1068 0794 00000000 		.word	WaveformB_Temp_Buffer
 1069 0798 00000000 		.word	waveb_gain
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 28


 1070 079c 00000000 		.word	waveb_offset
 1071 07a0 00007F43 		.word	1132396544
 1072 07a4 00000000 		.word	WaveformB_Buffer
 1073              	.L47:
 452:main.c        **** 					{
 453:main.c        **** 						// GJL - add offset and max checking
 454:main.c        ****                         wave_temp = (((float) WaveformB_Temp_Buffer[i]) * ((float)waveb_gain)/255.0
 1074              		.loc 1 454 0
 1075 07a8 BB8C     		ldrh	r3, [r7, #36]
 1076 07aa AF4A     		ldr	r2, .L126+16
 1077 07ac D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1078 07ae 1846     		mov	r0, r3
 1079 07b0 FFF7FEFF 		bl	__aeabi_ui2f
 1080 07b4 0446     		mov	r4, r0
 1081 07b6 AD4B     		ldr	r3, .L126+20
 1082 07b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1083 07ba 1846     		mov	r0, r3
 1084 07bc FFF7FEFF 		bl	__aeabi_ui2f
 1085 07c0 0346     		mov	r3, r0
 1086 07c2 1946     		mov	r1, r3
 1087 07c4 2046     		mov	r0, r4
 1088 07c6 FFF7FEFF 		bl	__aeabi_fmul
 1089 07ca 0346     		mov	r3, r0
 1090 07cc 1846     		mov	r0, r3
 1091 07ce FFF7FEFF 		bl	__aeabi_f2d
 1092 07d2 A1A3     		adr	r3, .L126
 1093 07d4 D3E90023 		ldrd	r2, [r3]
 1094 07d8 FFF7FEFF 		bl	__aeabi_ddiv
 1095 07dc 0346     		mov	r3, r0
 1096 07de 0C46     		mov	r4, r1
 1097 07e0 2546     		mov	r5, r4
 1098 07e2 1C46     		mov	r4, r3
 1099 07e4 A24B     		ldr	r3, .L126+24
 1100 07e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1101 07e8 1846     		mov	r0, r3
 1102 07ea FFF7FEFF 		bl	__aeabi_ui2f
 1103 07ee 0346     		mov	r3, r0
 1104 07f0 1846     		mov	r0, r3
 1105 07f2 FFF7FEFF 		bl	__aeabi_f2d
 1106 07f6 0246     		mov	r2, r0
 1107 07f8 0B46     		mov	r3, r1
 1108 07fa 2046     		mov	r0, r4
 1109 07fc 2946     		mov	r1, r5
 1110 07fe FFF7FEFF 		bl	__aeabi_dadd
 1111 0802 0346     		mov	r3, r0
 1112 0804 0C46     		mov	r4, r1
 1113 0806 1846     		mov	r0, r3
 1114 0808 2146     		mov	r1, r4
 1115 080a FFF7FEFF 		bl	__aeabi_d2f
 1116 080e 0346     		mov	r3, r0
 1117 0810 FB61     		str	r3, [r7, #28]	@ float
 455:main.c        ****                         if(wave_temp > 255.0)
 1118              		.loc 1 455 0
 1119 0812 9849     		ldr	r1, .L126+28
 1120 0814 F869     		ldr	r0, [r7, #28]	@ float
 1121 0816 FFF7FEFF 		bl	__aeabi_fcmpgt
 1122 081a 0346     		mov	r3, r0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 29


 1123 081c 002B     		cmp	r3, #0
 1124 081e 01D0     		beq	.L45
 456:main.c        ****                         {
 457:main.c        ****                             wave_temp = 255.0;
 1125              		.loc 1 457 0
 1126 0820 944B     		ldr	r3, .L126+28
 1127 0822 FB61     		str	r3, [r7, #28]	@ float
 1128              	.L45:
 458:main.c        ****                         }
 459:main.c        ****                         WaveformB_Buffer[i] = (uint8) wave_temp;
 1129              		.loc 1 459 0 discriminator 2
 1130 0824 BC8C     		ldrh	r4, [r7, #36]
 1131 0826 F869     		ldr	r0, [r7, #28]	@ float
 1132 0828 FFF7FEFF 		bl	__aeabi_f2uiz
 1133 082c 0346     		mov	r3, r0
 1134 082e DAB2     		uxtb	r2, r3
 1135 0830 914B     		ldr	r3, .L126+32
 1136 0832 1A55     		strb	r2, [r3, r4]
 451:main.c        **** 					{
 1137              		.loc 1 451 0 discriminator 2
 1138 0834 BB8C     		ldrh	r3, [r7, #36]
 1139 0836 0133     		adds	r3, r3, #1
 1140 0838 BB84     		strh	r3, [r7, #36]	@ movhi
 1141              	.L44:
 451:main.c        **** 					{
 1142              		.loc 1 451 0 is_stmt 0 discriminator 1
 1143 083a BB8C     		ldrh	r3, [r7, #36]
 1144 083c B3F5006F 		cmp	r3, #2048
 1145 0840 B2D3     		bcc	.L47
 1146 0842 00F034BC 		b	.L6
 1147              	.L43:
 460:main.c        **** 					}              
 461:main.c        ****                     
 462:main.c        **** 				}
 463:main.c        **** 				// GJL - add offset functionality
 464:main.c        ****                 else if(*psz == 'o') // Lower Case for AWG B
 1148              		.loc 1 464 0 is_stmt 1
 1149 0846 BB69     		ldr	r3, [r7, #24]
 1150 0848 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1151 084a 6F2B     		cmp	r3, #111
 1152 084c 5FD1     		bne	.L48
 465:main.c        ****                 {
 466:main.c        ****                     // set waveform offset
 467:main.c        ****                     // W o O0 where O0 is the offset - 0 = 0%, 255 = 100%
 468:main.c        ****                     // program teh offset by copying it into the array that the waveform generator 
 469:main.c        ****                     // but adjust the values upwards during the copy
 470:main.c        ****                     
 471:main.c        ****                     psz = strtok(0, " ");
 1153              		.loc 1 471 0
 1154 084e 8B49     		ldr	r1, .L126+36
 1155 0850 0020     		movs	r0, #0
 1156 0852 FFF7FEFF 		bl	strtok
 1157 0856 B861     		str	r0, [r7, #24]
 472:main.c        **** 					sscanf(psz,"%hu", &avar);
 1158              		.loc 1 472 0
 1159 0858 BB1D     		adds	r3, r7, #6
 1160 085a 1A46     		mov	r2, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 30


 1161 085c 8849     		ldr	r1, .L126+40
 1162 085e B869     		ldr	r0, [r7, #24]
 1163 0860 FFF7FEFF 		bl	sscanf
 473:main.c        **** 					
 474:main.c        **** 					waveb_offset = avar;
 1164              		.loc 1 474 0
 1165 0864 FB88     		ldrh	r3, [r7, #6]
 1166 0866 DAB2     		uxtb	r2, r3
 1167 0868 814B     		ldr	r3, .L126+24
 1168 086a 1A70     		strb	r2, [r3]
 475:main.c        **** 					
 476:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 1169              		.loc 1 476 0
 1170 086c 0023     		movs	r3, #0
 1171 086e BB84     		strh	r3, [r7, #36]	@ movhi
 1172 0870 48E0     		b	.L49
 1173              	.L52:
 477:main.c        **** 					{
 478:main.c        **** 						// GJL temp - add offset
 479:main.c        ****                         wave_temp = (((float) WaveformB_Temp_Buffer[i]) * ((float)waveb_gain)/255.0
 1174              		.loc 1 479 0
 1175 0872 BB8C     		ldrh	r3, [r7, #36]
 1176 0874 7C4A     		ldr	r2, .L126+16
 1177 0876 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1178 0878 1846     		mov	r0, r3
 1179 087a FFF7FEFF 		bl	__aeabi_ui2f
 1180 087e 0446     		mov	r4, r0
 1181 0880 7A4B     		ldr	r3, .L126+20
 1182 0882 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1183 0884 1846     		mov	r0, r3
 1184 0886 FFF7FEFF 		bl	__aeabi_ui2f
 1185 088a 0346     		mov	r3, r0
 1186 088c 1946     		mov	r1, r3
 1187 088e 2046     		mov	r0, r4
 1188 0890 FFF7FEFF 		bl	__aeabi_fmul
 1189 0894 0346     		mov	r3, r0
 1190 0896 1846     		mov	r0, r3
 1191 0898 FFF7FEFF 		bl	__aeabi_f2d
 1192 089c 6EA3     		adr	r3, .L126
 1193 089e D3E90023 		ldrd	r2, [r3]
 1194 08a2 FFF7FEFF 		bl	__aeabi_ddiv
 1195 08a6 0346     		mov	r3, r0
 1196 08a8 0C46     		mov	r4, r1
 1197 08aa 2546     		mov	r5, r4
 1198 08ac 1C46     		mov	r4, r3
 1199 08ae 704B     		ldr	r3, .L126+24
 1200 08b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1201 08b2 1846     		mov	r0, r3
 1202 08b4 FFF7FEFF 		bl	__aeabi_ui2f
 1203 08b8 0346     		mov	r3, r0
 1204 08ba 1846     		mov	r0, r3
 1205 08bc FFF7FEFF 		bl	__aeabi_f2d
 1206 08c0 0246     		mov	r2, r0
 1207 08c2 0B46     		mov	r3, r1
 1208 08c4 2046     		mov	r0, r4
 1209 08c6 2946     		mov	r1, r5
 1210 08c8 FFF7FEFF 		bl	__aeabi_dadd
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 31


 1211 08cc 0346     		mov	r3, r0
 1212 08ce 0C46     		mov	r4, r1
 1213 08d0 1846     		mov	r0, r3
 1214 08d2 2146     		mov	r1, r4
 1215 08d4 FFF7FEFF 		bl	__aeabi_d2f
 1216 08d8 0346     		mov	r3, r0
 1217 08da FB61     		str	r3, [r7, #28]	@ float
 480:main.c        ****                         if(wave_temp > 255.0)
 1218              		.loc 1 480 0
 1219 08dc 6549     		ldr	r1, .L126+28
 1220 08de F869     		ldr	r0, [r7, #28]	@ float
 1221 08e0 FFF7FEFF 		bl	__aeabi_fcmpgt
 1222 08e4 0346     		mov	r3, r0
 1223 08e6 002B     		cmp	r3, #0
 1224 08e8 01D0     		beq	.L50
 481:main.c        ****                         {
 482:main.c        ****                             wave_temp = 255.0;
 1225              		.loc 1 482 0
 1226 08ea 624B     		ldr	r3, .L126+28
 1227 08ec FB61     		str	r3, [r7, #28]	@ float
 1228              	.L50:
 483:main.c        ****                         }
 484:main.c        ****                         WaveformB_Buffer[i] = (uint8) wave_temp;
 1229              		.loc 1 484 0 discriminator 2
 1230 08ee BC8C     		ldrh	r4, [r7, #36]
 1231 08f0 F869     		ldr	r0, [r7, #28]	@ float
 1232 08f2 FFF7FEFF 		bl	__aeabi_f2uiz
 1233 08f6 0346     		mov	r3, r0
 1234 08f8 DAB2     		uxtb	r2, r3
 1235 08fa 5F4B     		ldr	r3, .L126+32
 1236 08fc 1A55     		strb	r2, [r3, r4]
 476:main.c        **** 					{
 1237              		.loc 1 476 0 discriminator 2
 1238 08fe BB8C     		ldrh	r3, [r7, #36]
 1239 0900 0133     		adds	r3, r3, #1
 1240 0902 BB84     		strh	r3, [r7, #36]	@ movhi
 1241              	.L49:
 476:main.c        **** 					{
 1242              		.loc 1 476 0 is_stmt 0 discriminator 1
 1243 0904 BB8C     		ldrh	r3, [r7, #36]
 1244 0906 B3F5006F 		cmp	r3, #2048
 1245 090a B2D3     		bcc	.L52
 1246 090c CFE3     		b	.L6
 1247              	.L48:
 485:main.c        **** 					}              
 486:main.c        ****                 }
 487:main.c        ****                 else if(*psz == 'w') // Lower Case for AWG B
 1248              		.loc 1 487 0 is_stmt 1
 1249 090e BB69     		ldr	r3, [r7, #24]
 1250 0910 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1251 0912 772B     		cmp	r3, #119
 1252 0914 0FD1     		bne	.L53
 488:main.c        **** 				{
 489:main.c        **** 					// select the waveform output
 490:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEB_SELECT_MASK);
 1253              		.loc 1 490 0
 1254 0916 FFF7FEFF 		bl	Wave_Control_Read
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 32


 1255 091a 0346     		mov	r3, r0
 1256 091c 23F00403 		bic	r3, r3, #4
 1257 0920 DBB2     		uxtb	r3, r3
 1258 0922 1846     		mov	r0, r3
 1259 0924 FFF7FEFF 		bl	Wave_Control_Write
 491:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 1260              		.loc 1 491 0
 1261 0928 FFF7FEFF 		bl	Wave_Control_Read
 1262 092c 0346     		mov	r3, r0
 1263 092e 1846     		mov	r0, r3
 1264 0930 FFF7FEFF 		bl	Wave_Control_Write
 1265 0934 BBE3     		b	.L6
 1266              	.L53:
 492:main.c        **** 				}
 493:main.c        **** 				else if(*psz == 'n') // Lower Case for AWG B
 1267              		.loc 1 493 0
 1268 0936 BB69     		ldr	r3, [r7, #24]
 1269 0938 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1270 093a 6E2B     		cmp	r3, #110
 1271 093c 12D1     		bne	.L54
 494:main.c        **** 				{
 495:main.c        **** 					// select the noise output
 496:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVEB_SELECT_MASK);
 1272              		.loc 1 496 0
 1273 093e FFF7FEFF 		bl	Wave_Control_Read
 1274 0942 0346     		mov	r3, r0
 1275 0944 23F00403 		bic	r3, r3, #4
 1276 0948 DBB2     		uxtb	r3, r3
 1277 094a 1846     		mov	r0, r3
 1278 094c FFF7FEFF 		bl	Wave_Control_Write
 497:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVEB_SELECT_NOISE);
 1279              		.loc 1 497 0
 1280 0950 FFF7FEFF 		bl	Wave_Control_Read
 1281 0954 0346     		mov	r3, r0
 1282 0956 43F00403 		orr	r3, r3, #4
 1283 095a DBB2     		uxtb	r3, r3
 1284 095c 1846     		mov	r0, r3
 1285 095e FFF7FEFF 		bl	Wave_Control_Write
 1286 0962 A4E3     		b	.L6
 1287              	.L54:
 498:main.c        **** 				}
 499:main.c        **** 				else if(*psz == 'f') // Lower Case for AWG B
 1288              		.loc 1 499 0
 1289 0964 BB69     		ldr	r3, [r7, #24]
 1290 0966 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1291 0968 662B     		cmp	r3, #102
 1292 096a 40F08D80 		bne	.L55
 500:main.c        **** 				{
 501:main.c        **** 					// set the frequency output of the waveform generator
 502:main.c        **** 					// best thing to have here is an actual DDS in the hardware
 503:main.c        **** 					// but to get this working, I'm just going to fake it by setting
 504:main.c        **** 					// the clock divider.  It wont work for everything, but it should be
 505:main.c        **** 					// passable.  The command is W f F3 F2 F1 F0 where Fn are 8 bit ascii
 506:main.c        **** 					// numbers that are combined into a 32 bit phase accumulator value
 507:main.c        **** 					// phase value = desired output frequency / 0.09313225746 Hz
 508:main.c        **** 					
 509:main.c        **** 					psz = strtok(0, " ");
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 33


 1293              		.loc 1 509 0
 1294 096e 4349     		ldr	r1, .L126+36
 1295 0970 0020     		movs	r0, #0
 1296 0972 FFF7FEFF 		bl	strtok
 1297 0976 B861     		str	r0, [r7, #24]
 510:main.c        **** 					sscanf(psz,"%hu", &avar);
 1298              		.loc 1 510 0
 1299 0978 BB1D     		adds	r3, r7, #6
 1300 097a 1A46     		mov	r2, r3
 1301 097c 4049     		ldr	r1, .L126+40
 1302 097e B869     		ldr	r0, [r7, #24]
 1303 0980 FFF7FEFF 		bl	sscanf
 511:main.c        **** 					phase_int = ((uint32) avar)*16777216;
 1304              		.loc 1 511 0
 1305 0984 FB88     		ldrh	r3, [r7, #6]
 1306 0986 1B06     		lsls	r3, r3, #24
 1307 0988 3B62     		str	r3, [r7, #32]
 512:main.c        **** 					
 513:main.c        **** 					psz = strtok(0, " ");
 1308              		.loc 1 513 0
 1309 098a 3C49     		ldr	r1, .L126+36
 1310 098c 0020     		movs	r0, #0
 1311 098e FFF7FEFF 		bl	strtok
 1312 0992 B861     		str	r0, [r7, #24]
 514:main.c        **** 					sscanf(psz,"%hu", &avar);
 1313              		.loc 1 514 0
 1314 0994 BB1D     		adds	r3, r7, #6
 1315 0996 1A46     		mov	r2, r3
 1316 0998 3949     		ldr	r1, .L126+40
 1317 099a B869     		ldr	r0, [r7, #24]
 1318 099c FFF7FEFF 		bl	sscanf
 515:main.c        **** 					phase_int += ((uint32) avar)*65536;
 1319              		.loc 1 515 0
 1320 09a0 FB88     		ldrh	r3, [r7, #6]
 1321 09a2 1B04     		lsls	r3, r3, #16
 1322 09a4 3A6A     		ldr	r2, [r7, #32]
 1323 09a6 1344     		add	r3, r3, r2
 1324 09a8 3B62     		str	r3, [r7, #32]
 516:main.c        **** 					
 517:main.c        **** 					psz = strtok(0, " ");
 1325              		.loc 1 517 0
 1326 09aa 3449     		ldr	r1, .L126+36
 1327 09ac 0020     		movs	r0, #0
 1328 09ae FFF7FEFF 		bl	strtok
 1329 09b2 B861     		str	r0, [r7, #24]
 518:main.c        **** 					sscanf(psz,"%hu", &avar);
 1330              		.loc 1 518 0
 1331 09b4 BB1D     		adds	r3, r7, #6
 1332 09b6 1A46     		mov	r2, r3
 1333 09b8 3149     		ldr	r1, .L126+40
 1334 09ba B869     		ldr	r0, [r7, #24]
 1335 09bc FFF7FEFF 		bl	sscanf
 519:main.c        **** 					phase_int += ((uint32) avar)*256;
 1336              		.loc 1 519 0
 1337 09c0 FB88     		ldrh	r3, [r7, #6]
 1338 09c2 1B02     		lsls	r3, r3, #8
 1339 09c4 3A6A     		ldr	r2, [r7, #32]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 34


 1340 09c6 1344     		add	r3, r3, r2
 1341 09c8 3B62     		str	r3, [r7, #32]
 520:main.c        **** 					
 521:main.c        **** 					psz = strtok(0, " ");
 1342              		.loc 1 521 0
 1343 09ca 2C49     		ldr	r1, .L126+36
 1344 09cc 0020     		movs	r0, #0
 1345 09ce FFF7FEFF 		bl	strtok
 1346 09d2 B861     		str	r0, [r7, #24]
 522:main.c        **** 					sscanf(psz,"%hu", &avar);
 1347              		.loc 1 522 0
 1348 09d4 BB1D     		adds	r3, r7, #6
 1349 09d6 1A46     		mov	r2, r3
 1350 09d8 2949     		ldr	r1, .L126+40
 1351 09da B869     		ldr	r0, [r7, #24]
 1352 09dc FFF7FEFF 		bl	sscanf
 523:main.c        **** 					phase_int += ((uint32) avar);
 1353              		.loc 1 523 0
 1354 09e0 FB88     		ldrh	r3, [r7, #6]
 1355 09e2 1A46     		mov	r2, r3
 1356 09e4 3B6A     		ldr	r3, [r7, #32]
 1357 09e6 1344     		add	r3, r3, r2
 1358 09e8 3B62     		str	r3, [r7, #32]
 524:main.c        **** 					
 525:main.c        **** 					freq = ((float) phase_int)*.09313225746;
 1359              		.loc 1 525 0
 1360 09ea 386A     		ldr	r0, [r7, #32]
 1361 09ec FFF7FEFF 		bl	__aeabi_ui2f
 1362 09f0 0346     		mov	r3, r0
 1363 09f2 1846     		mov	r0, r3
 1364 09f4 FFF7FEFF 		bl	__aeabi_f2d
 1365 09f8 19A3     		adr	r3, .L126+8
 1366 09fa D3E90023 		ldrd	r2, [r3]
 1367 09fe FFF7FEFF 		bl	__aeabi_dmul
 1368 0a02 0346     		mov	r3, r0
 1369 0a04 0C46     		mov	r4, r1
 1370 0a06 1846     		mov	r0, r3
 1371 0a08 2146     		mov	r1, r4
 1372 0a0a FFF7FEFF 		bl	__aeabi_d2f
 1373 0a0e 0346     		mov	r3, r0
 1374 0a10 FB60     		str	r3, [r7, #12]	@ float
 526:main.c        **** 					
 527:main.c        **** 					// calculate the clock divider
 528:main.c        **** 					phase_int = (int32) (36000000.0/((float) WAVEFORM_BUFFER_SIZE))/freq;
 1375              		.loc 1 528 0
 1376 0a12 F968     		ldr	r1, [r7, #12]	@ float
 1377 0a14 1B48     		ldr	r0, .L126+44
 1378 0a16 FFF7FEFF 		bl	__aeabi_fdiv
 1379 0a1a 0346     		mov	r3, r0
 1380 0a1c 1846     		mov	r0, r3
 1381 0a1e FFF7FEFF 		bl	__aeabi_f2uiz
 1382 0a22 0346     		mov	r3, r0
 1383 0a24 3B62     		str	r3, [r7, #32]
 529:main.c        **** 					
 530:main.c        **** 					if(phase_int >= 65535)
 1384              		.loc 1 530 0
 1385 0a26 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 35


 1386 0a28 4FF6FE72 		movw	r2, #65534
 1387 0a2c 9342     		cmp	r3, r2
 1388 0a2e 03D9     		bls	.L56
 531:main.c        **** 					{
 532:main.c        **** 						phase_int = 65535;
 1389              		.loc 1 532 0
 1390 0a30 4FF6FF73 		movw	r3, #65535
 1391 0a34 3B62     		str	r3, [r7, #32]
 1392 0a36 04E0     		b	.L57
 1393              	.L56:
 533:main.c        **** 					}
 534:main.c        **** 					else if(phase_int <= 15) // anything less than this and the DMA doesn't have time to execute
 1394              		.loc 1 534 0
 1395 0a38 3B6A     		ldr	r3, [r7, #32]
 1396 0a3a 0F2B     		cmp	r3, #15
 1397 0a3c 01D8     		bhi	.L57
 535:main.c        **** 					{
 536:main.c        **** 						phase_int = 15;
 1398              		.loc 1 536 0
 1399 0a3e 0F23     		movs	r3, #15
 1400 0a40 3B62     		str	r3, [r7, #32]
 1401              	.L57:
 537:main.c        **** 					}
 538:main.c        **** 					
 539:main.c        **** 					WaveB_Clock_SetDividerValue((uint16) phase_int);
 1402              		.loc 1 539 0
 1403 0a42 3B6A     		ldr	r3, [r7, #32]
 1404 0a44 9BB2     		uxth	r3, r3
 1405 0a46 013B     		subs	r3, r3, #1
 1406 0a48 9BB2     		uxth	r3, r3
 1407 0a4a 0121     		movs	r1, #1
 1408 0a4c 1846     		mov	r0, r3
 1409 0a4e FFF7FEFF 		bl	WaveB_Clock_SetDividerRegister
 1410 0a52 2CE3     		b	.L6
 1411              	.L127:
 1412 0a54 AFF30080 		.align	3
 1413              	.L126:
 1414 0a58 00000000 		.word	0
 1415 0a5c 00E06F40 		.word	1081073664
 1416 0a60 524CFEFF 		.word	-111534
 1417 0a64 83D7B73F 		.word	1069012867
 1418 0a68 00000000 		.word	WaveformB_Temp_Buffer
 1419 0a6c 00000000 		.word	waveb_gain
 1420 0a70 00000000 		.word	waveb_offset
 1421 0a74 00007F43 		.word	1132396544
 1422 0a78 00000000 		.word	WaveformB_Buffer
 1423 0a7c 00000000 		.word	.LC0
 1424 0a80 14000000 		.word	.LC2
 1425 0a84 00548946 		.word	1183405056
 1426              	.L55:
 540:main.c        ****                     // NoiseB_Clock_SetDividerValue((uint16) phase_int);
 541:main.c        **** 					
 542:main.c        **** 				}
 543:main.c        ****                 else if(*psz == 'X')
 1427              		.loc 1 543 0
 1428 0a88 BB69     		ldr	r3, [r7, #24]
 1429 0a8a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 36


 1430 0a8c 582B     		cmp	r3, #88
 1431 0a8e 40F00E83 		bne	.L6
 544:main.c        **** 				{
 545:main.c        **** 					// set the Aux DAC level
 546:main.c        **** 					// Data comes back as a single byte representing the value to write to the DAC
 547:main.c        **** 					// W X VAL
 548:main.c        ****                     // Grab the byte value from the USB and write it to the DAC
 549:main.c        **** 					psz = strtok(0, " ");
 1432              		.loc 1 549 0
 1433 0a92 BE49     		ldr	r1, .L128
 1434 0a94 0020     		movs	r0, #0
 1435 0a96 FFF7FEFF 		bl	strtok
 1436 0a9a B861     		str	r0, [r7, #24]
 550:main.c        **** 					sscanf(psz,"%hu", &avar);
 1437              		.loc 1 550 0
 1438 0a9c BB1D     		adds	r3, r7, #6
 1439 0a9e 1A46     		mov	r2, r3
 1440 0aa0 BB49     		ldr	r1, .L128+4
 1441 0aa2 B869     		ldr	r0, [r7, #24]
 1442 0aa4 FFF7FEFF 		bl	sscanf
 551:main.c        **** 					AuxDAC_1_SetValue((uint8) avar);
 1443              		.loc 1 551 0
 1444 0aa8 FB88     		ldrh	r3, [r7, #6]
 1445 0aaa DBB2     		uxtb	r3, r3
 1446 0aac 1846     		mov	r0, r3
 1447 0aae FFF7FEFF 		bl	AuxDAC_1_SetValue
 1448 0ab2 FCE2     		b	.L6
 1449              	.L14:
 552:main.c        **** 				}
 553:main.c        **** 			}
 554:main.c        **** 			else if(*psz == 'S')
 1450              		.loc 1 554 0
 1451 0ab4 BB69     		ldr	r3, [r7, #24]
 1452 0ab6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1453 0ab8 532B     		cmp	r3, #83
 1454 0aba 40F0F582 		bne	.L58
 555:main.c        **** 			{
 556:main.c        **** 				// scope commands
 557:main.c        **** 				
 558:main.c        **** 				psz = strtok(0, " ");
 1455              		.loc 1 558 0
 1456 0abe B349     		ldr	r1, .L128
 1457 0ac0 0020     		movs	r0, #0
 1458 0ac2 FFF7FEFF 		bl	strtok
 1459 0ac6 B861     		str	r0, [r7, #24]
 559:main.c        **** 				if(*psz == 'O')
 1460              		.loc 1 559 0
 1461 0ac8 BB69     		ldr	r3, [r7, #24]
 1462 0aca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1463 0acc 4F2B     		cmp	r3, #79
 1464 0ace 0FD1     		bne	.L59
 560:main.c        **** 				{
 561:main.c        **** 					// read offset from EEPROM command
 562:main.c        **** 					PutChar('O');
 1465              		.loc 1 562 0
 1466 0ad0 4F20     		movs	r0, #79
 1467 0ad2 FFF7FEFF 		bl	PutChar
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 37


 563:main.c        **** 					PutChar(128); // A
 1468              		.loc 1 563 0
 1469 0ad6 8020     		movs	r0, #128
 1470 0ad8 FFF7FEFF 		bl	PutChar
 564:main.c        **** 					PutChar(128); // a
 1471              		.loc 1 564 0
 1472 0adc 8020     		movs	r0, #128
 1473 0ade FFF7FEFF 		bl	PutChar
 565:main.c        **** 					PutChar(128); // B
 1474              		.loc 1 565 0
 1475 0ae2 8020     		movs	r0, #128
 1476 0ae4 FFF7FEFF 		bl	PutChar
 566:main.c        **** 					PutChar(128); // b
 1477              		.loc 1 566 0
 1478 0ae8 8020     		movs	r0, #128
 1479 0aea FFF7FEFF 		bl	PutChar
 1480 0aee DEE2     		b	.L6
 1481              	.L59:
 567:main.c        **** 					
 568:main.c        **** 				}
 569:main.c        **** 				else if(*psz == 'T')
 1482              		.loc 1 569 0
 1483 0af0 BB69     		ldr	r3, [r7, #24]
 1484 0af2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1485 0af4 542B     		cmp	r3, #84
 1486 0af6 10D1     		bne	.L61
 570:main.c        **** 				{
 571:main.c        **** 					// set the trigger level
 572:main.c        **** 					// Data comes back as a single byte representing the value to write to the DAC
 573:main.c        **** 					// S T VAL
 574:main.c        ****                     // Grab the trigger byte value from the USB and write it to the DAC
 575:main.c        **** 					psz = strtok(0, " ");
 1487              		.loc 1 575 0
 1488 0af8 A449     		ldr	r1, .L128
 1489 0afa 0020     		movs	r0, #0
 1490 0afc FFF7FEFF 		bl	strtok
 1491 0b00 B861     		str	r0, [r7, #24]
 576:main.c        **** 					sscanf(psz,"%hu", &avar);
 1492              		.loc 1 576 0
 1493 0b02 BB1D     		adds	r3, r7, #6
 1494 0b04 1A46     		mov	r2, r3
 1495 0b06 A249     		ldr	r1, .L128+4
 1496 0b08 B869     		ldr	r0, [r7, #24]
 1497 0b0a FFF7FEFF 		bl	sscanf
 577:main.c        **** 					Vtrigger_SetValue((uint8) avar);
 1498              		.loc 1 577 0
 1499 0b0e FB88     		ldrh	r3, [r7, #6]
 1500 0b10 DBB2     		uxtb	r3, r3
 1501 0b12 1846     		mov	r0, r3
 1502 0b14 FFF7FEFF 		bl	Vtrigger_SetValue
 1503 0b18 C9E2     		b	.L6
 1504              	.L61:
 578:main.c        **** 				}
 579:main.c        **** 				else if(*psz == 'C')
 1505              		.loc 1 579 0
 1506 0b1a BB69     		ldr	r3, [r7, #24]
 1507 0b1c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 38


 1508 0b1e 432B     		cmp	r3, #67
 1509 0b20 33D1     		bne	.L62
 580:main.c        **** 				{
 581:main.c        **** 					// Post trigger buffer size
 582:main.c        **** 					// data comes back as two ascii strings, each representing an 8 bit value
 583:main.c        **** 					// S C C_HIGH C_LOW where C_HIGH and C_LOW represent a 10 bit number
 584:main.c        **** 					psz = strtok(0, " ");
 1510              		.loc 1 584 0
 1511 0b22 9A49     		ldr	r1, .L128
 1512 0b24 0020     		movs	r0, #0
 1513 0b26 FFF7FEFF 		bl	strtok
 1514 0b2a B861     		str	r0, [r7, #24]
 585:main.c        **** 					sscanf(psz,"%hu", &avar);
 1515              		.loc 1 585 0
 1516 0b2c BB1D     		adds	r3, r7, #6
 1517 0b2e 1A46     		mov	r2, r3
 1518 0b30 9749     		ldr	r1, .L128+4
 1519 0b32 B869     		ldr	r0, [r7, #24]
 1520 0b34 FFF7FEFF 		bl	sscanf
 586:main.c        **** 					bvar = avar*256;
 1521              		.loc 1 586 0
 1522 0b38 FB88     		ldrh	r3, [r7, #6]
 1523 0b3a 1B02     		lsls	r3, r3, #8
 1524 0b3c FB84     		strh	r3, [r7, #38]	@ movhi
 587:main.c        **** 					
 588:main.c        **** 					psz = strtok(0, " ");
 1525              		.loc 1 588 0
 1526 0b3e 9349     		ldr	r1, .L128
 1527 0b40 0020     		movs	r0, #0
 1528 0b42 FFF7FEFF 		bl	strtok
 1529 0b46 B861     		str	r0, [r7, #24]
 589:main.c        **** 					sscanf(psz,"%hu", &avar);
 1530              		.loc 1 589 0
 1531 0b48 BB1D     		adds	r3, r7, #6
 1532 0b4a 1A46     		mov	r2, r3
 1533 0b4c 9049     		ldr	r1, .L128+4
 1534 0b4e B869     		ldr	r0, [r7, #24]
 1535 0b50 FFF7FEFF 		bl	sscanf
 590:main.c        **** 					bvar += avar;
 1536              		.loc 1 590 0
 1537 0b54 FA88     		ldrh	r2, [r7, #6]
 1538 0b56 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 1539 0b58 1344     		add	r3, r3, r2
 1540 0b5a FB84     		strh	r3, [r7, #38]	@ movhi
 591:main.c        **** 					
 592:main.c        **** 					if(bvar >= (BUFFER_SIZE-1))
 1541              		.loc 1 592 0
 1542 0b5c FB8C     		ldrh	r3, [r7, #38]
 1543 0b5e 40F2FE32 		movw	r2, #1022
 1544 0b62 9342     		cmp	r3, r2
 1545 0b64 03D9     		bls	.L63
 593:main.c        **** 					{
 594:main.c        **** 						bvar = (BUFFER_SIZE-1);  // maximum post trigger buffer size
 1546              		.loc 1 594 0
 1547 0b66 40F2FF33 		movw	r3, #1023
 1548 0b6a FB84     		strh	r3, [r7, #38]	@ movhi
 1549 0b6c 04E0     		b	.L64
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 39


 1550              	.L63:
 595:main.c        **** 					}
 596:main.c        **** 					else if(bvar <= 2)
 1551              		.loc 1 596 0
 1552 0b6e FB8C     		ldrh	r3, [r7, #38]
 1553 0b70 022B     		cmp	r3, #2
 1554 0b72 01D8     		bhi	.L64
 597:main.c        **** 					{
 598:main.c        **** 						bvar = 2; // minimum post trigger buffer size
 1555              		.loc 1 598 0
 1556 0b74 0223     		movs	r3, #2
 1557 0b76 FB84     		strh	r3, [r7, #38]	@ movhi
 1558              	.L64:
 599:main.c        **** 					}
 600:main.c        **** 					
 601:main.c        **** 					// update the period to match the trigger buffer size post trigger capture
 602:main.c        **** 					PWM_Sample_Buffer_WritePeriod(bvar); // post trigger buffer
 1559              		.loc 1 602 0
 1560 0b78 FB8C     		ldrh	r3, [r7, #38]
 1561 0b7a 1846     		mov	r0, r3
 1562 0b7c FFF7FEFF 		bl	PWM_Sample_Buffer_WritePeriod
 603:main.c        **** 					// after setting the period, need to set the count to the proper value as well
 604:main.c        **** 					PWM_Sample_Buffer_WriteCounter(bvar); // post trigger buffer					
 1563              		.loc 1 604 0
 1564 0b80 FB8C     		ldrh	r3, [r7, #38]
 1565 0b82 1846     		mov	r0, r3
 1566 0b84 FFF7FEFF 		bl	PWM_Sample_Buffer_WriteCounter
 1567 0b88 91E2     		b	.L6
 1568              	.L62:
 605:main.c        **** 				}
 606:main.c        **** 				else if(*psz == 'R')
 1569              		.loc 1 606 0
 1570 0b8a BB69     		ldr	r3, [r7, #24]
 1571 0b8c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1572 0b8e 522B     		cmp	r3, #82
 1573 0b90 40F00281 		bne	.L65
 607:main.c        **** 				{
 608:main.c        **** 					// Scope control register update
 609:main.c        **** 					// data comes back as an ascii number, representing an 8 bit value
 610:main.c        **** 					// bit 7: unused
 611:main.c        **** 					// bit 6: Internal (0, a or b as defined later) or External Trigger (1)
 612:main.c        **** 					// bit 5: trigger polarity, rising (0) or falling (1)
 613:main.c        **** 					// bit 4: trigger source, A (0) or B (1)
 614:main.c        **** 					// bits 3:0 -> sample rate 20 Msps / (2^thisval) this val can be 0 - 15
 615:main.c        **** 					psz = strtok(0, " ");
 1574              		.loc 1 615 0
 1575 0b94 7D49     		ldr	r1, .L128
 1576 0b96 0020     		movs	r0, #0
 1577 0b98 FFF7FEFF 		bl	strtok
 1578 0b9c B861     		str	r0, [r7, #24]
 616:main.c        **** 					sscanf(psz,"%hu", &avar);
 1579              		.loc 1 616 0
 1580 0b9e BB1D     		adds	r3, r7, #6
 1581 0ba0 1A46     		mov	r2, r3
 1582 0ba2 7B49     		ldr	r1, .L128+4
 1583 0ba4 B869     		ldr	r0, [r7, #24]
 1584 0ba6 FFF7FEFF 		bl	sscanf
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 40


 617:main.c        **** 					
 618:main.c        **** 					// internal versus external trigger
 619:main.c        **** 					// bit 6
 620:main.c        **** 					if((avar & 0x40) == 0)
 1585              		.loc 1 620 0
 1586 0baa FB88     		ldrh	r3, [r7, #6]
 1587 0bac 03F04003 		and	r3, r3, #64
 1588 0bb0 002B     		cmp	r3, #0
 1589 0bb2 2AD1     		bne	.L66
 621:main.c        **** 					{
 622:main.c        **** 						// internal trigger
 623:main.c        **** 						// trigger polarity
 624:main.c        **** 						// bit 5
 625:main.c        **** 						if((avar & 0x20) == 0)
 1590              		.loc 1 625 0
 1591 0bb4 FB88     		ldrh	r3, [r7, #6]
 1592 0bb6 03F02003 		and	r3, r3, #32
 1593 0bba 002B     		cmp	r3, #0
 1594 0bbc 12D1     		bne	.L67
 626:main.c        **** 						{
 627:main.c        **** 							// rising edge
 628:main.c        **** 							Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1595              		.loc 1 628 0
 1596 0bbe FFF7FEFF 		bl	Trigger_Control_Read
 1597 0bc2 0346     		mov	r3, r0
 1598 0bc4 23F00F03 		bic	r3, r3, #15
 1599 0bc8 DBB2     		uxtb	r3, r3
 1600 0bca 1846     		mov	r0, r3
 1601 0bcc FFF7FEFF 		bl	Trigger_Control_Write
 629:main.c        ****     						Trigger_Control_Write(Trigger_Control_Read() | RISING_EDGE_TRIGGERED);
 1602              		.loc 1 629 0
 1603 0bd0 FFF7FEFF 		bl	Trigger_Control_Read
 1604 0bd4 0346     		mov	r3, r0
 1605 0bd6 43F00203 		orr	r3, r3, #2
 1606 0bda DBB2     		uxtb	r3, r3
 1607 0bdc 1846     		mov	r0, r3
 1608 0bde FFF7FEFF 		bl	Trigger_Control_Write
 1609 0be2 24E0     		b	.L69
 1610              	.L67:
 630:main.c        **** 						}
 631:main.c        **** 						else
 632:main.c        **** 						{
 633:main.c        **** 							// falling edge
 634:main.c        **** 							Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1611              		.loc 1 634 0
 1612 0be4 FFF7FEFF 		bl	Trigger_Control_Read
 1613 0be8 0346     		mov	r3, r0
 1614 0bea 23F00F03 		bic	r3, r3, #15
 1615 0bee DBB2     		uxtb	r3, r3
 1616 0bf0 1846     		mov	r0, r3
 1617 0bf2 FFF7FEFF 		bl	Trigger_Control_Write
 635:main.c        ****     						Trigger_Control_Write(Trigger_Control_Read() | FALLING_EDGE_TRIGGERED);
 1618              		.loc 1 635 0
 1619 0bf6 FFF7FEFF 		bl	Trigger_Control_Read
 1620 0bfa 0346     		mov	r3, r0
 1621 0bfc 43F00103 		orr	r3, r3, #1
 1622 0c00 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 41


 1623 0c02 1846     		mov	r0, r3
 1624 0c04 FFF7FEFF 		bl	Trigger_Control_Write
 1625 0c08 11E0     		b	.L69
 1626              	.L66:
 636:main.c        **** 						}
 637:main.c        **** 					}
 638:main.c        **** 					else
 639:main.c        **** 					{
 640:main.c        **** 						// external trigger
 641:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1627              		.loc 1 641 0
 1628 0c0a FFF7FEFF 		bl	Trigger_Control_Read
 1629 0c0e 0346     		mov	r3, r0
 1630 0c10 23F00F03 		bic	r3, r3, #15
 1631 0c14 DBB2     		uxtb	r3, r3
 1632 0c16 1846     		mov	r0, r3
 1633 0c18 FFF7FEFF 		bl	Trigger_Control_Write
 642:main.c        ****     					Trigger_Control_Write(Trigger_Control_Read() | EXTERNAL_TRIGGERED);
 1634              		.loc 1 642 0
 1635 0c1c FFF7FEFF 		bl	Trigger_Control_Read
 1636 0c20 0346     		mov	r3, r0
 1637 0c22 43F00803 		orr	r3, r3, #8
 1638 0c26 DBB2     		uxtb	r3, r3
 1639 0c28 1846     		mov	r0, r3
 1640 0c2a FFF7FEFF 		bl	Trigger_Control_Write
 1641              	.L69:
 643:main.c        **** 					}
 644:main.c        **** 					// bit 4
 645:main.c        **** 					// trigger source select
 646:main.c        **** 					if((avar & 0x10) == 0)
 1642              		.loc 1 646 0
 1643 0c2e FB88     		ldrh	r3, [r7, #6]
 1644 0c30 03F01003 		and	r3, r3, #16
 1645 0c34 002B     		cmp	r3, #0
 1646 0c36 06D1     		bne	.L70
 647:main.c        **** 					{
 648:main.c        **** 						// channel 1 / A
 649:main.c        **** 						trigger_source = SCOPE_CHANNEL_1;
 1647              		.loc 1 649 0
 1648 0c38 564B     		ldr	r3, .L128+8
 1649 0c3a 0022     		movs	r2, #0
 1650 0c3c 1A70     		strb	r2, [r3]
 650:main.c        **** 						Amux_Trigger_Select(SCOPE_CHANNEL_1);
 1651              		.loc 1 650 0
 1652 0c3e 0020     		movs	r0, #0
 1653 0c40 FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1654 0c44 05E0     		b	.L71
 1655              	.L70:
 651:main.c        **** 					}
 652:main.c        **** 					else
 653:main.c        **** 					{
 654:main.c        **** 					    // channel 2 / B
 655:main.c        **** 						trigger_source = SCOPE_CHANNEL_2;
 1656              		.loc 1 655 0
 1657 0c46 534B     		ldr	r3, .L128+8
 1658 0c48 0122     		movs	r2, #1
 1659 0c4a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 42


 656:main.c        **** 						Amux_Trigger_Select(SCOPE_CHANNEL_2);
 1660              		.loc 1 656 0
 1661 0c4c 0120     		movs	r0, #1
 1662 0c4e FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1663              	.L71:
 657:main.c        **** 					}   
 658:main.c        ****                     if((avar & 0x80) != 0)
 1664              		.loc 1 658 0
 1665 0c52 FB88     		ldrh	r3, [r7, #6]
 1666 0c54 03F08003 		and	r3, r3, #128
 1667 0c58 002B     		cmp	r3, #0
 1668 0c5a 05D0     		beq	.L72
 659:main.c        ****                     {
 660:main.c        ****                         // select external trigger input pin
 661:main.c        ****                         trigger_source = EXT_TRIGGER;
 1669              		.loc 1 661 0
 1670 0c5c 4D4B     		ldr	r3, .L128+8
 1671 0c5e 0222     		movs	r2, #2
 1672 0c60 1A70     		strb	r2, [r3]
 662:main.c        **** 						Amux_Trigger_Select(EXT_TRIGGER);
 1673              		.loc 1 662 0
 1674 0c62 0220     		movs	r0, #2
 1675 0c64 FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1676              	.L72:
 663:main.c        ****                     }
 664:main.c        **** 					// sample rate
 665:main.c        **** 					// bit 3:0
 666:main.c        **** 					if((avar & 0x0f) <= 0) // 818.2 Ksps "maximum" sample rate
 1677              		.loc 1 666 0
 1678 0c68 FB88     		ldrh	r3, [r7, #6]
 1679 0c6a 03F00F03 		and	r3, r3, #15
 1680 0c6e 002B     		cmp	r3, #0
 1681 0c70 04DC     		bgt	.L73
 667:main.c        **** 					{
 668:main.c        ****                         // 36 Mhz master clock divided by this number and then divided by 
 669:main.c        ****                         // 18 due to the freq divider set the ADC sample rate.
 670:main.c        **** 						SampleClock_SetDividerValue(1); 
 1682              		.loc 1 670 0
 1683 0c72 0121     		movs	r1, #1
 1684 0c74 0020     		movs	r0, #0
 1685 0c76 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1686 0c7a 18E2     		b	.L6
 1687              	.L73:
 671:main.c        **** 					}
 672:main.c        **** 					else if((avar & 0x0f) == 1) // 409.1 ksps
 1688              		.loc 1 672 0
 1689 0c7c FB88     		ldrh	r3, [r7, #6]
 1690 0c7e 03F00F03 		and	r3, r3, #15
 1691 0c82 012B     		cmp	r3, #1
 1692 0c84 04D1     		bne	.L75
 673:main.c        **** 					{
 674:main.c        **** 						SampleClock_SetDividerValue(2);
 1693              		.loc 1 674 0
 1694 0c86 0121     		movs	r1, #1
 1695 0c88 0120     		movs	r0, #1
 1696 0c8a FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1697 0c8e 0EE2     		b	.L6
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 43


 1698              	.L75:
 675:main.c        **** 					}
 676:main.c        **** 					else if((avar & 0x0f) == 2) // 204.5 ksps
 1699              		.loc 1 676 0
 1700 0c90 FB88     		ldrh	r3, [r7, #6]
 1701 0c92 03F00F03 		and	r3, r3, #15
 1702 0c96 022B     		cmp	r3, #2
 1703 0c98 04D1     		bne	.L76
 677:main.c        **** 					{
 678:main.c        **** 						SampleClock_SetDividerValue(4);
 1704              		.loc 1 678 0
 1705 0c9a 0121     		movs	r1, #1
 1706 0c9c 0320     		movs	r0, #3
 1707 0c9e FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1708 0ca2 04E2     		b	.L6
 1709              	.L76:
 679:main.c        **** 					}
 680:main.c        **** 					else if((avar & 0x0f) == 3) // 102.3 ksps
 1710              		.loc 1 680 0
 1711 0ca4 FB88     		ldrh	r3, [r7, #6]
 1712 0ca6 03F00F03 		and	r3, r3, #15
 1713 0caa 032B     		cmp	r3, #3
 1714 0cac 04D1     		bne	.L77
 681:main.c        **** 					{
 682:main.c        **** 						SampleClock_SetDividerValue(8);
 1715              		.loc 1 682 0
 1716 0cae 0121     		movs	r1, #1
 1717 0cb0 0720     		movs	r0, #7
 1718 0cb2 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1719 0cb6 FAE1     		b	.L6
 1720              	.L77:
 683:main.c        **** 					}
 684:main.c        **** 					else if((avar & 0x0f) == 4) // 51.1 ksps
 1721              		.loc 1 684 0
 1722 0cb8 FB88     		ldrh	r3, [r7, #6]
 1723 0cba 03F00F03 		and	r3, r3, #15
 1724 0cbe 042B     		cmp	r3, #4
 1725 0cc0 04D1     		bne	.L78
 685:main.c        **** 					{ 
 686:main.c        **** 						SampleClock_SetDividerValue(16);
 1726              		.loc 1 686 0
 1727 0cc2 0121     		movs	r1, #1
 1728 0cc4 0F20     		movs	r0, #15
 1729 0cc6 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1730 0cca F0E1     		b	.L6
 1731              	.L78:
 687:main.c        **** 					}
 688:main.c        **** 					else if((avar & 0x0f) == 5) // 25.6 ksps
 1732              		.loc 1 688 0
 1733 0ccc FB88     		ldrh	r3, [r7, #6]
 1734 0cce 03F00F03 		and	r3, r3, #15
 1735 0cd2 052B     		cmp	r3, #5
 1736 0cd4 04D1     		bne	.L79
 689:main.c        **** 					{
 690:main.c        **** 						SampleClock_SetDividerValue(32);
 1737              		.loc 1 690 0
 1738 0cd6 0121     		movs	r1, #1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 44


 1739 0cd8 1F20     		movs	r0, #31
 1740 0cda FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1741 0cde E6E1     		b	.L6
 1742              	.L79:
 691:main.c        **** 					}
 692:main.c        **** 					else if((avar & 0x0f) == 6) // 12.8 ksps
 1743              		.loc 1 692 0
 1744 0ce0 FB88     		ldrh	r3, [r7, #6]
 1745 0ce2 03F00F03 		and	r3, r3, #15
 1746 0ce6 062B     		cmp	r3, #6
 1747 0ce8 04D1     		bne	.L80
 693:main.c        **** 					{
 694:main.c        **** 						SampleClock_SetDividerValue(64);
 1748              		.loc 1 694 0
 1749 0cea 0121     		movs	r1, #1
 1750 0cec 3F20     		movs	r0, #63
 1751 0cee FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1752 0cf2 DCE1     		b	.L6
 1753              	.L80:
 695:main.c        **** 					}
 696:main.c        **** 					else if((avar & 0x0f) == 7) // 6.4 ksps
 1754              		.loc 1 696 0
 1755 0cf4 FB88     		ldrh	r3, [r7, #6]
 1756 0cf6 03F00F03 		and	r3, r3, #15
 1757 0cfa 072B     		cmp	r3, #7
 1758 0cfc 04D1     		bne	.L81
 697:main.c        **** 					{ 
 698:main.c        **** 						SampleClock_SetDividerValue(128);
 1759              		.loc 1 698 0
 1760 0cfe 0121     		movs	r1, #1
 1761 0d00 7F20     		movs	r0, #127
 1762 0d02 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1763 0d06 D2E1     		b	.L6
 1764              	.L81:
 699:main.c        **** 					}
 700:main.c        **** 					else if((avar & 0x0f) == 8) // 3.2 ksps
 1765              		.loc 1 700 0
 1766 0d08 FB88     		ldrh	r3, [r7, #6]
 1767 0d0a 03F00F03 		and	r3, r3, #15
 1768 0d0e 082B     		cmp	r3, #8
 1769 0d10 04D1     		bne	.L82
 701:main.c        **** 					{
 702:main.c        **** 						SampleClock_SetDividerValue(256);
 1770              		.loc 1 702 0
 1771 0d12 0121     		movs	r1, #1
 1772 0d14 FF20     		movs	r0, #255
 1773 0d16 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1774 0d1a C8E1     		b	.L6
 1775              	.L82:
 703:main.c        **** 					}
 704:main.c        **** 					else if((avar & 0x0f) == 9) // 1.6 ksps
 1776              		.loc 1 704 0
 1777 0d1c FB88     		ldrh	r3, [r7, #6]
 1778 0d1e 03F00F03 		and	r3, r3, #15
 1779 0d22 092B     		cmp	r3, #9
 1780 0d24 05D1     		bne	.L83
 705:main.c        **** 					{
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 45


 706:main.c        **** 						SampleClock_SetDividerValue(512);
 1781              		.loc 1 706 0
 1782 0d26 0121     		movs	r1, #1
 1783 0d28 40F2FF10 		movw	r0, #511
 1784 0d2c FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1785 0d30 BDE1     		b	.L6
 1786              	.L83:
 707:main.c        **** 					}
 708:main.c        **** 					else if((avar & 0x0f) == 10) // 799 sps 
 1787              		.loc 1 708 0
 1788 0d32 FB88     		ldrh	r3, [r7, #6]
 1789 0d34 03F00F03 		and	r3, r3, #15
 1790 0d38 0A2B     		cmp	r3, #10
 1791 0d3a 05D1     		bne	.L84
 709:main.c        **** 					{ 
 710:main.c        **** 						SampleClock_SetDividerValue(1024);
 1792              		.loc 1 710 0
 1793 0d3c 0121     		movs	r1, #1
 1794 0d3e 40F2FF30 		movw	r0, #1023
 1795 0d42 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1796 0d46 B2E1     		b	.L6
 1797              	.L84:
 711:main.c        **** 					}
 712:main.c        **** 					else if((avar & 0x0f) == 11) // 400 sps
 1798              		.loc 1 712 0
 1799 0d48 FB88     		ldrh	r3, [r7, #6]
 1800 0d4a 03F00F03 		and	r3, r3, #15
 1801 0d4e 0B2B     		cmp	r3, #11
 1802 0d50 05D1     		bne	.L85
 713:main.c        **** 					{ 
 714:main.c        **** 						SampleClock_SetDividerValue(2048);
 1803              		.loc 1 714 0
 1804 0d52 0121     		movs	r1, #1
 1805 0d54 40F2FF70 		movw	r0, #2047
 1806 0d58 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1807 0d5c A7E1     		b	.L6
 1808              	.L85:
 715:main.c        **** 					}                    
 716:main.c        **** 					else if((avar & 0x0f) == 12) // 200 sps
 1809              		.loc 1 716 0
 1810 0d5e FB88     		ldrh	r3, [r7, #6]
 1811 0d60 03F00F03 		and	r3, r3, #15
 1812 0d64 0C2B     		cmp	r3, #12
 1813 0d66 05D1     		bne	.L86
 717:main.c        **** 					{ 
 718:main.c        **** 						SampleClock_SetDividerValue(4096);
 1814              		.loc 1 718 0
 1815 0d68 0121     		movs	r1, #1
 1816 0d6a 40F6FF70 		movw	r0, #4095
 1817 0d6e FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1818 0d72 9CE1     		b	.L6
 1819              	.L86:
 719:main.c        **** 					}
 720:main.c        **** 					else if((avar & 0x0f) >= 13) // 100 sps
 1820              		.loc 1 720 0
 1821 0d74 FB88     		ldrh	r3, [r7, #6]
 1822 0d76 03F00F03 		and	r3, r3, #15
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 46


 1823 0d7a 0C2B     		cmp	r3, #12
 1824 0d7c 40F39781 		ble	.L6
 721:main.c        **** 					{ 
 722:main.c        **** 						SampleClock_SetDividerValue(8192);
 1825              		.loc 1 722 0
 1826 0d80 0121     		movs	r1, #1
 1827 0d82 41F6FF70 		movw	r0, #8191
 1828 0d86 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1829 0d8a 90E1     		b	.L6
 1830              	.L129:
 1831              		.align	2
 1832              	.L128:
 1833 0d8c 00000000 		.word	.LC0
 1834 0d90 14000000 		.word	.LC2
 1835 0d94 00000000 		.word	trigger_source
 1836              	.L65:
 723:main.c        **** 					}
 724:main.c        ****                 }
 725:main.c        **** 				else if(*psz == 'D')
 1837              		.loc 1 725 0
 1838 0d98 BB69     		ldr	r3, [r7, #24]
 1839 0d9a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1840 0d9c 442B     		cmp	r3, #68
 1841 0d9e 59D1     		bne	.L87
 726:main.c        **** 				{
 727:main.c        **** 					// Scope debug hardware command
 728:main.c        **** 					// data comes back as an ascii number, representing a single value
 729:main.c        **** 					// 0 set reset to 0
 730:main.c        **** 					// 1 set reset to 1
 731:main.c        **** 					// 2 set REQ = 0
 732:main.c        **** 					// 3 set REQ = 1
 733:main.c        **** 					// 4 set MAN_TRIG = 1
 734:main.c        **** 					// 5 set MAN_TRIG = 0
 735:main.c        **** 					psz = strtok(0, " ");
 1842              		.loc 1 735 0
 1843 0da0 B549     		ldr	r1, .L130+8
 1844 0da2 0020     		movs	r0, #0
 1845 0da4 FFF7FEFF 		bl	strtok
 1846 0da8 B861     		str	r0, [r7, #24]
 736:main.c        **** 					sscanf(psz,"%hu", &avar);
 1847              		.loc 1 736 0
 1848 0daa BB1D     		adds	r3, r7, #6
 1849 0dac 1A46     		mov	r2, r3
 1850 0dae B349     		ldr	r1, .L130+12
 1851 0db0 B869     		ldr	r0, [r7, #24]
 1852 0db2 FFF7FEFF 		bl	sscanf
 737:main.c        **** 					
 738:main.c        **** 					if(avar == 0) // reset PWM = 0
 1853              		.loc 1 738 0
 1854 0db6 FB88     		ldrh	r3, [r7, #6]
 1855 0db8 002B     		cmp	r3, #0
 1856 0dba 09D1     		bne	.L88
 739:main.c        **** 					{
 740:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~RESET_PWM);
 1857              		.loc 1 740 0
 1858 0dbc FFF7FEFF 		bl	Trigger_Control_Read
 1859 0dc0 0346     		mov	r3, r0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 47


 1860 0dc2 03F07F03 		and	r3, r3, #127
 1861 0dc6 DBB2     		uxtb	r3, r3
 1862 0dc8 1846     		mov	r0, r3
 1863 0dca FFF7FEFF 		bl	Trigger_Control_Write
 1864 0dce 6EE1     		b	.L6
 1865              	.L88:
 741:main.c        **** 					}
 742:main.c        **** 					else if(avar == 1) // reset PWM = 1
 1866              		.loc 1 742 0
 1867 0dd0 FB88     		ldrh	r3, [r7, #6]
 1868 0dd2 012B     		cmp	r3, #1
 1869 0dd4 09D1     		bne	.L90
 743:main.c        **** 					{
 744:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | RESET_PWM);
 1870              		.loc 1 744 0
 1871 0dd6 FFF7FEFF 		bl	Trigger_Control_Read
 1872 0dda 0346     		mov	r3, r0
 1873 0ddc 63F07F03 		orn	r3, r3, #127
 1874 0de0 DBB2     		uxtb	r3, r3
 1875 0de2 1846     		mov	r0, r3
 1876 0de4 FFF7FEFF 		bl	Trigger_Control_Write
 1877 0de8 61E1     		b	.L6
 1878              	.L90:
 745:main.c        **** 					}
 746:main.c        **** 					else if(avar == 2) // set REQ = 0
 1879              		.loc 1 746 0
 1880 0dea FB88     		ldrh	r3, [r7, #6]
 1881 0dec 022B     		cmp	r3, #2
 1882 0dee 09D1     		bne	.L91
 747:main.c        **** 					{
 748:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 1883              		.loc 1 748 0
 1884 0df0 FFF7FEFF 		bl	Trigger_Control_Read
 1885 0df4 0346     		mov	r3, r0
 1886 0df6 23F04003 		bic	r3, r3, #64
 1887 0dfa DBB2     		uxtb	r3, r3
 1888 0dfc 1846     		mov	r0, r3
 1889 0dfe FFF7FEFF 		bl	Trigger_Control_Write
 1890 0e02 54E1     		b	.L6
 1891              	.L91:
 749:main.c        **** 					}
 750:main.c        **** 					else if(avar == 3) // set REQ = 1
 1892              		.loc 1 750 0
 1893 0e04 FB88     		ldrh	r3, [r7, #6]
 1894 0e06 032B     		cmp	r3, #3
 1895 0e08 09D1     		bne	.L92
 751:main.c        **** 					{
 752:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 1896              		.loc 1 752 0
 1897 0e0a FFF7FEFF 		bl	Trigger_Control_Read
 1898 0e0e 0346     		mov	r3, r0
 1899 0e10 43F04003 		orr	r3, r3, #64
 1900 0e14 DBB2     		uxtb	r3, r3
 1901 0e16 1846     		mov	r0, r3
 1902 0e18 FFF7FEFF 		bl	Trigger_Control_Write
 1903 0e1c 47E1     		b	.L6
 1904              	.L92:
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 48


 753:main.c        **** 					}
 754:main.c        **** 					else if(avar == 4) // manual trigger = 0
 1905              		.loc 1 754 0
 1906 0e1e FB88     		ldrh	r3, [r7, #6]
 1907 0e20 042B     		cmp	r3, #4
 1908 0e22 09D1     		bne	.L93
 755:main.c        **** 					{
 756:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~MANUAL_TRIGGER);
 1909              		.loc 1 756 0
 1910 0e24 FFF7FEFF 		bl	Trigger_Control_Read
 1911 0e28 0346     		mov	r3, r0
 1912 0e2a 23F01003 		bic	r3, r3, #16
 1913 0e2e DBB2     		uxtb	r3, r3
 1914 0e30 1846     		mov	r0, r3
 1915 0e32 FFF7FEFF 		bl	Trigger_Control_Write
 1916 0e36 3AE1     		b	.L6
 1917              	.L93:
 757:main.c        **** 					}
 758:main.c        **** 					else if(avar == 5) // manual trigger = 1
 1918              		.loc 1 758 0
 1919 0e38 FB88     		ldrh	r3, [r7, #6]
 1920 0e3a 052B     		cmp	r3, #5
 1921 0e3c 40F03781 		bne	.L6
 759:main.c        **** 					{
 760:main.c        **** 						//Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 761:main.c        **** 						//Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 762:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | MANUAL_TRIGGER);
 1922              		.loc 1 762 0
 1923 0e40 FFF7FEFF 		bl	Trigger_Control_Read
 1924 0e44 0346     		mov	r3, r0
 1925 0e46 43F01003 		orr	r3, r3, #16
 1926 0e4a DBB2     		uxtb	r3, r3
 1927 0e4c 1846     		mov	r0, r3
 1928 0e4e FFF7FEFF 		bl	Trigger_Control_Write
 1929 0e52 2CE1     		b	.L6
 1930              	.L87:
 763:main.c        **** 					}
 764:main.c        **** 					
 765:main.c        **** 				}
 766:main.c        **** 				else if(*psz == 'G')
 1931              		.loc 1 766 0
 1932 0e54 BB69     		ldr	r3, [r7, #24]
 1933 0e56 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1934 0e58 472B     		cmp	r3, #71
 1935 0e5a 12D1     		bne	.L94
 767:main.c        **** 				{
 768:main.c        **** 					// Scope GO, arms the scope and waits for a trigger event
 769:main.c        **** 					// if a trigger occurs, sends back the character 'A' followed
 770:main.c        **** 					// by a 2nd and 3rd byte in binary format indicating the address
 771:main.c        **** 					// where the capture ended in the buffer (10 bits).  I'm assuming Aa format
 772:main.c        **** 					
 773:main.c        **** 					// arm the scope
 774:main.c        **** 					Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 1936              		.loc 1 774 0
 1937 0e5c FFF7FEFF 		bl	Trigger_Control_Read
 1938 0e60 0346     		mov	r3, r0
 1939 0e62 43F04003 		orr	r3, r3, #64
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 49


 1940 0e66 DBB2     		uxtb	r3, r3
 1941 0e68 1846     		mov	r0, r3
 1942 0e6a FFF7FEFF 		bl	Trigger_Control_Write
 775:main.c        **** 					Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 1943              		.loc 1 775 0
 1944 0e6e FFF7FEFF 		bl	Trigger_Control_Read
 1945 0e72 0346     		mov	r3, r0
 1946 0e74 23F04003 		bic	r3, r3, #64
 1947 0e78 DBB2     		uxtb	r3, r3
 1948 0e7a 1846     		mov	r0, r3
 1949 0e7c FFF7FEFF 		bl	Trigger_Control_Write
 1950 0e80 15E1     		b	.L6
 1951              	.L94:
 776:main.c        **** 					
 777:main.c        **** 				}
 778:main.c        **** 				else if(*psz == 'B')
 1952              		.loc 1 778 0
 1953 0e82 BB69     		ldr	r3, [r7, #24]
 1954 0e84 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1955 0e86 422B     		cmp	r3, #66
 1956 0e88 40F08480 		bne	.L95
 779:main.c        **** 				{
 780:main.c        **** 					// dump the scope buffer
 781:main.c        **** 					PutChar('D');
 1957              		.loc 1 781 0
 1958 0e8c 4420     		movs	r0, #68
 1959 0e8e FFF7FEFF 		bl	PutChar
 782:main.c        **** 					
 783:main.c        **** 					for(i = 0; i < BUFFER_SIZE; i++)
 1960              		.loc 1 783 0
 1961 0e92 0023     		movs	r3, #0
 1962 0e94 BB84     		strh	r3, [r7, #36]	@ movhi
 1963 0e96 78E0     		b	.L96
 1964              	.L102:
 784:main.c        **** 					{
 785:main.c        **** 						// truncate to 12 bits
 786:main.c        **** 						avar = (uint16) Channel_1_Data[i]/1.005;
 1965              		.loc 1 786 0
 1966 0e98 BB8C     		ldrh	r3, [r7, #36]
 1967 0e9a 794A     		ldr	r2, .L130+16
 1968 0e9c 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1969 0ea0 1846     		mov	r0, r3
 1970 0ea2 FFF7FEFF 		bl	__aeabi_i2d
 1971 0ea6 72A3     		adr	r3, .L130
 1972 0ea8 D3E90023 		ldrd	r2, [r3]
 1973 0eac FFF7FEFF 		bl	__aeabi_ddiv
 1974 0eb0 0346     		mov	r3, r0
 1975 0eb2 0C46     		mov	r4, r1
 1976 0eb4 1846     		mov	r0, r3
 1977 0eb6 2146     		mov	r1, r4
 1978 0eb8 FFF7FEFF 		bl	__aeabi_d2uiz
 1979 0ebc 0346     		mov	r3, r0
 1980 0ebe 9BB2     		uxth	r3, r3
 1981 0ec0 FB80     		strh	r3, [r7, #6]	@ movhi
 787:main.c        **** 						bvar = (uint16) Channel_2_Data[i]/1.005;
 1982              		.loc 1 787 0
 1983 0ec2 BB8C     		ldrh	r3, [r7, #36]
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 50


 1984 0ec4 6F4A     		ldr	r2, .L130+20
 1985 0ec6 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1986 0eca 1846     		mov	r0, r3
 1987 0ecc FFF7FEFF 		bl	__aeabi_i2d
 1988 0ed0 67A3     		adr	r3, .L130
 1989 0ed2 D3E90023 		ldrd	r2, [r3]
 1990 0ed6 FFF7FEFF 		bl	__aeabi_ddiv
 1991 0eda 0346     		mov	r3, r0
 1992 0edc 0C46     		mov	r4, r1
 1993 0ede 1846     		mov	r0, r3
 1994 0ee0 2146     		mov	r1, r4
 1995 0ee2 FFF7FEFF 		bl	__aeabi_d2uiz
 1996 0ee6 0346     		mov	r3, r0
 1997 0ee8 FB84     		strh	r3, [r7, #38]	@ movhi
 788:main.c        **** 						
 789:main.c        **** 						// send the data out to the terminal
 790:main.c        **** 						USB_Out_Buffer[(i*4+0) % USBUART_BUFFER_SIZE] = (uint8) (avar >> 8); // address of the end, M
 1998              		.loc 1 790 0
 1999 0eea BB8C     		ldrh	r3, [r7, #36]
 2000 0eec 9B00     		lsls	r3, r3, #2
 2001 0eee 03F03C03 		and	r3, r3, #60
 2002 0ef2 FA88     		ldrh	r2, [r7, #6]
 2003 0ef4 120A     		lsrs	r2, r2, #8
 2004 0ef6 92B2     		uxth	r2, r2
 2005 0ef8 D1B2     		uxtb	r1, r2
 2006 0efa 634A     		ldr	r2, .L130+24
 2007 0efc D154     		strb	r1, [r2, r3]
 791:main.c        **** 						USB_Out_Buffer[(i*4+1) % USBUART_BUFFER_SIZE] = (uint8) (avar & 0x00FF); // address of the en
 2008              		.loc 1 791 0
 2009 0efe BB8C     		ldrh	r3, [r7, #36]
 2010 0f00 9B00     		lsls	r3, r3, #2
 2011 0f02 5A1C     		adds	r2, r3, #1
 2012 0f04 614B     		ldr	r3, .L130+28
 2013 0f06 1340     		ands	r3, r3, r2
 2014 0f08 002B     		cmp	r3, #0
 2015 0f0a 03DA     		bge	.L97
 2016 0f0c 013B     		subs	r3, r3, #1
 2017 0f0e 63F03F03 		orn	r3, r3, #63
 2018 0f12 0133     		adds	r3, r3, #1
 2019              	.L97:
 2020 0f14 1A46     		mov	r2, r3
 2021 0f16 FB88     		ldrh	r3, [r7, #6]
 2022 0f18 D9B2     		uxtb	r1, r3
 2023 0f1a 5B4B     		ldr	r3, .L130+24
 2024 0f1c 9954     		strb	r1, [r3, r2]
 792:main.c        **** 						USB_Out_Buffer[(i*4+2) % USBUART_BUFFER_SIZE] = (uint8) (bvar >> 8); // address of the end, M
 2025              		.loc 1 792 0
 2026 0f1e BB8C     		ldrh	r3, [r7, #36]
 2027 0f20 9B00     		lsls	r3, r3, #2
 2028 0f22 9A1C     		adds	r2, r3, #2
 2029 0f24 594B     		ldr	r3, .L130+28
 2030 0f26 1340     		ands	r3, r3, r2
 2031 0f28 002B     		cmp	r3, #0
 2032 0f2a 03DA     		bge	.L98
 2033 0f2c 013B     		subs	r3, r3, #1
 2034 0f2e 63F03F03 		orn	r3, r3, #63
 2035 0f32 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 51


 2036              	.L98:
 2037 0f34 1A46     		mov	r2, r3
 2038 0f36 FB8C     		ldrh	r3, [r7, #38]
 2039 0f38 1B0A     		lsrs	r3, r3, #8
 2040 0f3a 9BB2     		uxth	r3, r3
 2041 0f3c D9B2     		uxtb	r1, r3
 2042 0f3e 524B     		ldr	r3, .L130+24
 2043 0f40 9954     		strb	r1, [r3, r2]
 793:main.c        **** 						USB_Out_Buffer[(i*4+3) % USBUART_BUFFER_SIZE] = (uint8) (bvar & 0x00FF); // address of the en
 2044              		.loc 1 793 0
 2045 0f42 BB8C     		ldrh	r3, [r7, #36]
 2046 0f44 9B00     		lsls	r3, r3, #2
 2047 0f46 DA1C     		adds	r2, r3, #3
 2048 0f48 504B     		ldr	r3, .L130+28
 2049 0f4a 1340     		ands	r3, r3, r2
 2050 0f4c 002B     		cmp	r3, #0
 2051 0f4e 03DA     		bge	.L99
 2052 0f50 013B     		subs	r3, r3, #1
 2053 0f52 63F03F03 		orn	r3, r3, #63
 2054 0f56 0133     		adds	r3, r3, #1
 2055              	.L99:
 2056 0f58 1A46     		mov	r2, r3
 2057 0f5a FB8C     		ldrh	r3, [r7, #38]	@ movhi
 2058 0f5c D9B2     		uxtb	r1, r3
 2059 0f5e 4A4B     		ldr	r3, .L130+24
 2060 0f60 9954     		strb	r1, [r3, r2]
 794:main.c        **** 						
 795:main.c        **** 						// our buffer has been filled up, dump the data out the serial port
 796:main.c        **** 						if(((i*4+4) % USBUART_BUFFER_SIZE) == 0)
 2061              		.loc 1 796 0
 2062 0f62 BB8C     		ldrh	r3, [r7, #36]
 2063 0f64 0133     		adds	r3, r3, #1
 2064 0f66 9B00     		lsls	r3, r3, #2
 2065 0f68 03F03C03 		and	r3, r3, #60
 2066 0f6c 002B     		cmp	r3, #0
 2067 0f6e 09D1     		bne	.L100
 797:main.c        **** 						{
 798:main.c        **** 							while(USBUART_CDCIsReady() == 0){};
 2068              		.loc 1 798 0
 2069 0f70 00BF     		nop
 2070              	.L101:
 2071              		.loc 1 798 0 is_stmt 0 discriminator 1
 2072 0f72 FFF7FEFF 		bl	USBUART_CDCIsReady
 2073 0f76 0346     		mov	r3, r0
 2074 0f78 002B     		cmp	r3, #0
 2075 0f7a FAD0     		beq	.L101
 799:main.c        **** 							USBUART_PutData(USB_Out_Buffer, USBUART_BUFFER_SIZE);
 2076              		.loc 1 799 0 is_stmt 1
 2077 0f7c 4021     		movs	r1, #64
 2078 0f7e 4248     		ldr	r0, .L130+24
 2079 0f80 FFF7FEFF 		bl	USBUART_PutData
 2080              	.L100:
 783:main.c        **** 					{
 2081              		.loc 1 783 0 discriminator 2
 2082 0f84 BB8C     		ldrh	r3, [r7, #36]
 2083 0f86 0133     		adds	r3, r3, #1
 2084 0f88 BB84     		strh	r3, [r7, #36]	@ movhi
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 52


 2085              	.L96:
 783:main.c        **** 					{
 2086              		.loc 1 783 0 is_stmt 0 discriminator 1
 2087 0f8a BB8C     		ldrh	r3, [r7, #36]
 2088 0f8c B3F5806F 		cmp	r3, #1024
 2089 0f90 82D3     		bcc	.L102
 2090 0f92 8CE0     		b	.L6
 2091              	.L95:
 800:main.c        **** 						}
 801:main.c        **** 					}
 802:main.c        **** 				}
 803:main.c        **** 				else if(*psz == 'P')
 2092              		.loc 1 803 0 is_stmt 1
 2093 0f94 BB69     		ldr	r3, [r7, #24]
 2094 0f96 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2095 0f98 502B     		cmp	r3, #80
 2096 0f9a 58D1     		bne	.L103
 804:main.c        **** 				{
 805:main.c        **** 					// Scope Preamp settings
 806:main.c        **** 					// S P [A,B] Val can be 1,2,4,8,16,24,32,48,50
 807:main.c        ****                     // Grab the preamp gain value and set the gain
 808:main.c        **** 					//
 809:main.c        **** 					psz = strtok(0, " ");
 2097              		.loc 1 809 0
 2098 0f9c 3649     		ldr	r1, .L130+8
 2099 0f9e 0020     		movs	r0, #0
 2100 0fa0 FFF7FEFF 		bl	strtok
 2101 0fa4 B861     		str	r0, [r7, #24]
 810:main.c        **** 					
 811:main.c        **** 					if(*psz == 'A')
 2102              		.loc 1 811 0
 2103 0fa6 BB69     		ldr	r3, [r7, #24]
 2104 0fa8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2105 0faa 412B     		cmp	r3, #65
 2106 0fac 10D1     		bne	.L104
 812:main.c        **** 					{
 813:main.c        ****                         psz = strtok(0, " ");
 2107              		.loc 1 813 0
 2108 0fae 3249     		ldr	r1, .L130+8
 2109 0fb0 0020     		movs	r0, #0
 2110 0fb2 FFF7FEFF 		bl	strtok
 2111 0fb6 B861     		str	r0, [r7, #24]
 814:main.c        ****                         sscanf(psz,"%hu", &avar);
 2112              		.loc 1 814 0
 2113 0fb8 BB1D     		adds	r3, r7, #6
 2114 0fba 1A46     		mov	r2, r3
 2115 0fbc 2F49     		ldr	r1, .L130+12
 2116 0fbe B869     		ldr	r0, [r7, #24]
 2117 0fc0 FFF7FEFF 		bl	sscanf
 815:main.c        **** 						//preamp_a = (uint8) avar;
 816:main.c        ****                         ScopeA_Buf_SetGain((uint8) avar);
 2118              		.loc 1 816 0
 2119 0fc4 FB88     		ldrh	r3, [r7, #6]
 2120 0fc6 DBB2     		uxtb	r3, r3
 2121 0fc8 1846     		mov	r0, r3
 2122 0fca FFF7FEFF 		bl	ScopeA_Buf_SetGain
 2123 0fce 6EE0     		b	.L6
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 53


 2124              	.L104:
 817:main.c        **** 					}
 818:main.c        **** 					else if(*psz == 'B')
 2125              		.loc 1 818 0
 2126 0fd0 BB69     		ldr	r3, [r7, #24]
 2127 0fd2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2128 0fd4 422B     		cmp	r3, #66
 2129 0fd6 10D1     		bne	.L106
 819:main.c        **** 					{
 820:main.c        **** 						psz = strtok(0, " ");
 2130              		.loc 1 820 0
 2131 0fd8 2749     		ldr	r1, .L130+8
 2132 0fda 0020     		movs	r0, #0
 2133 0fdc FFF7FEFF 		bl	strtok
 2134 0fe0 B861     		str	r0, [r7, #24]
 821:main.c        ****                         sscanf(psz,"%hu", &avar);
 2135              		.loc 1 821 0
 2136 0fe2 BB1D     		adds	r3, r7, #6
 2137 0fe4 1A46     		mov	r2, r3
 2138 0fe6 2549     		ldr	r1, .L130+12
 2139 0fe8 B869     		ldr	r0, [r7, #24]
 2140 0fea FFF7FEFF 		bl	sscanf
 822:main.c        **** 						//preamp_b = (uint8) avar;
 823:main.c        ****                         ScopeB_Buf_SetGain((uint8) avar);
 2141              		.loc 1 823 0
 2142 0fee FB88     		ldrh	r3, [r7, #6]
 2143 0ff0 DBB2     		uxtb	r3, r3
 2144 0ff2 1846     		mov	r0, r3
 2145 0ff4 FFF7FEFF 		bl	ScopeB_Buf_SetGain
 2146 0ff8 59E0     		b	.L6
 2147              	.L106:
 824:main.c        **** 					}
 825:main.c        ****                     else if(*psz == 'C')
 2148              		.loc 1 825 0
 2149 0ffa BB69     		ldr	r3, [r7, #24]
 2150 0ffc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2151 0ffe 432B     		cmp	r3, #67
 2152 1000 10D1     		bne	.L107
 826:main.c        **** 					{
 827:main.c        ****                         psz = strtok(0, " ");
 2153              		.loc 1 827 0
 2154 1002 1D49     		ldr	r1, .L130+8
 2155 1004 0020     		movs	r0, #0
 2156 1006 FFF7FEFF 		bl	strtok
 2157 100a B861     		str	r0, [r7, #24]
 828:main.c        ****                         sscanf(psz,"%hu", &avar);
 2158              		.loc 1 828 0
 2159 100c BB1D     		adds	r3, r7, #6
 2160 100e 1A46     		mov	r2, r3
 2161 1010 1A49     		ldr	r1, .L130+12
 2162 1012 B869     		ldr	r0, [r7, #24]
 2163 1014 FFF7FEFF 		bl	sscanf
 829:main.c        **** 						//preamp_a = (uint8) avar;
 830:main.c        ****                         ScopeC_Buf_SetGain((uint8) avar);
 2164              		.loc 1 830 0
 2165 1018 FB88     		ldrh	r3, [r7, #6]
 2166 101a DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 54


 2167 101c 1846     		mov	r0, r3
 2168 101e FFF7FEFF 		bl	ScopeC_Buf_SetGain
 2169 1022 44E0     		b	.L6
 2170              	.L107:
 831:main.c        **** 					}
 832:main.c        **** 					else if(*psz == 'D')
 2171              		.loc 1 832 0
 2172 1024 BB69     		ldr	r3, [r7, #24]
 2173 1026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2174 1028 442B     		cmp	r3, #68
 2175 102a 40D1     		bne	.L6
 833:main.c        **** 					{
 834:main.c        **** 						psz = strtok(0, " ");
 2176              		.loc 1 834 0
 2177 102c 1249     		ldr	r1, .L130+8
 2178 102e 0020     		movs	r0, #0
 2179 1030 FFF7FEFF 		bl	strtok
 2180 1034 B861     		str	r0, [r7, #24]
 835:main.c        ****                         sscanf(psz,"%hu", &avar);
 2181              		.loc 1 835 0
 2182 1036 BB1D     		adds	r3, r7, #6
 2183 1038 1A46     		mov	r2, r3
 2184 103a 1049     		ldr	r1, .L130+12
 2185 103c B869     		ldr	r0, [r7, #24]
 2186 103e FFF7FEFF 		bl	sscanf
 836:main.c        **** 						//preamp_b = (uint8) avar;
 837:main.c        ****                         ScopeC_Buf_SetGain((uint8) avar);
 2187              		.loc 1 837 0
 2188 1042 FB88     		ldrh	r3, [r7, #6]
 2189 1044 DBB2     		uxtb	r3, r3
 2190 1046 1846     		mov	r0, r3
 2191 1048 FFF7FEFF 		bl	ScopeC_Buf_SetGain
 2192 104c 2FE0     		b	.L6
 2193              	.L103:
 838:main.c        **** 					}
 839:main.c        **** 				}
 840:main.c        ****                 else if(*psz == 'M')
 2194              		.loc 1 840 0
 2195 104e BB69     		ldr	r3, [r7, #24]
 2196 1050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2197 1052 4D2B     		cmp	r3, #77
 2198 1054 24D1     		bne	.L108
 841:main.c        **** 				{
 842:main.c        **** 					// Select scope input mux channel A or C and B or D
 843:main.c        **** 					psz = strtok(0, " ");
 2199              		.loc 1 843 0
 2200 1056 0849     		ldr	r1, .L130+8
 2201 1058 0020     		movs	r0, #0
 2202 105a FFF7FEFF 		bl	strtok
 2203 105e B861     		str	r0, [r7, #24]
 844:main.c        **** 					if(*psz == 'A')
 2204              		.loc 1 844 0
 2205 1060 BB69     		ldr	r3, [r7, #24]
 2206 1062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2207 1064 412B     		cmp	r3, #65
 2208 1066 13D1     		bne	.L109
 845:main.c        **** 					{
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 55


 846:main.c        ****                         AMux_1_Select(SCOPE_CHANNEL_1);
 2209              		.loc 1 846 0
 2210 1068 0020     		movs	r0, #0
 2211 106a FFF7FEFF 		bl	AMux_1_FastSelect
 2212 106e 1EE0     		b	.L6
 2213              	.L131:
 2214              		.align	3
 2215              	.L130:
 2216 1070 14AE47E1 		.word	-515396076
 2217 1074 7A14F03F 		.word	1072698490
 2218 1078 00000000 		.word	.LC0
 2219 107c 14000000 		.word	.LC2
 2220 1080 00000000 		.word	Channel_1_Data
 2221 1084 00000000 		.word	Channel_2_Data
 2222 1088 00000000 		.word	USB_Out_Buffer
 2223 108c 3F000080 		.word	-2147483585
 2224              	.L109:
 847:main.c        **** 					}
 848:main.c        ****                     else if(*psz == 'C')
 2225              		.loc 1 848 0
 2226 1090 BB69     		ldr	r3, [r7, #24]
 2227 1092 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2228 1094 432B     		cmp	r3, #67
 2229 1096 0AD1     		bne	.L6
 849:main.c        ****                     {
 850:main.c        ****                         AMux_1_Select(SCOPE_CHANNEL_2);
 2230              		.loc 1 850 0
 2231 1098 0120     		movs	r0, #1
 2232 109a FFF7FEFF 		bl	AMux_1_FastSelect
 2233 109e 06E0     		b	.L6
 2234              	.L108:
 851:main.c        ****                     }
 852:main.c        **** 				}
 853:main.c        **** 				else
 854:main.c        **** 				{
 855:main.c        **** 					PutString("Error: Unrecognized Scope Command\n\r");
 2235              		.loc 1 855 0
 2236 10a0 1748     		ldr	r0, .L132
 2237 10a2 FFF7FEFF 		bl	PutString
 2238 10a6 02E0     		b	.L6
 2239              	.L58:
 856:main.c        **** 				}
 857:main.c        **** 			// END OF SCOPE 'S' COMMANDS
 858:main.c        **** 			}
 859:main.c        **** 			else
 860:main.c        **** 			{
 861:main.c        **** 				// command not recognized, toss it
 862:main.c        **** 				PutString("Error: Unknown Command\n\r");
 2240              		.loc 1 862 0
 2241 10a8 1648     		ldr	r0, .L132+4
 2242 10aa FFF7FEFF 		bl	PutString
 2243              	.L6:
 863:main.c        **** 			}
 864:main.c        **** 			bCommandReady = 0;
 2244              		.loc 1 864 0
 2245 10ae 164B     		ldr	r3, .L132+8
 2246 10b0 0022     		movs	r2, #0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 56


 2247 10b2 1A70     		strb	r2, [r3]
 2248              	.L4:
 865:main.c        **** 		}
 866:main.c        **** 		
 867:main.c        **** 		status = Trigger_Status_Read();
 2249              		.loc 1 867 0
 2250 10b4 FFF7FEFF 		bl	Trigger_Status_Read
 2251 10b8 0346     		mov	r3, r0
 2252 10ba FB72     		strb	r3, [r7, #11]
 868:main.c        **** 						
 869:main.c        **** 		// if we have completed a capture, get the index of the last sample
 870:main.c        **** 		if((status & CAPTURE_COMPLETE ) != 0)
 2253              		.loc 1 870 0
 2254 10bc FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2255 10be 03F00403 		and	r3, r3, #4
 2256 10c2 002B     		cmp	r3, #0
 2257 10c4 3EF4A3AF 		beq	.L112
 871:main.c        **** 		{
 872:main.c        **** 			ending_offset = GetLastSampleIndex(DMA_Channel_1_Chan);
 2258              		.loc 1 872 0
 2259 10c8 104B     		ldr	r3, .L132+12
 2260 10ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2261 10cc 1846     		mov	r0, r3
 2262 10ce FFF7FEFF 		bl	GetLastSampleIndex
 2263 10d2 0346     		mov	r3, r0
 2264 10d4 3B81     		strh	r3, [r7, #8]	@ movhi
 873:main.c        **** 			
 874:main.c        **** 			// return the capture info
 875:main.c        **** 			PutChar('A');
 2265              		.loc 1 875 0
 2266 10d6 4120     		movs	r0, #65
 2267 10d8 FFF7FEFF 		bl	PutChar
 876:main.c        **** 			PutChar((uint8) ((ending_offset >> 8) & 0x000F)); // address of the end, MSbits
 2268              		.loc 1 876 0
 2269 10dc 3B89     		ldrh	r3, [r7, #8]
 2270 10de 1B0A     		lsrs	r3, r3, #8
 2271 10e0 9BB2     		uxth	r3, r3
 2272 10e2 DBB2     		uxtb	r3, r3
 2273 10e4 03F00F03 		and	r3, r3, #15
 2274 10e8 DBB2     		uxtb	r3, r3
 2275 10ea 1846     		mov	r0, r3
 2276 10ec FFF7FEFF 		bl	PutChar
 877:main.c        **** 			PutChar((uint8) (ending_offset & 0x00FF)); // address of the end, LSbits
 2277              		.loc 1 877 0
 2278 10f0 3B89     		ldrh	r3, [r7, #8]	@ movhi
 2279 10f2 DBB2     		uxtb	r3, r3
 2280 10f4 1846     		mov	r0, r3
 2281 10f6 FFF7FEFF 		bl	PutChar
 878:main.c        **** 			//PutChar('\n'); // terminate the return data, through testing, there is no need to send this ch
 879:main.c        **** 		}
 880:main.c        **** 
 881:main.c        ****         //GJL
 882:main.c        **** //		// digital input update
 883:main.c        **** //		if((Digital_Input_Status_Last != Digital_Input_Status_Read()) && (Digital_AutoUpdate != 0))
 884:main.c        **** //		{
 885:main.c        **** //			PutChar('I');
 886:main.c        **** //			PutChar((uint8) Digital_Input_Status_Read());
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 57


 887:main.c        **** //			Digital_Input_Status_Last = Digital_Input_Status_Read();
 888:main.c        **** //		}
 889:main.c        **** 	}
 2282              		.loc 1 889 0
 2283 10fa FEF788BF 		b	.L112
 2284              	.L133:
 2285 10fe 00BF     		.align	2
 2286              	.L132:
 2287 1100 18000000 		.word	.LC3
 2288 1104 3C000000 		.word	.LC4
 2289 1108 00000000 		.word	bCommandReady
 2290 110c 00000000 		.word	DMA_Channel_1_Chan
 2291              		.cfi_endproc
 2292              	.LFE64:
 2293              		.size	main, .-main
 2294              		.section	.text.Hardware_Config,"ax",%progbits
 2295              		.align	2
 2296              		.global	Hardware_Config
 2297              		.thumb
 2298              		.thumb_func
 2299              		.type	Hardware_Config, %function
 2300              	Hardware_Config:
 2301              	.LFB65:
 890:main.c        **** }
 891:main.c        **** 
 892:main.c        **** void Hardware_Config(void)
 893:main.c        **** {
 2302              		.loc 1 893 0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 0
 2305              		@ frame_needed = 1, uses_anonymous_args = 0
 2306 0000 80B5     		push	{r7, lr}
 2307              		.cfi_def_cfa_offset 8
 2308              		.cfi_offset 7, -8
 2309              		.cfi_offset 14, -4
 2310 0002 00AF     		add	r7, sp, #0
 2311              		.cfi_def_cfa_register 7
 894:main.c        ****     CyGlobalIntEnable;
 2312              		.loc 1 894 0
 2313              		.syntax unified
 2314              	@ 894 "main.c" 1
 2315 0004 62B6     		CPSIE   i
 2316              	@ 0 "" 2
 895:main.c        **** 	
 896:main.c        **** 	cCommandsReady = 0;
 2317              		.loc 1 896 0
 2318              		.thumb
 2319              		.syntax unified
 2320 0006 494B     		ldr	r3, .L136
 2321 0008 0022     		movs	r2, #0
 2322 000a 1A80     		strh	r2, [r3]	@ movhi
 897:main.c        **** 	bCommandReady = 0;
 2323              		.loc 1 897 0
 2324 000c 484B     		ldr	r3, .L136+4
 2325 000e 0022     		movs	r2, #0
 2326 0010 1A70     		strb	r2, [r3]
 898:main.c        ****     
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 58


 899:main.c        ****     USBUART_Start(0, USBUART_5V_OPERATION);
 2327              		.loc 1 899 0
 2328 0012 0121     		movs	r1, #1
 2329 0014 0020     		movs	r0, #0
 2330 0016 FFF7FEFF 		bl	USBUART_Start
 900:main.c        **** 	while(!USBUART_GetConfiguration())
 2331              		.loc 1 900 0
 2332 001a 00BF     		nop
 2333              	.L135:
 2334              		.loc 1 900 0 is_stmt 0 discriminator 1
 2335 001c FFF7FEFF 		bl	USBUART_GetConfiguration
 2336 0020 0346     		mov	r3, r0
 2337 0022 002B     		cmp	r3, #0
 2338 0024 FAD0     		beq	.L135
 901:main.c        ****     {
 902:main.c        ****         /* Wait for USBUART to complete configuration */
 903:main.c        ****     }
 904:main.c        ****     USBUART_CDC_Init();
 2339              		.loc 1 904 0 is_stmt 1
 2340 0026 FFF7FEFF 		bl	USBUART_CDC_Init
 905:main.c        **** 	
 906:main.c        **** 	Amux_Trigger_Select(SCOPE_CHANNEL_1);
 2341              		.loc 1 906 0
 2342 002a 0020     		movs	r0, #0
 2343 002c FFF7FEFF 		bl	Amux_Trigger_FastSelect
 907:main.c        ****     
 908:main.c        ****     ADC_1_Start();
 2344              		.loc 1 908 0
 2345 0030 FFF7FEFF 		bl	ADC_1_Start
 909:main.c        ****     ADC_2_Start();
 2346              		.loc 1 909 0
 2347 0034 FFF7FEFF 		bl	ADC_2_Start
 910:main.c        ****     ScopeA_Buf_Start();
 2348              		.loc 1 910 0
 2349 0038 FFF7FEFF 		bl	ScopeA_Buf_Start
 911:main.c        ****     ScopeB_Buf_Start();
 2350              		.loc 1 911 0
 2351 003c FFF7FEFF 		bl	ScopeB_Buf_Start
 912:main.c        ****     ScopeC_Buf_Start();
 2352              		.loc 1 912 0
 2353 0040 FFF7FEFF 		bl	ScopeC_Buf_Start
 913:main.c        ****     Vtrigger_Start();
 2354              		.loc 1 913 0
 2355 0044 FFF7FEFF 		bl	Vtrigger_Start
 914:main.c        ****     Trigger_Comp_Start();
 2356              		.loc 1 914 0
 2357 0048 FFF7FEFF 		bl	Trigger_Comp_Start
 915:main.c        ****     
 916:main.c        ****     // The extras
 917:main.c        ****     AuxDAC_Buf_Start();
 2358              		.loc 1 917 0
 2359 004c FFF7FEFF 		bl	AuxDAC_Buf_Start
 918:main.c        ****     AuxDAC_1_Start();
 2360              		.loc 1 918 0
 2361 0050 FFF7FEFF 		bl	AuxDAC_1_Start
 919:main.c        ****     
 920:main.c        ****     PWM_Sample_Buffer_Start();
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 59


 2362              		.loc 1 920 0
 2363 0054 FFF7FEFF 		bl	PWM_Sample_Buffer_Start
 921:main.c        **** 	// update the period to match the trigger buffer size for maximum post trigger capture
 922:main.c        **** 	PWM_Sample_Buffer_WritePeriod(BUFFER_SIZE-1); // maximum post trigger buffer
 2364              		.loc 1 922 0
 2365 0058 40F2FF30 		movw	r0, #1023
 2366 005c FFF7FEFF 		bl	PWM_Sample_Buffer_WritePeriod
 923:main.c        **** 	//PWM_Sample_Buffer_WritePeriod(2); // minimum post trigger buffer, 3 samples after trigger (used 
 924:main.c        **** 	// after setting the period, need to set the count to the proper value as well
 925:main.c        **** 	PWM_Sample_Buffer_WriteCounter(BUFFER_SIZE-1); // maximum post trigger buffer
 2367              		.loc 1 925 0
 2368 0060 40F2FF30 		movw	r0, #1023
 2369 0064 FFF7FEFF 		bl	PWM_Sample_Buffer_WriteCounter
 926:main.c        **** 	//PWM_Sample_Buffer_WriteCounter(2); // minimum post trigger buffer, 3 samples after trigger
 927:main.c        **** 	
 928:main.c        ****     ScopeA_Buf_SetGain(0);
 2370              		.loc 1 928 0
 2371 0068 0020     		movs	r0, #0
 2372 006a FFF7FEFF 		bl	ScopeA_Buf_SetGain
 929:main.c        ****     ScopeB_Buf_SetGain(0);
 2373              		.loc 1 929 0
 2374 006e 0020     		movs	r0, #0
 2375 0070 FFF7FEFF 		bl	ScopeB_Buf_SetGain
 930:main.c        ****     ScopeC_Buf_SetGain(0);
 2376              		.loc 1 930 0
 2377 0074 0020     		movs	r0, #0
 2378 0076 FFF7FEFF 		bl	ScopeC_Buf_SetGain
 931:main.c        ****     
 932:main.c        **** 	trigger_source = SCOPE_CHANNEL_1;
 2379              		.loc 1 932 0
 2380 007a 2E4B     		ldr	r3, .L136+8
 2381 007c 0022     		movs	r2, #0
 2382 007e 1A70     		strb	r2, [r3]
 933:main.c        ****     
 934:main.c        **** 	// basic configuration is trigger on the rising edge of channel 0
 935:main.c        **** 	Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 2383              		.loc 1 935 0
 2384 0080 FFF7FEFF 		bl	Trigger_Control_Read
 2385 0084 0346     		mov	r3, r0
 2386 0086 23F00F03 		bic	r3, r3, #15
 2387 008a DBB2     		uxtb	r3, r3
 2388 008c 1846     		mov	r0, r3
 2389 008e FFF7FEFF 		bl	Trigger_Control_Write
 936:main.c        ****     Trigger_Control_Write(Trigger_Control_Read() | RISING_EDGE_TRIGGERED);
 2390              		.loc 1 936 0
 2391 0092 FFF7FEFF 		bl	Trigger_Control_Read
 2392 0096 0346     		mov	r3, r0
 2393 0098 43F00203 		orr	r3, r3, #2
 2394 009c DBB2     		uxtb	r3, r3
 2395 009e 1846     		mov	r0, r3
 2396 00a0 FFF7FEFF 		bl	Trigger_Control_Write
 937:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | FALLING_EDGE_TRIGGERED);
 938:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | EITHER_EDGE_TRIGGERED);
 939:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | EXTERNAL_TRIGGERED);
 940:main.c        **** 	
 941:main.c        **** 	// waveform generator control
 942:main.c        **** 	Wave_Control_Write(Wave_Control_Read() & ~WAVEA_SELECT_MASK);
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 60


 2397              		.loc 1 942 0
 2398 00a4 FFF7FEFF 		bl	Wave_Control_Read
 2399 00a8 0346     		mov	r3, r0
 2400 00aa 23F00103 		bic	r3, r3, #1
 2401 00ae DBB2     		uxtb	r3, r3
 2402 00b0 1846     		mov	r0, r3
 2403 00b2 FFF7FEFF 		bl	Wave_Control_Write
 943:main.c        **** 	Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 2404              		.loc 1 943 0
 2405 00b6 FFF7FEFF 		bl	Wave_Control_Read
 2406 00ba 0346     		mov	r3, r0
 2407 00bc 1846     		mov	r0, r3
 2408 00be FFF7FEFF 		bl	Wave_Control_Write
 944:main.c        **** 	// Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_NOISE);
 945:main.c        **** 	WaveA_DAC_Start();
 2409              		.loc 1 945 0
 2410 00c2 FFF7FEFF 		bl	WaveA_DAC_Start
 946:main.c        **** 	WaveA_Buf_Start();
 2411              		.loc 1 946 0
 2412 00c6 FFF7FEFF 		bl	WaveA_Buf_Start
 947:main.c        ****     WaveB_DAC_Start();
 2413              		.loc 1 947 0
 2414 00ca FFF7FEFF 		bl	WaveB_DAC_Start
 948:main.c        **** 	WaveB_Buf_Start();
 2415              		.loc 1 948 0
 2416 00ce FFF7FEFF 		bl	WaveB_Buf_Start
 949:main.c        **** 	WaveA_DAC_Wave1Setup(&WaveformA_Buffer[0], WAVEFORM_BUFFER_SIZE);
 2417              		.loc 1 949 0
 2418 00d2 4FF40061 		mov	r1, #2048
 2419 00d6 1848     		ldr	r0, .L136+12
 2420 00d8 FFF7FEFF 		bl	WaveA_DAC_Wave1Setup
 950:main.c        **** 	wavea_gain = 0;
 2421              		.loc 1 950 0
 2422 00dc 174B     		ldr	r3, .L136+16
 2423 00de 0022     		movs	r2, #0
 2424 00e0 1A70     		strb	r2, [r3]
 951:main.c        **** 	WaveB_DAC_Wave1Setup(&WaveformB_Buffer[0], WAVEFORM_BUFFER_SIZE);
 2425              		.loc 1 951 0
 2426 00e2 4FF40061 		mov	r1, #2048
 2427 00e6 1648     		ldr	r0, .L136+20
 2428 00e8 FFF7FEFF 		bl	WaveB_DAC_Wave1Setup
 952:main.c        **** 	waveb_gain = 0;
 2429              		.loc 1 952 0
 2430 00ec 154B     		ldr	r3, .L136+24
 2431 00ee 0022     		movs	r2, #0
 2432 00f0 1A70     		strb	r2, [r3]
 953:main.c        ****     
 954:main.c        **** 	PRS_Start();
 2433              		.loc 1 954 0
 2434 00f2 FFF7FEFF 		bl	PRS_Start
 955:main.c        ****     // GJL
 956:main.c        ****     // Change noise output to use value adjusted for amplitude/offset
 957:main.c        **** 	//Wave_DAC_Wave2Setup((uint8 *) PRS_SEED_PTR, 1);
 958:main.c        ****     WaveA_DAC_Wave2Setup(&Noise_Adjusted, 1);
 2435              		.loc 1 958 0
 2436 00f6 0121     		movs	r1, #1
 2437 00f8 1348     		ldr	r0, .L136+28
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 61


 2438 00fa FFF7FEFF 		bl	WaveA_DAC_Wave2Setup
 959:main.c        ****     WaveB_DAC_Wave2Setup(&Noise_Adjusted, 1);
 2439              		.loc 1 959 0
 2440 00fe 0121     		movs	r1, #1
 2441 0100 1148     		ldr	r0, .L136+28
 2442 0102 FFF7FEFF 		bl	WaveB_DAC_Wave2Setup
 960:main.c        ****     //GJL
 961:main.c        **** //	// digital IO initializations
 962:main.c        **** //	Digital_Input_Status_Last = 0;
 963:main.c        **** 	Dig_Out_Reg_Write(0);
 2443              		.loc 1 963 0
 2444 0106 0020     		movs	r0, #0
 2445 0108 FFF7FEFF 		bl	Dig_Out_Reg_Write
 964:main.c        **** 	Digital_AutoUpdate = 0;
 2446              		.loc 1 964 0
 2447 010c 0F4B     		ldr	r3, .L136+32
 2448 010e 0022     		movs	r2, #0
 2449 0110 1A70     		strb	r2, [r3]
 965:main.c        **** //	
 966:main.c        **** 	Dig_PWM_Start();
 2450              		.loc 1 966 0
 2451 0112 FFF7FEFF 		bl	Dig_PWM_Start
 967:main.c        ****     Dig_PWM_Enable();
 2452              		.loc 1 967 0
 2453 0116 FFF7FEFF 		bl	Dig_PWM_Enable
 968:main.c        ****     Dig_PWM_Clock_Start();
 2454              		.loc 1 968 0
 2455 011a FFF7FEFF 		bl	Dig_PWM_Clock_Start
 969:main.c        ****     Dig_PWM_Clock_SetDividerValue(128);
 2456              		.loc 1 969 0
 2457 011e 0121     		movs	r1, #1
 2458 0120 7F20     		movs	r0, #127
 2459 0122 FFF7FEFF 		bl	Dig_PWM_Clock_SetDividerRegister
 970:main.c        **** }
 2460              		.loc 1 970 0
 2461 0126 00BF     		nop
 2462 0128 80BD     		pop	{r7, pc}
 2463              	.L137:
 2464 012a 00BF     		.align	2
 2465              	.L136:
 2466 012c 00000000 		.word	cCommandsReady
 2467 0130 00000000 		.word	bCommandReady
 2468 0134 00000000 		.word	trigger_source
 2469 0138 00000000 		.word	WaveformA_Buffer
 2470 013c 00000000 		.word	wavea_gain
 2471 0140 00000000 		.word	WaveformB_Buffer
 2472 0144 00000000 		.word	waveb_gain
 2473 0148 00000000 		.word	Noise_Adjusted
 2474 014c 00000000 		.word	Digital_AutoUpdate
 2475              		.cfi_endproc
 2476              	.LFE65:
 2477              		.size	Hardware_Config, .-Hardware_Config
 2478              		.section	.text.DMA_Config,"ax",%progbits
 2479              		.align	2
 2480              		.global	DMA_Config
 2481              		.thumb
 2482              		.thumb_func
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 62


 2483              		.type	DMA_Config, %function
 2484              	DMA_Config:
 2485              	.LFB66:
 971:main.c        **** 
 972:main.c        **** void DMA_Config(void)
 973:main.c        **** {
 2486              		.loc 1 973 0
 2487              		.cfi_startproc
 2488              		@ args = 0, pretend = 0, frame = 0
 2489              		@ frame_needed = 1, uses_anonymous_args = 0
 2490 0000 80B5     		push	{r7, lr}
 2491              		.cfi_def_cfa_offset 8
 2492              		.cfi_offset 7, -8
 2493              		.cfi_offset 14, -4
 2494 0002 00AF     		add	r7, sp, #0
 2495              		.cfi_def_cfa_register 7
 974:main.c        ****     DMA_Channel_1_Chan = DMA_Channel_1_DmaInitialize(DMA_Channel_1_BYTES_PER_BURST, DMA_Channel_1_R
 2496              		.loc 1 974 0
 2497 0004 41F6FF73 		movw	r3, #8191
 2498 0008 4FF48042 		mov	r2, #16384
 2499 000c 0121     		movs	r1, #1
 2500 000e 0220     		movs	r0, #2
 2501 0010 FFF7FEFF 		bl	DMA_Channel_1_DmaInitialize
 2502 0014 0346     		mov	r3, r0
 2503 0016 1A46     		mov	r2, r3
 2504 0018 3F4B     		ldr	r3, .L140
 2505 001a 1A70     		strb	r2, [r3]
 975:main.c        ****         HI16(DMA_Channel_1_SRC_BASE), HI16(DMA_Channel_1_DST_BASE));
 976:main.c        ****     DMA_Channel_1_TD[0] = CyDmaTdAllocate();
 2506              		.loc 1 976 0
 2507 001c FFF7FEFF 		bl	CyDmaTdAllocate
 2508 0020 0346     		mov	r3, r0
 2509 0022 1A46     		mov	r2, r3
 2510 0024 3D4B     		ldr	r3, .L140+4
 2511 0026 1A70     		strb	r2, [r3]
 977:main.c        ****     CyDmaTdSetConfiguration(DMA_Channel_1_TD[0], BUFFER_SIZE*sizeof(int16), DMA_Channel_1_TD[0], DM
 2512              		.loc 1 977 0
 2513 0028 3C4B     		ldr	r3, .L140+4
 2514 002a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2515 002c 3B4B     		ldr	r3, .L140+4
 2516 002e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2517 0030 0623     		movs	r3, #6
 2518 0032 4FF40061 		mov	r1, #2048
 2519 0036 FFF7FEFF 		bl	CyDmaTdSetConfiguration
 978:main.c        ****     CyDmaTdSetAddress(DMA_Channel_1_TD[0], LO16((uint32)ADC_1_SAR_WRK0_PTR), LO16((uint32)&Channel_
 2520              		.loc 1 978 0
 2521 003a 384B     		ldr	r3, .L140+4
 2522 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2523 003e 384A     		ldr	r2, .L140+8
 2524 0040 92B2     		uxth	r2, r2
 2525 0042 45F6A231 		movw	r1, #23458
 2526 0046 1846     		mov	r0, r3
 2527 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
 979:main.c        ****     CyDmaChSetInitialTd(DMA_Channel_1_Chan, DMA_Channel_1_TD[0]);
 2528              		.loc 1 979 0
 2529 004c 324B     		ldr	r3, .L140
 2530 004e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 63


 2531 0050 324B     		ldr	r3, .L140+4
 2532 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2533 0054 1946     		mov	r1, r3
 2534 0056 1046     		mov	r0, r2
 2535 0058 FFF7FEFF 		bl	CyDmaChSetInitialTd
 980:main.c        ****     CyDmaChRoundRobin(DMA_Channel_1_Chan, 1);
 2536              		.loc 1 980 0
 2537 005c 2E4B     		ldr	r3, .L140
 2538 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2539 0060 0121     		movs	r1, #1
 2540 0062 1846     		mov	r0, r3
 2541 0064 FFF7FEFF 		bl	CyDmaChRoundRobin
 981:main.c        ****     CyDmaChSetRequest(DMA_Channel_1_Chan, CPU_TERM_CHAIN);
 2542              		.loc 1 981 0
 2543 0068 2B4B     		ldr	r3, .L140
 2544 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2545 006c 0421     		movs	r1, #4
 2546 006e 1846     		mov	r0, r3
 2547 0070 FFF7FEFF 		bl	CyDmaChSetRequest
 982:main.c        ****     CyDmaChEnable(DMA_Channel_1_Chan, 1);
 2548              		.loc 1 982 0
 2549 0074 284B     		ldr	r3, .L140
 2550 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2551 0078 0121     		movs	r1, #1
 2552 007a 1846     		mov	r0, r3
 2553 007c FFF7FEFF 		bl	CyDmaChEnable
 983:main.c        ****     CyDmaChEnable(DMA_Channel_1_Chan, 1);
 2554              		.loc 1 983 0
 2555 0080 254B     		ldr	r3, .L140
 2556 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2557 0084 0121     		movs	r1, #1
 2558 0086 1846     		mov	r0, r3
 2559 0088 FFF7FEFF 		bl	CyDmaChEnable
 984:main.c        **** 
 985:main.c        ****     DMA_Channel_2_Chan = DMA_Channel_2_DmaInitialize(DMA_Channel_2_BYTES_PER_BURST, DMA_Channel_2_R
 2560              		.loc 1 985 0
 2561 008c 41F6FF73 		movw	r3, #8191
 2562 0090 4FF48042 		mov	r2, #16384
 2563 0094 0121     		movs	r1, #1
 2564 0096 0220     		movs	r0, #2
 2565 0098 FFF7FEFF 		bl	DMA_Channel_2_DmaInitialize
 2566 009c 0346     		mov	r3, r0
 2567 009e 1A46     		mov	r2, r3
 2568 00a0 204B     		ldr	r3, .L140+12
 2569 00a2 1A70     		strb	r2, [r3]
 986:main.c        ****         HI16(DMA_Channel_2_SRC_BASE), HI16(DMA_Channel_2_DST_BASE));
 987:main.c        ****     DMA_Channel_2_TD[0] = CyDmaTdAllocate();
 2570              		.loc 1 987 0
 2571 00a4 FFF7FEFF 		bl	CyDmaTdAllocate
 2572 00a8 0346     		mov	r3, r0
 2573 00aa 1A46     		mov	r2, r3
 2574 00ac 1E4B     		ldr	r3, .L140+16
 2575 00ae 1A70     		strb	r2, [r3]
 988:main.c        ****     CyDmaTdSetConfiguration(DMA_Channel_2_TD[0], BUFFER_SIZE*sizeof(int16), DMA_Channel_2_TD[0], DM
 2576              		.loc 1 988 0
 2577 00b0 1D4B     		ldr	r3, .L140+16
 2578 00b2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 64


 2579 00b4 1C4B     		ldr	r3, .L140+16
 2580 00b6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2581 00b8 0223     		movs	r3, #2
 2582 00ba 4FF40061 		mov	r1, #2048
 2583 00be FFF7FEFF 		bl	CyDmaTdSetConfiguration
 989:main.c        ****     CyDmaTdSetAddress(DMA_Channel_2_TD[0], LO16((uint32)ADC_2_SAR_WRK0_PTR), LO16((uint32)&Channel_
 2584              		.loc 1 989 0
 2585 00c2 194B     		ldr	r3, .L140+16
 2586 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2587 00c6 194A     		ldr	r2, .L140+20
 2588 00c8 92B2     		uxth	r2, r2
 2589 00ca 45F6A031 		movw	r1, #23456
 2590 00ce 1846     		mov	r0, r3
 2591 00d0 FFF7FEFF 		bl	CyDmaTdSetAddress
 990:main.c        ****     CyDmaChSetInitialTd(DMA_Channel_2_Chan, DMA_Channel_2_TD[0]);
 2592              		.loc 1 990 0
 2593 00d4 134B     		ldr	r3, .L140+12
 2594 00d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2595 00d8 134B     		ldr	r3, .L140+16
 2596 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2597 00dc 1946     		mov	r1, r3
 2598 00de 1046     		mov	r0, r2
 2599 00e0 FFF7FEFF 		bl	CyDmaChSetInitialTd
 991:main.c        ****     CyDmaChRoundRobin(DMA_Channel_2_Chan, 1);
 2600              		.loc 1 991 0
 2601 00e4 0F4B     		ldr	r3, .L140+12
 2602 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2603 00e8 0121     		movs	r1, #1
 2604 00ea 1846     		mov	r0, r3
 2605 00ec FFF7FEFF 		bl	CyDmaChRoundRobin
 992:main.c        ****     CyDmaChSetRequest(DMA_Channel_2_Chan, CPU_TERM_CHAIN);
 2606              		.loc 1 992 0
 2607 00f0 0C4B     		ldr	r3, .L140+12
 2608 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2609 00f4 0421     		movs	r1, #4
 2610 00f6 1846     		mov	r0, r3
 2611 00f8 FFF7FEFF 		bl	CyDmaChSetRequest
 993:main.c        ****     CyDmaChEnable(DMA_Channel_2_Chan, 1);
 2612              		.loc 1 993 0
 2613 00fc 094B     		ldr	r3, .L140+12
 2614 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2615 0100 0121     		movs	r1, #1
 2616 0102 1846     		mov	r0, r3
 2617 0104 FFF7FEFF 		bl	CyDmaChEnable
 994:main.c        ****     CyDmaChEnable(DMA_Channel_2_Chan, 1);
 2618              		.loc 1 994 0
 2619 0108 064B     		ldr	r3, .L140+12
 2620 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2621 010c 0121     		movs	r1, #1
 2622 010e 1846     		mov	r0, r3
 2623 0110 FFF7FEFF 		bl	CyDmaChEnable
 995:main.c        **** 
 996:main.c        ****     return;
 2624              		.loc 1 996 0
 2625 0114 00BF     		nop
 997:main.c        **** }
 2626              		.loc 1 997 0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 65


 2627 0116 80BD     		pop	{r7, pc}
 2628              	.L141:
 2629              		.align	2
 2630              	.L140:
 2631 0118 00000000 		.word	DMA_Channel_1_Chan
 2632 011c 00000000 		.word	DMA_Channel_1_TD
 2633 0120 00000000 		.word	Channel_1_Data
 2634 0124 00000000 		.word	DMA_Channel_2_Chan
 2635 0128 00000000 		.word	DMA_Channel_2_TD
 2636 012c 00000000 		.word	Channel_2_Data
 2637              		.cfi_endproc
 2638              	.LFE66:
 2639              		.size	DMA_Config, .-DMA_Config
 2640              		.section	.text.GetLastSampleIndex,"ax",%progbits
 2641              		.align	2
 2642              		.global	GetLastSampleIndex
 2643              		.thumb
 2644              		.thumb_func
 2645              		.type	GetLastSampleIndex, %function
 2646              	GetLastSampleIndex:
 2647              	.LFB67:
 998:main.c        **** 
 999:main.c        **** // returns the address of the first sample in the circular DMA buffer
1000:main.c        **** 
1001:main.c        **** uint16 GetLastSampleIndex(uint8 chHandle)
1002:main.c        **** {
 2648              		.loc 1 1002 0
 2649              		.cfi_startproc
 2650              		@ args = 0, pretend = 0, frame = 16
 2651              		@ frame_needed = 1, uses_anonymous_args = 0
 2652              		@ link register save eliminated.
 2653 0000 80B4     		push	{r7}
 2654              		.cfi_def_cfa_offset 4
 2655              		.cfi_offset 7, -4
 2656 0002 85B0     		sub	sp, sp, #20
 2657              		.cfi_def_cfa_offset 24
 2658 0004 00AF     		add	r7, sp, #0
 2659              		.cfi_def_cfa_register 7
 2660 0006 0346     		mov	r3, r0
 2661 0008 FB71     		strb	r3, [r7, #7]
1003:main.c        **** 	uint16 index;
1004:main.c        **** 
1005:main.c        **** 	// get the upper 16 bits of the destination (not strictly necessary) (actually it doesn't work sin
1006:main.c        **** 	// upper 16 bit addresses for the same RAM information
1007:main.c        **** 	//dest_address = (((uint32) CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG1[3]) << 24) | (((uint32) CY_DMA
1008:main.c        **** 	
1009:main.c        **** 	// grab the lower 16 bits of the destination address
1010:main.c        **** 	// the assumption here is that "work seperate" has been enabled, so a copy of the TD is stored in 
1011:main.c        **** 	index = ((uint32) CY_DMA_TDMEM_STRUCT_PTR[chHandle].TD1[3] << 8) | ((uint32) CY_DMA_TDMEM_STRUCT_P
 2662              		.loc 1 1011 0
 2663 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2664 000c DB00     		lsls	r3, r3, #3
 2665 000e 03F18043 		add	r3, r3, #1073741824
 2666 0012 03F5F043 		add	r3, r3, #30720
 2667 0016 DB79     		ldrb	r3, [r3, #7]
 2668 0018 DBB2     		uxtb	r3, r3
 2669 001a 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 66


 2670 001c 1B02     		lsls	r3, r3, #8
 2671 001e 9AB2     		uxth	r2, r3
 2672 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2673 0022 DB00     		lsls	r3, r3, #3
 2674 0024 03F18043 		add	r3, r3, #1073741824
 2675 0028 03F5F043 		add	r3, r3, #30720
 2676 002c 9B79     		ldrb	r3, [r3, #6]
 2677 002e DBB2     		uxtb	r3, r3
 2678 0030 9BB2     		uxth	r3, r3
 2679 0032 1343     		orrs	r3, r3, r2
 2680 0034 FB81     		strh	r3, [r7, #14]	@ movhi
1012:main.c        **** 	
1013:main.c        **** 	// calculate the index by taking the difference between the starting and ending destination addres
1014:main.c        **** 	index = (index - sizeof(int16) - LO16((uint32) &Channel_1_Data[0]))/sizeof(int16) % BUFFER_SIZE;
 2681              		.loc 1 1014 0
 2682 0036 FA89     		ldrh	r2, [r7, #14]
 2683 0038 084B     		ldr	r3, .L144
 2684 003a 99B2     		uxth	r1, r3
 2685 003c 6FF00103 		mvn	r3, #1
 2686 0040 5B1A     		subs	r3, r3, r1
 2687 0042 1344     		add	r3, r3, r2
 2688 0044 5B08     		lsrs	r3, r3, #1
 2689 0046 9BB2     		uxth	r3, r3
 2690 0048 C3F30903 		ubfx	r3, r3, #0, #10
 2691 004c FB81     		strh	r3, [r7, #14]	@ movhi
1015:main.c        **** 	
1016:main.c        **** 	return index;
 2692              		.loc 1 1016 0
 2693 004e FB89     		ldrh	r3, [r7, #14]
1017:main.c        **** }
 2694              		.loc 1 1017 0
 2695 0050 1846     		mov	r0, r3
 2696 0052 1437     		adds	r7, r7, #20
 2697              		.cfi_def_cfa_offset 4
 2698 0054 BD46     		mov	sp, r7
 2699              		.cfi_def_cfa_register 13
 2700              		@ sp needed
 2701 0056 80BC     		pop	{r7}
 2702              		.cfi_restore 7
 2703              		.cfi_def_cfa_offset 0
 2704 0058 7047     		bx	lr
 2705              	.L145:
 2706 005a 00BF     		.align	2
 2707              	.L144:
 2708 005c 00000000 		.word	Channel_1_Data
 2709              		.cfi_endproc
 2710              	.LFE67:
 2711              		.size	GetLastSampleIndex, .-GetLastSampleIndex
 2712              		.section	.text.CommandCheck,"ax",%progbits
 2713              		.align	2
 2714              		.global	CommandCheck
 2715              		.thumb
 2716              		.thumb_func
 2717              		.type	CommandCheck, %function
 2718              	CommandCheck:
 2719              	.LFB68:
1018:main.c        **** 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 67


1019:main.c        **** void CommandCheck(void)
1020:main.c        **** {
 2720              		.loc 1 1020 0
 2721              		.cfi_startproc
 2722              		@ args = 0, pretend = 0, frame = 8
 2723              		@ frame_needed = 1, uses_anonymous_args = 0
 2724 0000 80B5     		push	{r7, lr}
 2725              		.cfi_def_cfa_offset 8
 2726              		.cfi_offset 7, -8
 2727              		.cfi_offset 14, -4
 2728 0002 82B0     		sub	sp, sp, #8
 2729              		.cfi_def_cfa_offset 16
 2730 0004 00AF     		add	r7, sp, #0
 2731              		.cfi_def_cfa_register 7
1021:main.c        **** 	uint16 i, ReceivedBytes;
1022:main.c        **** 	// check to see if line state has changed? thought this might be necessary, but it probably isn't
1023:main.c        **** 	USBUART_IsLineChanged();
 2732              		.loc 1 1023 0
 2733 0006 FFF7FEFF 		bl	USBUART_IsLineChanged
1024:main.c        **** 	
1025:main.c        **** 	// if data is waiting
1026:main.c        **** 	if(USBUART_DataIsReady() != 0)
 2734              		.loc 1 1026 0
 2735 000a FFF7FEFF 		bl	USBUART_DataIsReady
 2736 000e 0346     		mov	r3, r0
 2737 0010 002B     		cmp	r3, #0
 2738 0012 5AD0     		beq	.L147
1027:main.c        **** 	{
1028:main.c        **** 		// lets find out how much the PC sent to us
1029:main.c        **** 		ReceivedBytes = USBUART_GetCount();
 2739              		.loc 1 1029 0
 2740 0014 FFF7FEFF 		bl	USBUART_GetCount
 2741 0018 0346     		mov	r3, r0
 2742 001a BB80     		strh	r3, [r7, #4]	@ movhi
1030:main.c        **** 		
1031:main.c        **** 		// if the amount of data received is non-zero
1032:main.c        **** 		if(ReceivedBytes != 0)
 2743              		.loc 1 1032 0
 2744 001c BB88     		ldrh	r3, [r7, #4]
 2745 001e 002B     		cmp	r3, #0
 2746 0020 07D0     		beq	.L148
1033:main.c        **** 		{
1034:main.c        **** 			cCharsReceived = USBUART_GetAll((uint8 *) &szTempBuffer[0]);
 2747              		.loc 1 1034 0
 2748 0022 4F48     		ldr	r0, .L159
 2749 0024 FFF7FEFF 		bl	USBUART_GetAll
 2750 0028 0346     		mov	r3, r0
 2751 002a DAB2     		uxtb	r2, r3
 2752 002c 4D4B     		ldr	r3, .L159+4
 2753 002e 1A70     		strb	r2, [r3]
 2754 0030 02E0     		b	.L149
 2755              	.L148:
1035:main.c        **** 		}
1036:main.c        **** 		else
1037:main.c        **** 		{
1038:main.c        **** 			// its a zero length data packet, it *should* be safe to do this and not worry about corrupting 
1039:main.c        **** 			USBUART_GetAll((uint8 *) &szTempBuffer[0]);
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 68


 2756              		.loc 1 1039 0
 2757 0032 4B48     		ldr	r0, .L159
 2758 0034 FFF7FEFF 		bl	USBUART_GetAll
 2759              	.L149:
1040:main.c        **** 			//PutString("Zero Length Packet\n");
1041:main.c        **** 		}
1042:main.c        **** 		
1043:main.c        **** 		// move the data from the temporary buffer into the circular command buffer
1044:main.c        **** 		i = 0;
 2760              		.loc 1 1044 0
 2761 0038 0023     		movs	r3, #0
 2762 003a FB80     		strh	r3, [r7, #6]	@ movhi
 2763              	.L151:
1045:main.c        **** 		do
1046:main.c        **** 		{
1047:main.c        **** 			szCommandsBuffer[iWrite] = szTempBuffer[i];
 2764              		.loc 1 1047 0 discriminator 2
 2765 003c 4A4B     		ldr	r3, .L159+8
 2766 003e 1B88     		ldrh	r3, [r3]
 2767 0040 1946     		mov	r1, r3
 2768 0042 FB88     		ldrh	r3, [r7, #6]
 2769 0044 464A     		ldr	r2, .L159
 2770 0046 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 2771 0048 484B     		ldr	r3, .L159+12
 2772 004a 5A54     		strb	r2, [r3, r1]
1048:main.c        **** 			i++;
 2773              		.loc 1 1048 0 discriminator 2
 2774 004c FB88     		ldrh	r3, [r7, #6]
 2775 004e 0133     		adds	r3, r3, #1
 2776 0050 FB80     		strh	r3, [r7, #6]	@ movhi
1049:main.c        **** 			iWrite++;
 2777              		.loc 1 1049 0 discriminator 2
 2778 0052 454B     		ldr	r3, .L159+8
 2779 0054 1B88     		ldrh	r3, [r3]
 2780 0056 0133     		adds	r3, r3, #1
 2781 0058 9AB2     		uxth	r2, r3
 2782 005a 434B     		ldr	r3, .L159+8
 2783 005c 1A80     		strh	r2, [r3]	@ movhi
1050:main.c        **** 			iWrite = iWrite % CIRCULAR_BUFFER_SIZE;
 2784              		.loc 1 1050 0 discriminator 2
 2785 005e 424B     		ldr	r3, .L159+8
 2786 0060 1B88     		ldrh	r3, [r3]
 2787 0062 C3F30B03 		ubfx	r3, r3, #0, #12
 2788 0066 9AB2     		uxth	r2, r3
 2789 0068 3F4B     		ldr	r3, .L159+8
 2790 006a 1A80     		strh	r2, [r3]	@ movhi
1051:main.c        **** 		}while((iWrite != iRead) && (i != cCharsReceived));
 2791              		.loc 1 1051 0 discriminator 2
 2792 006c 3E4B     		ldr	r3, .L159+8
 2793 006e 1A88     		ldrh	r2, [r3]
 2794 0070 3F4B     		ldr	r3, .L159+16
 2795 0072 1B88     		ldrh	r3, [r3]
 2796 0074 9A42     		cmp	r2, r3
 2797 0076 05D0     		beq	.L150
 2798              		.loc 1 1051 0 is_stmt 0 discriminator 1
 2799 0078 3A4B     		ldr	r3, .L159+4
 2800 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 69


 2801 007c 9BB2     		uxth	r3, r3
 2802 007e FA88     		ldrh	r2, [r7, #6]
 2803 0080 9A42     		cmp	r2, r3
 2804 0082 DBD1     		bne	.L151
 2805              	.L150:
1052:main.c        **** 		
1053:main.c        **** 		// scan the command buffer for commands
1054:main.c        **** 		i = iRead;
 2806              		.loc 1 1054 0 is_stmt 1
 2807 0084 3A4B     		ldr	r3, .L159+16
 2808 0086 1B88     		ldrh	r3, [r3]	@ movhi
 2809 0088 FB80     		strh	r3, [r7, #6]	@ movhi
 2810              	.L154:
1055:main.c        **** 		do
1056:main.c        **** 		{
1057:main.c        **** 			// if we see a carriage return or a line feed
1058:main.c        **** 			if((szCommandsBuffer[i] == '\n') || (szCommandsBuffer[i] == '\r'))
 2811              		.loc 1 1058 0
 2812 008a FB88     		ldrh	r3, [r7, #6]
 2813 008c 374A     		ldr	r2, .L159+12
 2814 008e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2815 0090 0A2B     		cmp	r3, #10
 2816 0092 04D0     		beq	.L152
 2817              		.loc 1 1058 0 is_stmt 0 discriminator 1
 2818 0094 FB88     		ldrh	r3, [r7, #6]
 2819 0096 354A     		ldr	r2, .L159+12
 2820 0098 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2821 009a 0D2B     		cmp	r3, #13
 2822 009c 09D1     		bne	.L153
 2823              	.L152:
1059:main.c        **** 			{
1060:main.c        **** 				cCommandsReady++; // indicate the buffer contains commands to be dealt with
 2824              		.loc 1 1060 0 is_stmt 1
 2825 009e 354B     		ldr	r3, .L159+20
 2826 00a0 1B88     		ldrh	r3, [r3]
 2827 00a2 0133     		adds	r3, r3, #1
 2828 00a4 9AB2     		uxth	r2, r3
 2829 00a6 334B     		ldr	r3, .L159+20
 2830 00a8 1A80     		strh	r2, [r3]	@ movhi
1061:main.c        **** 				szCommandsBuffer[i] = 0; // null terminate the string
 2831              		.loc 1 1061 0
 2832 00aa FB88     		ldrh	r3, [r7, #6]
 2833 00ac 2F4A     		ldr	r2, .L159+12
 2834 00ae 0021     		movs	r1, #0
 2835 00b0 D154     		strb	r1, [r2, r3]
 2836              	.L153:
1062:main.c        **** 			}
1063:main.c        **** 			i++;
 2837              		.loc 1 1063 0
 2838 00b2 FB88     		ldrh	r3, [r7, #6]
 2839 00b4 0133     		adds	r3, r3, #1
 2840 00b6 FB80     		strh	r3, [r7, #6]	@ movhi
1064:main.c        **** 			i = i % CIRCULAR_BUFFER_SIZE;
 2841              		.loc 1 1064 0
 2842 00b8 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2843 00ba C3F30B03 		ubfx	r3, r3, #0, #12
 2844 00be FB80     		strh	r3, [r7, #6]	@ movhi
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 70


1065:main.c        **** 		}while(i != iWrite);
 2845              		.loc 1 1065 0
 2846 00c0 294B     		ldr	r3, .L159+8
 2847 00c2 1B88     		ldrh	r3, [r3]
 2848 00c4 FA88     		ldrh	r2, [r7, #6]
 2849 00c6 9A42     		cmp	r2, r3
 2850 00c8 DFD1     		bne	.L154
 2851              	.L147:
1066:main.c        **** 	}
1067:main.c        **** 	
1068:main.c        **** 	i = 0;
 2852              		.loc 1 1068 0
 2853 00ca 0023     		movs	r3, #0
 2854 00cc FB80     		strh	r3, [r7, #6]	@ movhi
1069:main.c        **** 	if(cCommandsReady > 0 && bCommandReady == 0)
 2855              		.loc 1 1069 0
 2856 00ce 294B     		ldr	r3, .L159+20
 2857 00d0 1B88     		ldrh	r3, [r3]
 2858 00d2 002B     		cmp	r3, #0
 2859 00d4 40D0     		beq	.L158
 2860              		.loc 1 1069 0 is_stmt 0 discriminator 1
 2861 00d6 284B     		ldr	r3, .L159+24
 2862 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2863 00da 002B     		cmp	r3, #0
 2864 00dc 3CD1     		bne	.L158
1070:main.c        **** 	{
1071:main.c        **** 		while(szCommandsBuffer[iRead] != 0)
 2865              		.loc 1 1071 0 is_stmt 1
 2866 00de 17E0     		b	.L156
 2867              	.L157:
1072:main.c        **** 		{
1073:main.c        **** 			szCommand[i] = szCommandsBuffer[iRead];
 2868              		.loc 1 1073 0
 2869 00e0 FB88     		ldrh	r3, [r7, #6]
 2870 00e2 234A     		ldr	r2, .L159+16
 2871 00e4 1288     		ldrh	r2, [r2]
 2872 00e6 1146     		mov	r1, r2
 2873 00e8 204A     		ldr	r2, .L159+12
 2874 00ea 515C     		ldrb	r1, [r2, r1]	@ zero_extendqisi2
 2875 00ec 234A     		ldr	r2, .L159+28
 2876 00ee D154     		strb	r1, [r2, r3]
1074:main.c        **** 			i++;
 2877              		.loc 1 1074 0
 2878 00f0 FB88     		ldrh	r3, [r7, #6]
 2879 00f2 0133     		adds	r3, r3, #1
 2880 00f4 FB80     		strh	r3, [r7, #6]	@ movhi
1075:main.c        **** 			iRead++;
 2881              		.loc 1 1075 0
 2882 00f6 1E4B     		ldr	r3, .L159+16
 2883 00f8 1B88     		ldrh	r3, [r3]
 2884 00fa 0133     		adds	r3, r3, #1
 2885 00fc 9AB2     		uxth	r2, r3
 2886 00fe 1C4B     		ldr	r3, .L159+16
 2887 0100 1A80     		strh	r2, [r3]	@ movhi
1076:main.c        **** 			iRead = iRead % CIRCULAR_BUFFER_SIZE;
 2888              		.loc 1 1076 0
 2889 0102 1B4B     		ldr	r3, .L159+16
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 71


 2890 0104 1B88     		ldrh	r3, [r3]
 2891 0106 C3F30B03 		ubfx	r3, r3, #0, #12
 2892 010a 9AB2     		uxth	r2, r3
 2893 010c 184B     		ldr	r3, .L159+16
 2894 010e 1A80     		strh	r2, [r3]	@ movhi
 2895              	.L156:
1071:main.c        **** 		{
 2896              		.loc 1 1071 0
 2897 0110 174B     		ldr	r3, .L159+16
 2898 0112 1B88     		ldrh	r3, [r3]
 2899 0114 1A46     		mov	r2, r3
 2900 0116 154B     		ldr	r3, .L159+12
 2901 0118 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 2902 011a 002B     		cmp	r3, #0
 2903 011c E0D1     		bne	.L157
1077:main.c        **** 		}
1078:main.c        **** 		
1079:main.c        **** 		szCommand[i] = 0;
 2904              		.loc 1 1079 0
 2905 011e FB88     		ldrh	r3, [r7, #6]
 2906 0120 164A     		ldr	r2, .L159+28
 2907 0122 0021     		movs	r1, #0
 2908 0124 D154     		strb	r1, [r2, r3]
1080:main.c        **** 		iRead++;
 2909              		.loc 1 1080 0
 2910 0126 124B     		ldr	r3, .L159+16
 2911 0128 1B88     		ldrh	r3, [r3]
 2912 012a 0133     		adds	r3, r3, #1
 2913 012c 9AB2     		uxth	r2, r3
 2914 012e 104B     		ldr	r3, .L159+16
 2915 0130 1A80     		strh	r2, [r3]	@ movhi
1081:main.c        **** 		iRead = iRead % CIRCULAR_BUFFER_SIZE;
 2916              		.loc 1 1081 0
 2917 0132 0F4B     		ldr	r3, .L159+16
 2918 0134 1B88     		ldrh	r3, [r3]
 2919 0136 C3F30B03 		ubfx	r3, r3, #0, #12
 2920 013a 9AB2     		uxth	r2, r3
 2921 013c 0C4B     		ldr	r3, .L159+16
 2922 013e 1A80     		strh	r2, [r3]	@ movhi
1082:main.c        **** 		cCommandsReady--;
 2923              		.loc 1 1082 0
 2924 0140 0C4B     		ldr	r3, .L159+20
 2925 0142 1B88     		ldrh	r3, [r3]
 2926 0144 013B     		subs	r3, r3, #1
 2927 0146 9AB2     		uxth	r2, r3
 2928 0148 0A4B     		ldr	r3, .L159+20
 2929 014a 1A80     		strh	r2, [r3]	@ movhi
1083:main.c        **** 		if(i == 0)
 2930              		.loc 1 1083 0
 2931 014c FB88     		ldrh	r3, [r7, #6]
 2932 014e 002B     		cmp	r3, #0
 2933 0150 02D0     		beq	.L158
1084:main.c        **** 		{
1085:main.c        **** 			// this is a zero length command, nothing to do
1086:main.c        **** 		}
1087:main.c        **** 		else
1088:main.c        **** 		{
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 72


1089:main.c        **** 			// the command was at least 1 character, report it
1090:main.c        **** 			bCommandReady = 1;
 2934              		.loc 1 1090 0
 2935 0152 094B     		ldr	r3, .L159+24
 2936 0154 0122     		movs	r2, #1
 2937 0156 1A70     		strb	r2, [r3]
 2938              	.L158:
1091:main.c        **** 		}
1092:main.c        **** 	}
1093:main.c        **** }
 2939              		.loc 1 1093 0
 2940 0158 00BF     		nop
 2941 015a 0837     		adds	r7, r7, #8
 2942              		.cfi_def_cfa_offset 8
 2943 015c BD46     		mov	sp, r7
 2944              		.cfi_def_cfa_register 13
 2945              		@ sp needed
 2946 015e 80BD     		pop	{r7, pc}
 2947              	.L160:
 2948              		.align	2
 2949              	.L159:
 2950 0160 00000000 		.word	szTempBuffer
 2951 0164 00000000 		.word	cCharsReceived
 2952 0168 00000000 		.word	iWrite
 2953 016c 00000000 		.word	szCommandsBuffer
 2954 0170 00000000 		.word	iRead
 2955 0174 00000000 		.word	cCommandsReady
 2956 0178 00000000 		.word	bCommandReady
 2957 017c 00000000 		.word	szCommand
 2958              		.cfi_endproc
 2959              	.LFE68:
 2960              		.size	CommandCheck, .-CommandCheck
 2961              		.section	.text.PutString,"ax",%progbits
 2962              		.align	2
 2963              		.global	PutString
 2964              		.thumb
 2965              		.thumb_func
 2966              		.type	PutString, %function
 2967              	PutString:
 2968              	.LFB69:
1094:main.c        **** 
1095:main.c        **** void PutString(char * string)
1096:main.c        **** {
 2969              		.loc 1 1096 0
 2970              		.cfi_startproc
 2971              		@ args = 0, pretend = 0, frame = 8
 2972              		@ frame_needed = 1, uses_anonymous_args = 0
 2973 0000 80B5     		push	{r7, lr}
 2974              		.cfi_def_cfa_offset 8
 2975              		.cfi_offset 7, -8
 2976              		.cfi_offset 14, -4
 2977 0002 82B0     		sub	sp, sp, #8
 2978              		.cfi_def_cfa_offset 16
 2979 0004 00AF     		add	r7, sp, #0
 2980              		.cfi_def_cfa_register 7
 2981 0006 7860     		str	r0, [r7, #4]
1097:main.c        **** 	while(USBUART_CDCIsReady() == 0){};
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 73


 2982              		.loc 1 1097 0
 2983 0008 00BF     		nop
 2984              	.L162:
 2985              		.loc 1 1097 0 is_stmt 0 discriminator 1
 2986 000a FFF7FEFF 		bl	USBUART_CDCIsReady
 2987 000e 0346     		mov	r3, r0
 2988 0010 002B     		cmp	r3, #0
 2989 0012 FAD0     		beq	.L162
1098:main.c        **** 	USBUART_PutString(string);
 2990              		.loc 1 1098 0 is_stmt 1
 2991 0014 7868     		ldr	r0, [r7, #4]
 2992 0016 FFF7FEFF 		bl	USBUART_PutString
1099:main.c        **** }
 2993              		.loc 1 1099 0
 2994 001a 00BF     		nop
 2995 001c 0837     		adds	r7, r7, #8
 2996              		.cfi_def_cfa_offset 8
 2997 001e BD46     		mov	sp, r7
 2998              		.cfi_def_cfa_register 13
 2999              		@ sp needed
 3000 0020 80BD     		pop	{r7, pc}
 3001              		.cfi_endproc
 3002              	.LFE69:
 3003              		.size	PutString, .-PutString
 3004 0022 00BF     		.section	.text.PutChar,"ax",%progbits
 3005              		.align	2
 3006              		.global	PutChar
 3007              		.thumb
 3008              		.thumb_func
 3009              		.type	PutChar, %function
 3010              	PutChar:
 3011              	.LFB70:
1100:main.c        **** 
1101:main.c        **** void PutChar(char Data)
1102:main.c        **** {
 3012              		.loc 1 1102 0
 3013              		.cfi_startproc
 3014              		@ args = 0, pretend = 0, frame = 8
 3015              		@ frame_needed = 1, uses_anonymous_args = 0
 3016 0000 80B5     		push	{r7, lr}
 3017              		.cfi_def_cfa_offset 8
 3018              		.cfi_offset 7, -8
 3019              		.cfi_offset 14, -4
 3020 0002 82B0     		sub	sp, sp, #8
 3021              		.cfi_def_cfa_offset 16
 3022 0004 00AF     		add	r7, sp, #0
 3023              		.cfi_def_cfa_register 7
 3024 0006 0346     		mov	r3, r0
 3025 0008 FB71     		strb	r3, [r7, #7]
1103:main.c        **** 	while(USBUART_CDCIsReady() == 0){};
 3026              		.loc 1 1103 0
 3027 000a 00BF     		nop
 3028              	.L164:
 3029              		.loc 1 1103 0 is_stmt 0 discriminator 1
 3030 000c FFF7FEFF 		bl	USBUART_CDCIsReady
 3031 0010 0346     		mov	r3, r0
 3032 0012 002B     		cmp	r3, #0
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 74


 3033 0014 FAD0     		beq	.L164
1104:main.c        **** 	USBUART_PutChar(Data);
 3034              		.loc 1 1104 0 is_stmt 1
 3035 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3036 0018 1846     		mov	r0, r3
 3037 001a FFF7FEFF 		bl	USBUART_PutChar
1105:main.c        **** }
 3038              		.loc 1 1105 0
 3039 001e 00BF     		nop
 3040 0020 0837     		adds	r7, r7, #8
 3041              		.cfi_def_cfa_offset 8
 3042 0022 BD46     		mov	sp, r7
 3043              		.cfi_def_cfa_register 13
 3044              		@ sp needed
 3045 0024 80BD     		pop	{r7, pc}
 3046              		.cfi_endproc
 3047              	.LFE70:
 3048              		.size	PutChar, .-PutChar
 3049 0026 00BF     		.text
 3050              	.Letext0:
 3051              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3052              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3053              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3054              		.file 5 "Generated_Source\\PSoC5/CYDMAC.H"
 3055              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 3056              		.section	.debug_info,"",%progbits
 3057              	.Ldebug_info0:
 3058 0000 FF040000 		.4byte	0x4ff
 3059 0004 0400     		.2byte	0x4
 3060 0006 00000000 		.4byte	.Ldebug_abbrev0
 3061 000a 04       		.byte	0x4
 3062 000b 01       		.uleb128 0x1
 3063 000c 4B000000 		.4byte	.LASF70
 3064 0010 0C       		.byte	0xc
 3065 0011 76030000 		.4byte	.LASF71
 3066 0015 8D020000 		.4byte	.LASF72
 3067 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3068 001d 00000000 		.4byte	0
 3069 0021 00000000 		.4byte	.Ldebug_line0
 3070 0025 02       		.uleb128 0x2
 3071 0026 01       		.byte	0x1
 3072 0027 06       		.byte	0x6
 3073 0028 6A020000 		.4byte	.LASF0
 3074 002c 02       		.uleb128 0x2
 3075 002d 01       		.byte	0x1
 3076 002e 08       		.byte	0x8
 3077 002f 39020000 		.4byte	.LASF1
 3078 0033 02       		.uleb128 0x2
 3079 0034 02       		.byte	0x2
 3080 0035 05       		.byte	0x5
 3081 0036 38000000 		.4byte	.LASF2
 3082 003a 02       		.uleb128 0x2
 3083 003b 02       		.byte	0x2
 3084 003c 07       		.byte	0x7
 3085 003d 14030000 		.4byte	.LASF3
 3086 0041 03       		.uleb128 0x3
 3087 0042 B7030000 		.4byte	.LASF9
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 75


 3088 0046 02       		.byte	0x2
 3089 0047 3F       		.byte	0x3f
 3090 0048 4C000000 		.4byte	0x4c
 3091 004c 02       		.uleb128 0x2
 3092 004d 04       		.byte	0x4
 3093 004e 05       		.byte	0x5
 3094 004f CF010000 		.4byte	.LASF4
 3095 0053 02       		.uleb128 0x2
 3096 0054 04       		.byte	0x4
 3097 0055 07       		.byte	0x7
 3098 0056 82030000 		.4byte	.LASF5
 3099 005a 02       		.uleb128 0x2
 3100 005b 08       		.byte	0x8
 3101 005c 05       		.byte	0x5
 3102 005d B2010000 		.4byte	.LASF6
 3103 0061 02       		.uleb128 0x2
 3104 0062 08       		.byte	0x8
 3105 0063 07       		.byte	0x7
 3106 0064 76020000 		.4byte	.LASF7
 3107 0068 04       		.uleb128 0x4
 3108 0069 04       		.byte	0x4
 3109 006a 05       		.byte	0x5
 3110 006b 696E7400 		.ascii	"int\000"
 3111 006f 02       		.uleb128 0x2
 3112 0070 04       		.byte	0x4
 3113 0071 07       		.byte	0x7
 3114 0072 ED020000 		.4byte	.LASF8
 3115 0076 03       		.uleb128 0x3
 3116 0077 38030000 		.4byte	.LASF10
 3117 007b 03       		.byte	0x3
 3118 007c 2C       		.byte	0x2c
 3119 007d 41000000 		.4byte	0x41
 3120 0081 05       		.uleb128 0x5
 3121 0082 29010000 		.4byte	.LASF11
 3122 0086 04       		.byte	0x4
 3123 0087 E901     		.2byte	0x1e9
 3124 0089 2C000000 		.4byte	0x2c
 3125 008d 05       		.uleb128 0x5
 3126 008e 03010000 		.4byte	.LASF12
 3127 0092 04       		.byte	0x4
 3128 0093 EA01     		.2byte	0x1ea
 3129 0095 3A000000 		.4byte	0x3a
 3130 0099 05       		.uleb128 0x5
 3131 009a 6F030000 		.4byte	.LASF13
 3132 009e 04       		.byte	0x4
 3133 009f EB01     		.2byte	0x1eb
 3134 00a1 53000000 		.4byte	0x53
 3135 00a5 05       		.uleb128 0x5
 3136 00a6 94030000 		.4byte	.LASF14
 3137 00aa 04       		.byte	0x4
 3138 00ab EE01     		.2byte	0x1ee
 3139 00ad 4C000000 		.4byte	0x4c
 3140 00b1 02       		.uleb128 0x2
 3141 00b2 04       		.byte	0x4
 3142 00b3 04       		.byte	0x4
 3143 00b4 99010000 		.4byte	.LASF15
 3144 00b8 02       		.uleb128 0x2
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 76


 3145 00b9 08       		.byte	0x8
 3146 00ba 04       		.byte	0x4
 3147 00bb 9A030000 		.4byte	.LASF16
 3148 00bf 02       		.uleb128 0x2
 3149 00c0 01       		.byte	0x1
 3150 00c1 08       		.byte	0x8
 3151 00c2 2E030000 		.4byte	.LASF17
 3152 00c6 05       		.uleb128 0x5
 3153 00c7 7D030000 		.4byte	.LASF18
 3154 00cb 04       		.byte	0x4
 3155 00cc 9302     		.2byte	0x293
 3156 00ce D2000000 		.4byte	0xd2
 3157 00d2 06       		.uleb128 0x6
 3158 00d3 81000000 		.4byte	0x81
 3159 00d7 05       		.uleb128 0x5
 3160 00d8 32000000 		.4byte	.LASF19
 3161 00dc 04       		.byte	0x4
 3162 00dd 9402     		.2byte	0x294
 3163 00df E3000000 		.4byte	0xe3
 3164 00e3 06       		.uleb128 0x6
 3165 00e4 8D000000 		.4byte	0x8d
 3166 00e8 02       		.uleb128 0x2
 3167 00e9 08       		.byte	0x8
 3168 00ea 04       		.byte	0x4
 3169 00eb 25020000 		.4byte	.LASF20
 3170 00ef 02       		.uleb128 0x2
 3171 00f0 04       		.byte	0x4
 3172 00f1 07       		.byte	0x7
 3173 00f2 42000000 		.4byte	.LASF21
 3174 00f6 07       		.uleb128 0x7
 3175 00f7 04       		.byte	0x4
 3176 00f8 BF000000 		.4byte	0xbf
 3177 00fc 08       		.uleb128 0x8
 3178 00fd D2000000 		.4byte	0xd2
 3179 0101 0C010000 		.4byte	0x10c
 3180 0105 09       		.uleb128 0x9
 3181 0106 EF000000 		.4byte	0xef
 3182 010a 03       		.byte	0x3
 3183 010b 00       		.byte	0
 3184 010c 0A       		.uleb128 0xa
 3185 010d 00000000 		.4byte	.LASF73
 3186 0111 08       		.byte	0x8
 3187 0112 05       		.byte	0x5
 3188 0113 59       		.byte	0x59
 3189 0114 31010000 		.4byte	0x131
 3190 0118 0B       		.uleb128 0xb
 3191 0119 54443000 		.ascii	"TD0\000"
 3192 011d 05       		.byte	0x5
 3193 011e 5B       		.byte	0x5b
 3194 011f 31010000 		.4byte	0x131
 3195 0123 00       		.byte	0
 3196 0124 0B       		.uleb128 0xb
 3197 0125 54443100 		.ascii	"TD1\000"
 3198 0129 05       		.byte	0x5
 3199 012a 5C       		.byte	0x5c
 3200 012b 36010000 		.4byte	0x136
 3201 012f 04       		.byte	0x4
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 77


 3202 0130 00       		.byte	0
 3203 0131 06       		.uleb128 0x6
 3204 0132 FC000000 		.4byte	0xfc
 3205 0136 06       		.uleb128 0x6
 3206 0137 FC000000 		.4byte	0xfc
 3207 013b 03       		.uleb128 0x3
 3208 013c 09030000 		.4byte	.LASF22
 3209 0140 05       		.byte	0x5
 3210 0141 5E       		.byte	0x5e
 3211 0142 0C010000 		.4byte	0x10c
 3212 0146 0C       		.uleb128 0xc
 3213 0147 33030000 		.4byte	.LASF35
 3214 014b 01       		.byte	0x1
 3215 014c 82       		.byte	0x82
 3216 014d 68000000 		.4byte	0x68
 3217 0151 00000000 		.4byte	.LFB64
 3218 0155 10110000 		.4byte	.LFE64-.LFB64
 3219 0159 01       		.uleb128 0x1
 3220 015a 9C       		.byte	0x9c
 3221 015b F8010000 		.4byte	0x1f8
 3222 015f 0D       		.uleb128 0xd
 3223 0160 27030000 		.4byte	.LASF23
 3224 0164 01       		.byte	0x1
 3225 0165 84       		.byte	0x84
 3226 0166 81000000 		.4byte	0x81
 3227 016a 02       		.uleb128 0x2
 3228 016b 91       		.byte	0x91
 3229 016c 53       		.sleb128 -45
 3230 016d 0D       		.uleb128 0xd
 3231 016e 9F010000 		.4byte	.LASF24
 3232 0172 01       		.byte	0x1
 3233 0173 85       		.byte	0x85
 3234 0174 8D000000 		.4byte	0x8d
 3235 0178 02       		.uleb128 0x2
 3236 0179 91       		.byte	0x91
 3237 017a 50       		.sleb128 -48
 3238 017b 0E       		.uleb128 0xe
 3239 017c 70737A00 		.ascii	"psz\000"
 3240 0180 01       		.byte	0x1
 3241 0181 86       		.byte	0x86
 3242 0182 F6000000 		.4byte	0xf6
 3243 0186 02       		.uleb128 0x2
 3244 0187 91       		.byte	0x91
 3245 0188 60       		.sleb128 -32
 3246 0189 0D       		.uleb128 0xd
 3247 018a 47020000 		.4byte	.LASF25
 3248 018e 01       		.byte	0x1
 3249 018f 87       		.byte	0x87
 3250 0190 8D000000 		.4byte	0x8d
 3251 0194 02       		.uleb128 0x2
 3252 0195 91       		.byte	0x91
 3253 0196 4E       		.sleb128 -50
 3254 0197 0D       		.uleb128 0xd
 3255 0198 42040000 		.4byte	.LASF26
 3256 019c 01       		.byte	0x1
 3257 019d 87       		.byte	0x87
 3258 019e 8D000000 		.4byte	0x8d
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 78


 3259 01a2 02       		.uleb128 0x2
 3260 01a3 91       		.byte	0x91
 3261 01a4 6E       		.sleb128 -18
 3262 01a5 0E       		.uleb128 0xe
 3263 01a6 6900     		.ascii	"i\000"
 3264 01a8 01       		.byte	0x1
 3265 01a9 87       		.byte	0x87
 3266 01aa 8D000000 		.4byte	0x8d
 3267 01ae 02       		.uleb128 0x2
 3268 01af 91       		.byte	0x91
 3269 01b0 6C       		.sleb128 -20
 3270 01b1 0D       		.uleb128 0xd
 3271 01b2 F9000000 		.4byte	.LASF27
 3272 01b6 01       		.byte	0x1
 3273 01b7 88       		.byte	0x88
 3274 01b8 99000000 		.4byte	0x99
 3275 01bc 02       		.uleb128 0x2
 3276 01bd 91       		.byte	0x91
 3277 01be 68       		.sleb128 -24
 3278 01bf 0D       		.uleb128 0xd
 3279 01c0 0A010000 		.4byte	.LASF28
 3280 01c4 01       		.byte	0x1
 3281 01c5 89       		.byte	0x89
 3282 01c6 99000000 		.4byte	0x99
 3283 01ca 02       		.uleb128 0x2
 3284 01cb 91       		.byte	0x91
 3285 01cc 5C       		.sleb128 -36
 3286 01cd 0D       		.uleb128 0xd
 3287 01ce 79010000 		.4byte	.LASF29
 3288 01d2 01       		.byte	0x1
 3289 01d3 8A       		.byte	0x8a
 3290 01d4 99000000 		.4byte	0x99
 3291 01d8 02       		.uleb128 0x2
 3292 01d9 91       		.byte	0x91
 3293 01da 58       		.sleb128 -40
 3294 01db 0D       		.uleb128 0xd
 3295 01dc AD010000 		.4byte	.LASF30
 3296 01e0 01       		.byte	0x1
 3297 01e1 8B       		.byte	0x8b
 3298 01e2 B1000000 		.4byte	0xb1
 3299 01e6 02       		.uleb128 0x2
 3300 01e7 91       		.byte	0x91
 3301 01e8 54       		.sleb128 -44
 3302 01e9 0D       		.uleb128 0xd
 3303 01ea 6F010000 		.4byte	.LASF31
 3304 01ee 01       		.byte	0x1
 3305 01ef 8C       		.byte	0x8c
 3306 01f0 B1000000 		.4byte	0xb1
 3307 01f4 02       		.uleb128 0x2
 3308 01f5 91       		.byte	0x91
 3309 01f6 64       		.sleb128 -28
 3310 01f7 00       		.byte	0
 3311 01f8 0F       		.uleb128 0xf
 3312 01f9 42010000 		.4byte	.LASF32
 3313 01fd 01       		.byte	0x1
 3314 01fe 7C03     		.2byte	0x37c
 3315 0200 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 79


 3316 0204 50010000 		.4byte	.LFE65-.LFB65
 3317 0208 01       		.uleb128 0x1
 3318 0209 9C       		.byte	0x9c
 3319 020a 0F       		.uleb128 0xf
 3320 020b 7F010000 		.4byte	.LASF33
 3321 020f 01       		.byte	0x1
 3322 0210 CC03     		.2byte	0x3cc
 3323 0212 00000000 		.4byte	.LFB66
 3324 0216 30010000 		.4byte	.LFE66-.LFB66
 3325 021a 01       		.uleb128 0x1
 3326 021b 9C       		.byte	0x9c
 3327 021c 10       		.uleb128 0x10
 3328 021d 2F010000 		.4byte	.LASF74
 3329 0221 01       		.byte	0x1
 3330 0222 E903     		.2byte	0x3e9
 3331 0224 8D000000 		.4byte	0x8d
 3332 0228 00000000 		.4byte	.LFB67
 3333 022c 60000000 		.4byte	.LFE67-.LFB67
 3334 0230 01       		.uleb128 0x1
 3335 0231 9C       		.byte	0x9c
 3336 0232 55020000 		.4byte	0x255
 3337 0236 11       		.uleb128 0x11
 3338 0237 AE030000 		.4byte	.LASF39
 3339 023b 01       		.byte	0x1
 3340 023c E903     		.2byte	0x3e9
 3341 023e 81000000 		.4byte	0x81
 3342 0242 02       		.uleb128 0x2
 3343 0243 91       		.byte	0x91
 3344 0244 6F       		.sleb128 -17
 3345 0245 12       		.uleb128 0x12
 3346 0246 12010000 		.4byte	.LASF34
 3347 024a 01       		.byte	0x1
 3348 024b EB03     		.2byte	0x3eb
 3349 024d 8D000000 		.4byte	0x8d
 3350 0251 02       		.uleb128 0x2
 3351 0252 91       		.byte	0x91
 3352 0253 76       		.sleb128 -10
 3353 0254 00       		.byte	0
 3354 0255 13       		.uleb128 0x13
 3355 0256 4C020000 		.4byte	.LASF36
 3356 025a 01       		.byte	0x1
 3357 025b FB03     		.2byte	0x3fb
 3358 025d 00000000 		.4byte	.LFB68
 3359 0261 80010000 		.4byte	.LFE68-.LFB68
 3360 0265 01       		.uleb128 0x1
 3361 0266 9C       		.byte	0x9c
 3362 0267 88020000 		.4byte	0x288
 3363 026b 14       		.uleb128 0x14
 3364 026c 6900     		.ascii	"i\000"
 3365 026e 01       		.byte	0x1
 3366 026f FD03     		.2byte	0x3fd
 3367 0271 8D000000 		.4byte	0x8d
 3368 0275 02       		.uleb128 0x2
 3369 0276 91       		.byte	0x91
 3370 0277 76       		.sleb128 -10
 3371 0278 12       		.uleb128 0x12
 3372 0279 E6030000 		.4byte	.LASF37
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 80


 3373 027d 01       		.byte	0x1
 3374 027e FD03     		.2byte	0x3fd
 3375 0280 8D000000 		.4byte	0x8d
 3376 0284 02       		.uleb128 0x2
 3377 0285 91       		.byte	0x91
 3378 0286 74       		.sleb128 -12
 3379 0287 00       		.byte	0
 3380 0288 13       		.uleb128 0x13
 3381 0289 DC030000 		.4byte	.LASF38
 3382 028d 01       		.byte	0x1
 3383 028e 4704     		.2byte	0x447
 3384 0290 00000000 		.4byte	.LFB69
 3385 0294 22000000 		.4byte	.LFE69-.LFB69
 3386 0298 01       		.uleb128 0x1
 3387 0299 9C       		.byte	0x9c
 3388 029a AE020000 		.4byte	0x2ae
 3389 029e 11       		.uleb128 0x11
 3390 029f DF010000 		.4byte	.LASF40
 3391 02a3 01       		.byte	0x1
 3392 02a4 4704     		.2byte	0x447
 3393 02a6 F6000000 		.4byte	0xf6
 3394 02aa 02       		.uleb128 0x2
 3395 02ab 91       		.byte	0x91
 3396 02ac 74       		.sleb128 -12
 3397 02ad 00       		.byte	0
 3398 02ae 13       		.uleb128 0x13
 3399 02af 31020000 		.4byte	.LASF41
 3400 02b3 01       		.byte	0x1
 3401 02b4 4D04     		.2byte	0x44d
 3402 02b6 00000000 		.4byte	.LFB70
 3403 02ba 26000000 		.4byte	.LFE70-.LFB70
 3404 02be 01       		.uleb128 0x1
 3405 02bf 9C       		.byte	0x9c
 3406 02c0 D4020000 		.4byte	0x2d4
 3407 02c4 11       		.uleb128 0x11
 3408 02c5 E6010000 		.4byte	.LASF42
 3409 02c9 01       		.byte	0x1
 3410 02ca 4D04     		.2byte	0x44d
 3411 02cc BF000000 		.4byte	0xbf
 3412 02d0 02       		.uleb128 0x2
 3413 02d1 91       		.byte	0x91
 3414 02d2 77       		.sleb128 -9
 3415 02d3 00       		.byte	0
 3416 02d4 15       		.uleb128 0x15
 3417 02d5 F4030000 		.4byte	.LASF43
 3418 02d9 06       		.byte	0x6
 3419 02da 1207     		.2byte	0x712
 3420 02dc E0020000 		.4byte	0x2e0
 3421 02e0 06       		.uleb128 0x6
 3422 02e1 76000000 		.4byte	0x76
 3423 02e5 16       		.uleb128 0x16
 3424 02e6 12020000 		.4byte	.LASF44
 3425 02ea 01       		.byte	0x1
 3426 02eb 47       		.byte	0x47
 3427 02ec 81000000 		.4byte	0x81
 3428 02f0 05       		.uleb128 0x5
 3429 02f1 03       		.byte	0x3
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 81


 3430 02f2 00000000 		.4byte	DMA_Channel_1_Chan
 3431 02f6 08       		.uleb128 0x8
 3432 02f7 81000000 		.4byte	0x81
 3433 02fb 06030000 		.4byte	0x306
 3434 02ff 09       		.uleb128 0x9
 3435 0300 EF000000 		.4byte	0xef
 3436 0304 00       		.byte	0
 3437 0305 00       		.byte	0
 3438 0306 16       		.uleb128 0x16
 3439 0307 31040000 		.4byte	.LASF45
 3440 030b 01       		.byte	0x1
 3441 030c 48       		.byte	0x48
 3442 030d F6020000 		.4byte	0x2f6
 3443 0311 05       		.uleb128 0x5
 3444 0312 03       		.byte	0x3
 3445 0313 00000000 		.4byte	DMA_Channel_1_TD
 3446 0317 16       		.uleb128 0x16
 3447 0318 E6000000 		.4byte	.LASF46
 3448 031c 01       		.byte	0x1
 3449 031d 4C       		.byte	0x4c
 3450 031e 81000000 		.4byte	0x81
 3451 0322 05       		.uleb128 0x5
 3452 0323 03       		.byte	0x3
 3453 0324 00000000 		.4byte	DMA_Channel_2_Chan
 3454 0328 16       		.uleb128 0x16
 3455 0329 12000000 		.4byte	.LASF47
 3456 032d 01       		.byte	0x1
 3457 032e 4D       		.byte	0x4d
 3458 032f F6020000 		.4byte	0x2f6
 3459 0333 05       		.uleb128 0x5
 3460 0334 03       		.byte	0x3
 3461 0335 00000000 		.4byte	DMA_Channel_2_TD
 3462 0339 08       		.uleb128 0x8
 3463 033a 8D000000 		.4byte	0x8d
 3464 033e 4A030000 		.4byte	0x34a
 3465 0342 17       		.uleb128 0x17
 3466 0343 EF000000 		.4byte	0xef
 3467 0347 FF03     		.2byte	0x3ff
 3468 0349 00       		.byte	0
 3469 034a 16       		.uleb128 0x16
 3470 034b FA020000 		.4byte	.LASF48
 3471 034f 01       		.byte	0x1
 3472 0350 50       		.byte	0x50
 3473 0351 39030000 		.4byte	0x339
 3474 0355 05       		.uleb128 0x5
 3475 0356 03       		.byte	0x3
 3476 0357 00000000 		.4byte	Channel_1_Data
 3477 035b 16       		.uleb128 0x16
 3478 035c 22040000 		.4byte	.LASF49
 3479 0360 01       		.byte	0x1
 3480 0361 51       		.byte	0x51
 3481 0362 39030000 		.4byte	0x339
 3482 0366 05       		.uleb128 0x5
 3483 0367 03       		.byte	0x3
 3484 0368 00000000 		.4byte	Channel_2_Data
 3485 036c 08       		.uleb128 0x8
 3486 036d BF000000 		.4byte	0xbf
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 82


 3487 0371 7C030000 		.4byte	0x37c
 3488 0375 09       		.uleb128 0x9
 3489 0376 EF000000 		.4byte	0xef
 3490 037a 3F       		.byte	0x3f
 3491 037b 00       		.byte	0
 3492 037c 16       		.uleb128 0x16
 3493 037d D9000000 		.4byte	.LASF50
 3494 0381 01       		.byte	0x1
 3495 0382 55       		.byte	0x55
 3496 0383 6C030000 		.4byte	0x36c
 3497 0387 05       		.uleb128 0x5
 3498 0388 03       		.byte	0x3
 3499 0389 00000000 		.4byte	szTempBuffer
 3500 038d 16       		.uleb128 0x16
 3501 038e 8A010000 		.4byte	.LASF51
 3502 0392 01       		.byte	0x1
 3503 0393 56       		.byte	0x56
 3504 0394 81000000 		.4byte	0x81
 3505 0398 05       		.uleb128 0x5
 3506 0399 03       		.byte	0x3
 3507 039a 00000000 		.4byte	cCharsReceived
 3508 039e 08       		.uleb128 0x8
 3509 039f BF000000 		.4byte	0xbf
 3510 03a3 AF030000 		.4byte	0x3af
 3511 03a7 17       		.uleb128 0x17
 3512 03a8 EF000000 		.4byte	0xef
 3513 03ac FF0F     		.2byte	0xfff
 3514 03ae 00       		.byte	0
 3515 03af 16       		.uleb128 0x16
 3516 03b0 59020000 		.4byte	.LASF52
 3517 03b4 01       		.byte	0x1
 3518 03b5 59       		.byte	0x59
 3519 03b6 9E030000 		.4byte	0x39e
 3520 03ba 05       		.uleb128 0x5
 3521 03bb 03       		.byte	0x3
 3522 03bc 00000000 		.4byte	szCommandsBuffer
 3523 03c0 16       		.uleb128 0x16
 3524 03c1 56030000 		.4byte	.LASF53
 3525 03c5 01       		.byte	0x1
 3526 03c6 5A       		.byte	0x5a
 3527 03c7 8D000000 		.4byte	0x8d
 3528 03cb 05       		.uleb128 0x5
 3529 03cc 03       		.byte	0x3
 3530 03cd 00000000 		.4byte	iRead
 3531 03d1 16       		.uleb128 0x16
 3532 03d2 D8010000 		.4byte	.LASF54
 3533 03d6 01       		.byte	0x1
 3534 03d7 5A       		.byte	0x5a
 3535 03d8 8D000000 		.4byte	0x8d
 3536 03dc 05       		.uleb128 0x5
 3537 03dd 03       		.byte	0x3
 3538 03de 00000000 		.4byte	iWrite
 3539 03e2 16       		.uleb128 0x16
 3540 03e3 52010000 		.4byte	.LASF55
 3541 03e7 01       		.byte	0x1
 3542 03e8 5B       		.byte	0x5b
 3543 03e9 8D000000 		.4byte	0x8d
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 83


 3544 03ed 05       		.uleb128 0x5
 3545 03ee 03       		.byte	0x3
 3546 03ef 00000000 		.4byte	cCommandsReady
 3547 03f3 16       		.uleb128 0x16
 3548 03f4 C1030000 		.4byte	.LASF56
 3549 03f8 01       		.byte	0x1
 3550 03f9 5D       		.byte	0x5d
 3551 03fa 6C030000 		.4byte	0x36c
 3552 03fe 05       		.uleb128 0x5
 3553 03ff 03       		.byte	0x3
 3554 0400 00000000 		.4byte	szCommand
 3555 0404 16       		.uleb128 0x16
 3556 0405 61010000 		.4byte	.LASF57
 3557 0409 01       		.byte	0x1
 3558 040a 5E       		.byte	0x5e
 3559 040b 81000000 		.4byte	0x81
 3560 040f 05       		.uleb128 0x5
 3561 0410 03       		.byte	0x3
 3562 0411 00000000 		.4byte	bCommandReady
 3563 0415 16       		.uleb128 0x16
 3564 0416 23000000 		.4byte	.LASF58
 3565 041a 01       		.byte	0x1
 3566 041b 61       		.byte	0x61
 3567 041c 81000000 		.4byte	0x81
 3568 0420 05       		.uleb128 0x5
 3569 0421 03       		.byte	0x3
 3570 0422 00000000 		.4byte	trigger_source
 3571 0426 08       		.uleb128 0x8
 3572 0427 81000000 		.4byte	0x81
 3573 042b 36040000 		.4byte	0x436
 3574 042f 09       		.uleb128 0x9
 3575 0430 EF000000 		.4byte	0xef
 3576 0434 3F       		.byte	0x3f
 3577 0435 00       		.byte	0
 3578 0436 16       		.uleb128 0x16
 3579 0437 EB010000 		.4byte	.LASF59
 3580 043b 01       		.byte	0x1
 3581 043c 66       		.byte	0x66
 3582 043d 26040000 		.4byte	0x426
 3583 0441 05       		.uleb128 0x5
 3584 0442 03       		.byte	0x3
 3585 0443 00000000 		.4byte	USB_Out_Buffer
 3586 0447 08       		.uleb128 0x8
 3587 0448 81000000 		.4byte	0x81
 3588 044c 58040000 		.4byte	0x458
 3589 0450 17       		.uleb128 0x17
 3590 0451 EF000000 		.4byte	0xef
 3591 0455 FF07     		.2byte	0x7ff
 3592 0457 00       		.byte	0
 3593 0458 16       		.uleb128 0x16
 3594 0459 CB030000 		.4byte	.LASF60
 3595 045d 01       		.byte	0x1
 3596 045e 6A       		.byte	0x6a
 3597 045f 47040000 		.4byte	0x447
 3598 0463 05       		.uleb128 0x5
 3599 0464 03       		.byte	0x3
 3600 0465 00000000 		.4byte	WaveformA_Buffer
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 84


 3601 0469 16       		.uleb128 0x16
 3602 046a 01040000 		.4byte	.LASF61
 3603 046e 01       		.byte	0x1
 3604 046f 6B       		.byte	0x6b
 3605 0470 47040000 		.4byte	0x447
 3606 0474 05       		.uleb128 0x5
 3607 0475 03       		.byte	0x3
 3608 0476 00000000 		.4byte	WaveformA_Temp_Buffer
 3609 047a 16       		.uleb128 0x16
 3610 047b 17040000 		.4byte	.LASF62
 3611 047f 01       		.byte	0x1
 3612 0480 6C       		.byte	0x6c
 3613 0481 81000000 		.4byte	0x81
 3614 0485 05       		.uleb128 0x5
 3615 0486 03       		.byte	0x3
 3616 0487 00000000 		.4byte	wavea_gain
 3617 048b 16       		.uleb128 0x16
 3618 048c FA010000 		.4byte	.LASF63
 3619 0490 01       		.byte	0x1
 3620 0491 6D       		.byte	0x6d
 3621 0492 81000000 		.4byte	0x81
 3622 0496 05       		.uleb128 0x5
 3623 0497 03       		.byte	0x3
 3624 0498 00000000 		.4byte	wavea_offset
 3625 049c 16       		.uleb128 0x16
 3626 049d 18010000 		.4byte	.LASF64
 3627 04a1 01       		.byte	0x1
 3628 04a2 6E       		.byte	0x6e
 3629 04a3 47040000 		.4byte	0x447
 3630 04a7 05       		.uleb128 0x5
 3631 04a8 03       		.byte	0x3
 3632 04a9 00000000 		.4byte	WaveformB_Buffer
 3633 04ad 16       		.uleb128 0x16
 3634 04ae 40030000 		.4byte	.LASF65
 3635 04b2 01       		.byte	0x1
 3636 04b3 6F       		.byte	0x6f
 3637 04b4 47040000 		.4byte	0x447
 3638 04b8 05       		.uleb128 0x5
 3639 04b9 03       		.byte	0x3
 3640 04ba 00000000 		.4byte	WaveformB_Temp_Buffer
 3641 04be 16       		.uleb128 0x16
 3642 04bf 07020000 		.4byte	.LASF66
 3643 04c3 01       		.byte	0x1
 3644 04c4 70       		.byte	0x70
 3645 04c5 81000000 		.4byte	0x81
 3646 04c9 05       		.uleb128 0x5
 3647 04ca 03       		.byte	0x3
 3648 04cb 00000000 		.4byte	waveb_gain
 3649 04cf 16       		.uleb128 0x16
 3650 04d0 A1030000 		.4byte	.LASF67
 3651 04d4 01       		.byte	0x1
 3652 04d5 71       		.byte	0x71
 3653 04d6 81000000 		.4byte	0x81
 3654 04da 05       		.uleb128 0x5
 3655 04db 03       		.byte	0x3
 3656 04dc 00000000 		.4byte	waveb_offset
 3657 04e0 16       		.uleb128 0x16
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 85


 3658 04e1 C0010000 		.4byte	.LASF68
 3659 04e5 01       		.byte	0x1
 3660 04e6 75       		.byte	0x75
 3661 04e7 81000000 		.4byte	0x81
 3662 04eb 05       		.uleb128 0x5
 3663 04ec 03       		.byte	0x3
 3664 04ed 00000000 		.4byte	Noise_Adjusted
 3665 04f1 16       		.uleb128 0x16
 3666 04f2 5C030000 		.4byte	.LASF69
 3667 04f6 01       		.byte	0x1
 3668 04f7 7A       		.byte	0x7a
 3669 04f8 81000000 		.4byte	0x81
 3670 04fc 05       		.uleb128 0x5
 3671 04fd 03       		.byte	0x3
 3672 04fe 00000000 		.4byte	Digital_AutoUpdate
 3673 0502 00       		.byte	0
 3674              		.section	.debug_abbrev,"",%progbits
 3675              	.Ldebug_abbrev0:
 3676 0000 01       		.uleb128 0x1
 3677 0001 11       		.uleb128 0x11
 3678 0002 01       		.byte	0x1
 3679 0003 25       		.uleb128 0x25
 3680 0004 0E       		.uleb128 0xe
 3681 0005 13       		.uleb128 0x13
 3682 0006 0B       		.uleb128 0xb
 3683 0007 03       		.uleb128 0x3
 3684 0008 0E       		.uleb128 0xe
 3685 0009 1B       		.uleb128 0x1b
 3686 000a 0E       		.uleb128 0xe
 3687 000b 55       		.uleb128 0x55
 3688 000c 17       		.uleb128 0x17
 3689 000d 11       		.uleb128 0x11
 3690 000e 01       		.uleb128 0x1
 3691 000f 10       		.uleb128 0x10
 3692 0010 17       		.uleb128 0x17
 3693 0011 00       		.byte	0
 3694 0012 00       		.byte	0
 3695 0013 02       		.uleb128 0x2
 3696 0014 24       		.uleb128 0x24
 3697 0015 00       		.byte	0
 3698 0016 0B       		.uleb128 0xb
 3699 0017 0B       		.uleb128 0xb
 3700 0018 3E       		.uleb128 0x3e
 3701 0019 0B       		.uleb128 0xb
 3702 001a 03       		.uleb128 0x3
 3703 001b 0E       		.uleb128 0xe
 3704 001c 00       		.byte	0
 3705 001d 00       		.byte	0
 3706 001e 03       		.uleb128 0x3
 3707 001f 16       		.uleb128 0x16
 3708 0020 00       		.byte	0
 3709 0021 03       		.uleb128 0x3
 3710 0022 0E       		.uleb128 0xe
 3711 0023 3A       		.uleb128 0x3a
 3712 0024 0B       		.uleb128 0xb
 3713 0025 3B       		.uleb128 0x3b
 3714 0026 0B       		.uleb128 0xb
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 86


 3715 0027 49       		.uleb128 0x49
 3716 0028 13       		.uleb128 0x13
 3717 0029 00       		.byte	0
 3718 002a 00       		.byte	0
 3719 002b 04       		.uleb128 0x4
 3720 002c 24       		.uleb128 0x24
 3721 002d 00       		.byte	0
 3722 002e 0B       		.uleb128 0xb
 3723 002f 0B       		.uleb128 0xb
 3724 0030 3E       		.uleb128 0x3e
 3725 0031 0B       		.uleb128 0xb
 3726 0032 03       		.uleb128 0x3
 3727 0033 08       		.uleb128 0x8
 3728 0034 00       		.byte	0
 3729 0035 00       		.byte	0
 3730 0036 05       		.uleb128 0x5
 3731 0037 16       		.uleb128 0x16
 3732 0038 00       		.byte	0
 3733 0039 03       		.uleb128 0x3
 3734 003a 0E       		.uleb128 0xe
 3735 003b 3A       		.uleb128 0x3a
 3736 003c 0B       		.uleb128 0xb
 3737 003d 3B       		.uleb128 0x3b
 3738 003e 05       		.uleb128 0x5
 3739 003f 49       		.uleb128 0x49
 3740 0040 13       		.uleb128 0x13
 3741 0041 00       		.byte	0
 3742 0042 00       		.byte	0
 3743 0043 06       		.uleb128 0x6
 3744 0044 35       		.uleb128 0x35
 3745 0045 00       		.byte	0
 3746 0046 49       		.uleb128 0x49
 3747 0047 13       		.uleb128 0x13
 3748 0048 00       		.byte	0
 3749 0049 00       		.byte	0
 3750 004a 07       		.uleb128 0x7
 3751 004b 0F       		.uleb128 0xf
 3752 004c 00       		.byte	0
 3753 004d 0B       		.uleb128 0xb
 3754 004e 0B       		.uleb128 0xb
 3755 004f 49       		.uleb128 0x49
 3756 0050 13       		.uleb128 0x13
 3757 0051 00       		.byte	0
 3758 0052 00       		.byte	0
 3759 0053 08       		.uleb128 0x8
 3760 0054 01       		.uleb128 0x1
 3761 0055 01       		.byte	0x1
 3762 0056 49       		.uleb128 0x49
 3763 0057 13       		.uleb128 0x13
 3764 0058 01       		.uleb128 0x1
 3765 0059 13       		.uleb128 0x13
 3766 005a 00       		.byte	0
 3767 005b 00       		.byte	0
 3768 005c 09       		.uleb128 0x9
 3769 005d 21       		.uleb128 0x21
 3770 005e 00       		.byte	0
 3771 005f 49       		.uleb128 0x49
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 87


 3772 0060 13       		.uleb128 0x13
 3773 0061 2F       		.uleb128 0x2f
 3774 0062 0B       		.uleb128 0xb
 3775 0063 00       		.byte	0
 3776 0064 00       		.byte	0
 3777 0065 0A       		.uleb128 0xa
 3778 0066 13       		.uleb128 0x13
 3779 0067 01       		.byte	0x1
 3780 0068 03       		.uleb128 0x3
 3781 0069 0E       		.uleb128 0xe
 3782 006a 0B       		.uleb128 0xb
 3783 006b 0B       		.uleb128 0xb
 3784 006c 3A       		.uleb128 0x3a
 3785 006d 0B       		.uleb128 0xb
 3786 006e 3B       		.uleb128 0x3b
 3787 006f 0B       		.uleb128 0xb
 3788 0070 01       		.uleb128 0x1
 3789 0071 13       		.uleb128 0x13
 3790 0072 00       		.byte	0
 3791 0073 00       		.byte	0
 3792 0074 0B       		.uleb128 0xb
 3793 0075 0D       		.uleb128 0xd
 3794 0076 00       		.byte	0
 3795 0077 03       		.uleb128 0x3
 3796 0078 08       		.uleb128 0x8
 3797 0079 3A       		.uleb128 0x3a
 3798 007a 0B       		.uleb128 0xb
 3799 007b 3B       		.uleb128 0x3b
 3800 007c 0B       		.uleb128 0xb
 3801 007d 49       		.uleb128 0x49
 3802 007e 13       		.uleb128 0x13
 3803 007f 38       		.uleb128 0x38
 3804 0080 0B       		.uleb128 0xb
 3805 0081 00       		.byte	0
 3806 0082 00       		.byte	0
 3807 0083 0C       		.uleb128 0xc
 3808 0084 2E       		.uleb128 0x2e
 3809 0085 01       		.byte	0x1
 3810 0086 3F       		.uleb128 0x3f
 3811 0087 19       		.uleb128 0x19
 3812 0088 03       		.uleb128 0x3
 3813 0089 0E       		.uleb128 0xe
 3814 008a 3A       		.uleb128 0x3a
 3815 008b 0B       		.uleb128 0xb
 3816 008c 3B       		.uleb128 0x3b
 3817 008d 0B       		.uleb128 0xb
 3818 008e 49       		.uleb128 0x49
 3819 008f 13       		.uleb128 0x13
 3820 0090 11       		.uleb128 0x11
 3821 0091 01       		.uleb128 0x1
 3822 0092 12       		.uleb128 0x12
 3823 0093 06       		.uleb128 0x6
 3824 0094 40       		.uleb128 0x40
 3825 0095 18       		.uleb128 0x18
 3826 0096 9642     		.uleb128 0x2116
 3827 0098 19       		.uleb128 0x19
 3828 0099 01       		.uleb128 0x1
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 88


 3829 009a 13       		.uleb128 0x13
 3830 009b 00       		.byte	0
 3831 009c 00       		.byte	0
 3832 009d 0D       		.uleb128 0xd
 3833 009e 34       		.uleb128 0x34
 3834 009f 00       		.byte	0
 3835 00a0 03       		.uleb128 0x3
 3836 00a1 0E       		.uleb128 0xe
 3837 00a2 3A       		.uleb128 0x3a
 3838 00a3 0B       		.uleb128 0xb
 3839 00a4 3B       		.uleb128 0x3b
 3840 00a5 0B       		.uleb128 0xb
 3841 00a6 49       		.uleb128 0x49
 3842 00a7 13       		.uleb128 0x13
 3843 00a8 02       		.uleb128 0x2
 3844 00a9 18       		.uleb128 0x18
 3845 00aa 00       		.byte	0
 3846 00ab 00       		.byte	0
 3847 00ac 0E       		.uleb128 0xe
 3848 00ad 34       		.uleb128 0x34
 3849 00ae 00       		.byte	0
 3850 00af 03       		.uleb128 0x3
 3851 00b0 08       		.uleb128 0x8
 3852 00b1 3A       		.uleb128 0x3a
 3853 00b2 0B       		.uleb128 0xb
 3854 00b3 3B       		.uleb128 0x3b
 3855 00b4 0B       		.uleb128 0xb
 3856 00b5 49       		.uleb128 0x49
 3857 00b6 13       		.uleb128 0x13
 3858 00b7 02       		.uleb128 0x2
 3859 00b8 18       		.uleb128 0x18
 3860 00b9 00       		.byte	0
 3861 00ba 00       		.byte	0
 3862 00bb 0F       		.uleb128 0xf
 3863 00bc 2E       		.uleb128 0x2e
 3864 00bd 00       		.byte	0
 3865 00be 3F       		.uleb128 0x3f
 3866 00bf 19       		.uleb128 0x19
 3867 00c0 03       		.uleb128 0x3
 3868 00c1 0E       		.uleb128 0xe
 3869 00c2 3A       		.uleb128 0x3a
 3870 00c3 0B       		.uleb128 0xb
 3871 00c4 3B       		.uleb128 0x3b
 3872 00c5 05       		.uleb128 0x5
 3873 00c6 27       		.uleb128 0x27
 3874 00c7 19       		.uleb128 0x19
 3875 00c8 11       		.uleb128 0x11
 3876 00c9 01       		.uleb128 0x1
 3877 00ca 12       		.uleb128 0x12
 3878 00cb 06       		.uleb128 0x6
 3879 00cc 40       		.uleb128 0x40
 3880 00cd 18       		.uleb128 0x18
 3881 00ce 9642     		.uleb128 0x2116
 3882 00d0 19       		.uleb128 0x19
 3883 00d1 00       		.byte	0
 3884 00d2 00       		.byte	0
 3885 00d3 10       		.uleb128 0x10
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 89


 3886 00d4 2E       		.uleb128 0x2e
 3887 00d5 01       		.byte	0x1
 3888 00d6 3F       		.uleb128 0x3f
 3889 00d7 19       		.uleb128 0x19
 3890 00d8 03       		.uleb128 0x3
 3891 00d9 0E       		.uleb128 0xe
 3892 00da 3A       		.uleb128 0x3a
 3893 00db 0B       		.uleb128 0xb
 3894 00dc 3B       		.uleb128 0x3b
 3895 00dd 05       		.uleb128 0x5
 3896 00de 27       		.uleb128 0x27
 3897 00df 19       		.uleb128 0x19
 3898 00e0 49       		.uleb128 0x49
 3899 00e1 13       		.uleb128 0x13
 3900 00e2 11       		.uleb128 0x11
 3901 00e3 01       		.uleb128 0x1
 3902 00e4 12       		.uleb128 0x12
 3903 00e5 06       		.uleb128 0x6
 3904 00e6 40       		.uleb128 0x40
 3905 00e7 18       		.uleb128 0x18
 3906 00e8 9742     		.uleb128 0x2117
 3907 00ea 19       		.uleb128 0x19
 3908 00eb 01       		.uleb128 0x1
 3909 00ec 13       		.uleb128 0x13
 3910 00ed 00       		.byte	0
 3911 00ee 00       		.byte	0
 3912 00ef 11       		.uleb128 0x11
 3913 00f0 05       		.uleb128 0x5
 3914 00f1 00       		.byte	0
 3915 00f2 03       		.uleb128 0x3
 3916 00f3 0E       		.uleb128 0xe
 3917 00f4 3A       		.uleb128 0x3a
 3918 00f5 0B       		.uleb128 0xb
 3919 00f6 3B       		.uleb128 0x3b
 3920 00f7 05       		.uleb128 0x5
 3921 00f8 49       		.uleb128 0x49
 3922 00f9 13       		.uleb128 0x13
 3923 00fa 02       		.uleb128 0x2
 3924 00fb 18       		.uleb128 0x18
 3925 00fc 00       		.byte	0
 3926 00fd 00       		.byte	0
 3927 00fe 12       		.uleb128 0x12
 3928 00ff 34       		.uleb128 0x34
 3929 0100 00       		.byte	0
 3930 0101 03       		.uleb128 0x3
 3931 0102 0E       		.uleb128 0xe
 3932 0103 3A       		.uleb128 0x3a
 3933 0104 0B       		.uleb128 0xb
 3934 0105 3B       		.uleb128 0x3b
 3935 0106 05       		.uleb128 0x5
 3936 0107 49       		.uleb128 0x49
 3937 0108 13       		.uleb128 0x13
 3938 0109 02       		.uleb128 0x2
 3939 010a 18       		.uleb128 0x18
 3940 010b 00       		.byte	0
 3941 010c 00       		.byte	0
 3942 010d 13       		.uleb128 0x13
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 90


 3943 010e 2E       		.uleb128 0x2e
 3944 010f 01       		.byte	0x1
 3945 0110 3F       		.uleb128 0x3f
 3946 0111 19       		.uleb128 0x19
 3947 0112 03       		.uleb128 0x3
 3948 0113 0E       		.uleb128 0xe
 3949 0114 3A       		.uleb128 0x3a
 3950 0115 0B       		.uleb128 0xb
 3951 0116 3B       		.uleb128 0x3b
 3952 0117 05       		.uleb128 0x5
 3953 0118 27       		.uleb128 0x27
 3954 0119 19       		.uleb128 0x19
 3955 011a 11       		.uleb128 0x11
 3956 011b 01       		.uleb128 0x1
 3957 011c 12       		.uleb128 0x12
 3958 011d 06       		.uleb128 0x6
 3959 011e 40       		.uleb128 0x40
 3960 011f 18       		.uleb128 0x18
 3961 0120 9642     		.uleb128 0x2116
 3962 0122 19       		.uleb128 0x19
 3963 0123 01       		.uleb128 0x1
 3964 0124 13       		.uleb128 0x13
 3965 0125 00       		.byte	0
 3966 0126 00       		.byte	0
 3967 0127 14       		.uleb128 0x14
 3968 0128 34       		.uleb128 0x34
 3969 0129 00       		.byte	0
 3970 012a 03       		.uleb128 0x3
 3971 012b 08       		.uleb128 0x8
 3972 012c 3A       		.uleb128 0x3a
 3973 012d 0B       		.uleb128 0xb
 3974 012e 3B       		.uleb128 0x3b
 3975 012f 05       		.uleb128 0x5
 3976 0130 49       		.uleb128 0x49
 3977 0131 13       		.uleb128 0x13
 3978 0132 02       		.uleb128 0x2
 3979 0133 18       		.uleb128 0x18
 3980 0134 00       		.byte	0
 3981 0135 00       		.byte	0
 3982 0136 15       		.uleb128 0x15
 3983 0137 34       		.uleb128 0x34
 3984 0138 00       		.byte	0
 3985 0139 03       		.uleb128 0x3
 3986 013a 0E       		.uleb128 0xe
 3987 013b 3A       		.uleb128 0x3a
 3988 013c 0B       		.uleb128 0xb
 3989 013d 3B       		.uleb128 0x3b
 3990 013e 05       		.uleb128 0x5
 3991 013f 49       		.uleb128 0x49
 3992 0140 13       		.uleb128 0x13
 3993 0141 3F       		.uleb128 0x3f
 3994 0142 19       		.uleb128 0x19
 3995 0143 3C       		.uleb128 0x3c
 3996 0144 19       		.uleb128 0x19
 3997 0145 00       		.byte	0
 3998 0146 00       		.byte	0
 3999 0147 16       		.uleb128 0x16
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 91


 4000 0148 34       		.uleb128 0x34
 4001 0149 00       		.byte	0
 4002 014a 03       		.uleb128 0x3
 4003 014b 0E       		.uleb128 0xe
 4004 014c 3A       		.uleb128 0x3a
 4005 014d 0B       		.uleb128 0xb
 4006 014e 3B       		.uleb128 0x3b
 4007 014f 0B       		.uleb128 0xb
 4008 0150 49       		.uleb128 0x49
 4009 0151 13       		.uleb128 0x13
 4010 0152 3F       		.uleb128 0x3f
 4011 0153 19       		.uleb128 0x19
 4012 0154 02       		.uleb128 0x2
 4013 0155 18       		.uleb128 0x18
 4014 0156 00       		.byte	0
 4015 0157 00       		.byte	0
 4016 0158 17       		.uleb128 0x17
 4017 0159 21       		.uleb128 0x21
 4018 015a 00       		.byte	0
 4019 015b 49       		.uleb128 0x49
 4020 015c 13       		.uleb128 0x13
 4021 015d 2F       		.uleb128 0x2f
 4022 015e 05       		.uleb128 0x5
 4023 015f 00       		.byte	0
 4024 0160 00       		.byte	0
 4025 0161 00       		.byte	0
 4026              		.section	.debug_aranges,"",%progbits
 4027 0000 4C000000 		.4byte	0x4c
 4028 0004 0200     		.2byte	0x2
 4029 0006 00000000 		.4byte	.Ldebug_info0
 4030 000a 04       		.byte	0x4
 4031 000b 00       		.byte	0
 4032 000c 0000     		.2byte	0
 4033 000e 0000     		.2byte	0
 4034 0010 00000000 		.4byte	.LFB64
 4035 0014 10110000 		.4byte	.LFE64-.LFB64
 4036 0018 00000000 		.4byte	.LFB65
 4037 001c 50010000 		.4byte	.LFE65-.LFB65
 4038 0020 00000000 		.4byte	.LFB66
 4039 0024 30010000 		.4byte	.LFE66-.LFB66
 4040 0028 00000000 		.4byte	.LFB67
 4041 002c 60000000 		.4byte	.LFE67-.LFB67
 4042 0030 00000000 		.4byte	.LFB68
 4043 0034 80010000 		.4byte	.LFE68-.LFB68
 4044 0038 00000000 		.4byte	.LFB69
 4045 003c 22000000 		.4byte	.LFE69-.LFB69
 4046 0040 00000000 		.4byte	.LFB70
 4047 0044 26000000 		.4byte	.LFE70-.LFB70
 4048 0048 00000000 		.4byte	0
 4049 004c 00000000 		.4byte	0
 4050              		.section	.debug_ranges,"",%progbits
 4051              	.Ldebug_ranges0:
 4052 0000 00000000 		.4byte	.LFB64
 4053 0004 10110000 		.4byte	.LFE64
 4054 0008 00000000 		.4byte	.LFB65
 4055 000c 50010000 		.4byte	.LFE65
 4056 0010 00000000 		.4byte	.LFB66
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 92


 4057 0014 30010000 		.4byte	.LFE66
 4058 0018 00000000 		.4byte	.LFB67
 4059 001c 60000000 		.4byte	.LFE67
 4060 0020 00000000 		.4byte	.LFB68
 4061 0024 80010000 		.4byte	.LFE68
 4062 0028 00000000 		.4byte	.LFB69
 4063 002c 22000000 		.4byte	.LFE69
 4064 0030 00000000 		.4byte	.LFB70
 4065 0034 26000000 		.4byte	.LFE70
 4066 0038 00000000 		.4byte	0
 4067 003c 00000000 		.4byte	0
 4068              		.section	.debug_line,"",%progbits
 4069              	.Ldebug_line0:
 4070 0000 5F040000 		.section	.debug_str,"MS",%progbits,1
 4070      02005801 
 4070      00000201 
 4070      FB0E0D00 
 4070      01010101 
 4071              	.LASF73:
 4072 0000 646D6163 		.ascii	"dmac_tdmem_struct\000"
 4072      5F74646D 
 4072      656D5F73 
 4072      74727563 
 4072      7400
 4073              	.LASF47:
 4074 0012 444D415F 		.ascii	"DMA_Channel_2_TD\000"
 4074      4368616E 
 4074      6E656C5F 
 4074      325F5444 
 4074      00
 4075              	.LASF58:
 4076 0023 74726967 		.ascii	"trigger_source\000"
 4076      6765725F 
 4076      736F7572 
 4076      636500
 4077              	.LASF19:
 4078 0032 72656731 		.ascii	"reg16\000"
 4078      3600
 4079              	.LASF2:
 4080 0038 73686F72 		.ascii	"short int\000"
 4080      7420696E 
 4080      7400
 4081              	.LASF21:
 4082 0042 73697A65 		.ascii	"sizetype\000"
 4082      74797065 
 4082      00
 4083              	.LASF70:
 4084 004b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4084      43313120 
 4084      352E342E 
 4084      31203230 
 4084      31363036 
 4085 007e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4085      20726576 
 4085      6973696F 
 4085      6E203233 
 4085      37373135 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 93


 4086 00b1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4086      66756E63 
 4086      74696F6E 
 4086      2D736563 
 4086      74696F6E 
 4087              	.LASF50:
 4088 00d9 737A5465 		.ascii	"szTempBuffer\000"
 4088      6D704275 
 4088      66666572 
 4088      00
 4089              	.LASF46:
 4090 00e6 444D415F 		.ascii	"DMA_Channel_2_Chan\000"
 4090      4368616E 
 4090      6E656C5F 
 4090      325F4368 
 4090      616E00
 4091              	.LASF27:
 4092 00f9 70686173 		.ascii	"phase_int\000"
 4092      655F696E 
 4092      7400
 4093              	.LASF12:
 4094 0103 75696E74 		.ascii	"uint16\000"
 4094      313600
 4095              	.LASF28:
 4096 010a 70776D5F 		.ascii	"pwm_div\000"
 4096      64697600 
 4097              	.LASF34:
 4098 0112 696E6465 		.ascii	"index\000"
 4098      7800
 4099              	.LASF64:
 4100 0118 57617665 		.ascii	"WaveformB_Buffer\000"
 4100      666F726D 
 4100      425F4275 
 4100      66666572 
 4100      00
 4101              	.LASF11:
 4102 0129 75696E74 		.ascii	"uint8\000"
 4102      3800
 4103              	.LASF74:
 4104 012f 4765744C 		.ascii	"GetLastSampleIndex\000"
 4104      61737453 
 4104      616D706C 
 4104      65496E64 
 4104      657800
 4105              	.LASF32:
 4106 0142 48617264 		.ascii	"Hardware_Config\000"
 4106      77617265 
 4106      5F436F6E 
 4106      66696700 
 4107              	.LASF55:
 4108 0152 63436F6D 		.ascii	"cCommandsReady\000"
 4108      6D616E64 
 4108      73526561 
 4108      647900
 4109              	.LASF57:
 4110 0161 62436F6D 		.ascii	"bCommandReady\000"
 4110      6D616E64 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 94


 4110      52656164 
 4110      7900
 4111              	.LASF31:
 4112 016f 77617665 		.ascii	"wave_temp\000"
 4112      5F74656D 
 4112      7000
 4113              	.LASF29:
 4114 0179 75616464 		.ascii	"uaddr\000"
 4114      7200
 4115              	.LASF33:
 4116 017f 444D415F 		.ascii	"DMA_Config\000"
 4116      436F6E66 
 4116      696700
 4117              	.LASF51:
 4118 018a 63436861 		.ascii	"cCharsReceived\000"
 4118      72735265 
 4118      63656976 
 4118      656400
 4119              	.LASF15:
 4120 0199 666C6F61 		.ascii	"float\000"
 4120      7400
 4121              	.LASF24:
 4122 019f 656E6469 		.ascii	"ending_offset\000"
 4122      6E675F6F 
 4122      66667365 
 4122      7400
 4123              	.LASF30:
 4124 01ad 66726571 		.ascii	"freq\000"
 4124      00
 4125              	.LASF6:
 4126 01b2 6C6F6E67 		.ascii	"long long int\000"
 4126      206C6F6E 
 4126      6720696E 
 4126      7400
 4127              	.LASF68:
 4128 01c0 4E6F6973 		.ascii	"Noise_Adjusted\000"
 4128      655F4164 
 4128      6A757374 
 4128      656400
 4129              	.LASF4:
 4130 01cf 6C6F6E67 		.ascii	"long int\000"
 4130      20696E74 
 4130      00
 4131              	.LASF54:
 4132 01d8 69577269 		.ascii	"iWrite\000"
 4132      746500
 4133              	.LASF40:
 4134 01df 73747269 		.ascii	"string\000"
 4134      6E6700
 4135              	.LASF42:
 4136 01e6 44617461 		.ascii	"Data\000"
 4136      00
 4137              	.LASF59:
 4138 01eb 5553425F 		.ascii	"USB_Out_Buffer\000"
 4138      4F75745F 
 4138      42756666 
 4138      657200
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 95


 4139              	.LASF63:
 4140 01fa 77617665 		.ascii	"wavea_offset\000"
 4140      615F6F66 
 4140      66736574 
 4140      00
 4141              	.LASF66:
 4142 0207 77617665 		.ascii	"waveb_gain\000"
 4142      625F6761 
 4142      696E00
 4143              	.LASF44:
 4144 0212 444D415F 		.ascii	"DMA_Channel_1_Chan\000"
 4144      4368616E 
 4144      6E656C5F 
 4144      315F4368 
 4144      616E00
 4145              	.LASF20:
 4146 0225 6C6F6E67 		.ascii	"long double\000"
 4146      20646F75 
 4146      626C6500 
 4147              	.LASF41:
 4148 0231 50757443 		.ascii	"PutChar\000"
 4148      68617200 
 4149              	.LASF1:
 4150 0239 756E7369 		.ascii	"unsigned char\000"
 4150      676E6564 
 4150      20636861 
 4150      7200
 4151              	.LASF25:
 4152 0247 61766172 		.ascii	"avar\000"
 4152      00
 4153              	.LASF36:
 4154 024c 436F6D6D 		.ascii	"CommandCheck\000"
 4154      616E6443 
 4154      6865636B 
 4154      00
 4155              	.LASF52:
 4156 0259 737A436F 		.ascii	"szCommandsBuffer\000"
 4156      6D6D616E 
 4156      64734275 
 4156      66666572 
 4156      00
 4157              	.LASF0:
 4158 026a 7369676E 		.ascii	"signed char\000"
 4158      65642063 
 4158      68617200 
 4159              	.LASF7:
 4160 0276 6C6F6E67 		.ascii	"long long unsigned int\000"
 4160      206C6F6E 
 4160      6720756E 
 4160      7369676E 
 4160      65642069 
 4161              	.LASF72:
 4162 028d 433A5C55 		.ascii	"C:\\Users\\merce\\Documents\\scope\\CyScope\\Twelve"
 4162      73657273 
 4162      5C6D6572 
 4162      63655C44 
 4162      6F63756D 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 96


 4163 02ba 2D626974 		.ascii	"-bit-4-chan-43\\ScopeKitProg\\Scope_CY8KIT-043.cyds"
 4163      2D342D63 
 4163      68616E2D 
 4163      34335C53 
 4163      636F7065 
 4164 02eb 6E00     		.ascii	"n\000"
 4165              	.LASF8:
 4166 02ed 756E7369 		.ascii	"unsigned int\000"
 4166      676E6564 
 4166      20696E74 
 4166      00
 4167              	.LASF48:
 4168 02fa 4368616E 		.ascii	"Channel_1_Data\000"
 4168      6E656C5F 
 4168      315F4461 
 4168      746100
 4169              	.LASF22:
 4170 0309 646D6163 		.ascii	"dmac_tdmem\000"
 4170      5F74646D 
 4170      656D00
 4171              	.LASF3:
 4172 0314 73686F72 		.ascii	"short unsigned int\000"
 4172      7420756E 
 4172      7369676E 
 4172      65642069 
 4172      6E7400
 4173              	.LASF23:
 4174 0327 73746174 		.ascii	"status\000"
 4174      757300
 4175              	.LASF17:
 4176 032e 63686172 		.ascii	"char\000"
 4176      00
 4177              	.LASF35:
 4178 0333 6D61696E 		.ascii	"main\000"
 4178      00
 4179              	.LASF10:
 4180 0338 696E7433 		.ascii	"int32_t\000"
 4180      325F7400 
 4181              	.LASF65:
 4182 0340 57617665 		.ascii	"WaveformB_Temp_Buffer\000"
 4182      666F726D 
 4182      425F5465 
 4182      6D705F42 
 4182      75666665 
 4183              	.LASF53:
 4184 0356 69526561 		.ascii	"iRead\000"
 4184      6400
 4185              	.LASF69:
 4186 035c 44696769 		.ascii	"Digital_AutoUpdate\000"
 4186      74616C5F 
 4186      4175746F 
 4186      55706461 
 4186      746500
 4187              	.LASF13:
 4188 036f 75696E74 		.ascii	"uint32\000"
 4188      333200
 4189              	.LASF71:
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 97


 4190 0376 6D61696E 		.ascii	"main.c\000"
 4190      2E6300
 4191              	.LASF18:
 4192 037d 72656738 		.ascii	"reg8\000"
 4192      00
 4193              	.LASF5:
 4194 0382 6C6F6E67 		.ascii	"long unsigned int\000"
 4194      20756E73 
 4194      69676E65 
 4194      6420696E 
 4194      7400
 4195              	.LASF14:
 4196 0394 696E7433 		.ascii	"int32\000"
 4196      3200
 4197              	.LASF16:
 4198 039a 646F7562 		.ascii	"double\000"
 4198      6C6500
 4199              	.LASF67:
 4200 03a1 77617665 		.ascii	"waveb_offset\000"
 4200      625F6F66 
 4200      66736574 
 4200      00
 4201              	.LASF39:
 4202 03ae 63684861 		.ascii	"chHandle\000"
 4202      6E646C65 
 4202      00
 4203              	.LASF9:
 4204 03b7 5F5F696E 		.ascii	"__int32_t\000"
 4204      7433325F 
 4204      7400
 4205              	.LASF56:
 4206 03c1 737A436F 		.ascii	"szCommand\000"
 4206      6D6D616E 
 4206      6400
 4207              	.LASF60:
 4208 03cb 57617665 		.ascii	"WaveformA_Buffer\000"
 4208      666F726D 
 4208      415F4275 
 4208      66666572 
 4208      00
 4209              	.LASF38:
 4210 03dc 50757453 		.ascii	"PutString\000"
 4210      7472696E 
 4210      6700
 4211              	.LASF37:
 4212 03e6 52656365 		.ascii	"ReceivedBytes\000"
 4212      69766564 
 4212      42797465 
 4212      7300
 4213              	.LASF43:
 4214 03f4 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4214      52784275 
 4214      66666572 
 4214      00
 4215              	.LASF61:
 4216 0401 57617665 		.ascii	"WaveformA_Temp_Buffer\000"
 4216      666F726D 
ARM GAS  C:\Users\merce\AppData\Local\Temp\ccbVl0UH.s 			page 98


 4216      415F5465 
 4216      6D705F42 
 4216      75666665 
 4217              	.LASF62:
 4218 0417 77617665 		.ascii	"wavea_gain\000"
 4218      615F6761 
 4218      696E00
 4219              	.LASF49:
 4220 0422 4368616E 		.ascii	"Channel_2_Data\000"
 4220      6E656C5F 
 4220      325F4461 
 4220      746100
 4221              	.LASF45:
 4222 0431 444D415F 		.ascii	"DMA_Channel_1_TD\000"
 4222      4368616E 
 4222      6E656C5F 
 4222      315F5444 
 4222      00
 4223              	.LASF26:
 4224 0442 62766172 		.ascii	"bvar\000"
 4224      00
 4225              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
